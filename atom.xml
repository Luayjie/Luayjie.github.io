<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风筝上的猫</title>
  
  
  <link href="https://lukme.top/atom.xml" rel="self"/>
  
  <link href="https://lukme.top/"/>
  <updated>2025-01-21T13:39:33.790Z</updated>
  <id>https://lukme.top/</id>
  
  <author>
    <name>Luay🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对接Harbor服务</title>
    <link href="https://lukme.top/posts/655061ae.html"/>
    <id>https://lukme.top/posts/655061ae.html</id>
    <published>2024-12-05T14:16:11.000Z</published>
    <updated>2025-01-21T13:39:33.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自建证书配置harbor的https">自建证书配置harbor的https:</h2><p><strong>1.harbor版本的选择</strong><br>harbor是VMware公司基于Golang编程语言开源的镜像仓库服务，也支持helm仓库。</p><p>官方地址:<br><a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a><br>版本推荐选择2.8之前的，因为在2.8之后的版本移除了CHARTMUSEUM项目，该项目是helm仓库，尽管移除了，但是官方有对应的OCI实现方式。</p><p><strong>2.下载Harbor</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.7.4/harbor-offline-installer-v2.7.4.tgz</span><br></pre></td></tr></table></figure><h2 id="部署Harbor服务端环境">部署Harbor服务端环境</h2><table><thead><tr><th>主机名</th><th>WanIP</th><th>LanIP</th><th>应用</th><th>配置</th></tr></thead><tbody><tr><td>harbor</td><td>10.0.0.250</td><td>172.16.1.250</td><td>docker，docker-compose，Harbor</td><td>2c 2G 50G</td></tr></tbody></table><p><strong>1.安装docker，docker-compose</strong></p><p>略，详情见k8s部署–docke安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor ~]# docker -v</span><br><span class="line">Docker version 20.10.24, build 297e128</span><br><span class="line">[root@harbor ~]# docker-compose -v</span><br><span class="line">Docker Compose version v2.23.0</span><br></pre></td></tr></table></figure><p><strong>2.解压Harbor软件包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor ~]# tar xf harbor-offline-installer-v2.7.4.tgz -C /softwares/s</span><br></pre></td></tr></table></figure><p><strong>3.创建工作目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor ~]# <span class="built_in">mkdir</span> -p /softwares/harbor/certs/&#123;ca,harbor-server,docker-client&#125;</span><br></pre></td></tr></table></figure><p><strong>4.进入到harbor证书存放目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor ~]# <span class="built_in">cd</span> /softwares/harbor/certs/</span><br><span class="line"></span><br><span class="line">[root@harbor certs]# ll</span><br><span class="line">drwxr-xr-x 2 root root 4096 Dec  7 06:50 ca/</span><br><span class="line">drwxr-xr-x 2 root root 4096 Dec  7 06:50 docker-client/</span><br><span class="line">drwxr-xr-x 2 root root 4096 Dec  7 06:50 harbor-server/</span><br></pre></td></tr></table></figure><p><strong>5.创建CA的私钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor certs]# openssl genrsa -out ca/ca.key 4096</span><br><span class="line"><span class="comment">#证书有效长度4096</span></span><br><span class="line"></span><br><span class="line">[root@harbor certs]# ll ca</span><br><span class="line">-rw------- 1 root root 3272 Dec  7 06:53 ca.key</span><br></pre></td></tr></table></figure><p><strong>6.基于自建的CA私钥创建CA证书(注意，证书签发的域名范围)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor certs]# openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line">-subj <span class="string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=lukme.com&quot;</span> \</span><br><span class="line">-key ca/ca.key \</span><br><span class="line">-out ca/ca.crt</span><br><span class="line"></span><br><span class="line">[root@harbor certs]# ll ca/</span><br><span class="line">-rw-r--r-- 1 root root 2041 Dec  7 06:57 ca.crt</span><br><span class="line">-rw------- 1 root root 3272 Dec  7 06:53 ca.key</span><br></pre></td></tr></table></figure><p><strong>7.查看自建证书信息，有效期等</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor certs]# openssl  x509 -<span class="keyword">in</span> ca/ca.crt -noout -text</span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number:</span><br><span class="line">            79:78:08:92:7b:d2:03:77:42:e1:d8:19:96:78:8f:a1:b0:48:5e:45</span><br><span class="line">        Signature Algorithm: sha512WithRSAEncryption</span><br><span class="line">        Issuer: C = CN, ST = Beijing, L = Beijing, O = example, OU = Personal, CN = lukme.com</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Dec  7 06:57:18 2024 GMT</span><br><span class="line">            Not After : Dec  5 06:57:18 2034 GMT</span><br><span class="line">        Subject: C = CN, ST = Beijing, L = Beijing, O = example, OU = Personal, CN = lukme.com</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (4096 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p><strong>8 配置harbor证书</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 生成harbor服务器的私钥</span></span><br><span class="line">[root@harbor certs]# openssl genrsa -out harbor-server/harbor.lukme.com.key 4096</span><br><span class="line"></span><br><span class="line">[root@harbor certs]# ll harbor-server/</span><br><span class="line">-rw------- 1 root root 3272 Dec  7 07:01 harbor.lukme.com.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. harbor服务器基于私钥签发证书认证请求（csr文件），让自建CA认证</span></span><br><span class="line">[root@harbor certs]# openssl req -sha512 -new \</span><br><span class="line">-subj <span class="string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.lukme.com&quot;</span> \</span><br><span class="line">-key harbor-server/harbor.lukme.com.key \</span><br><span class="line">-out harbor-server/harbor.lukme.com.csr</span><br><span class="line"></span><br><span class="line">[root@harbor certs]# ll harbor-server/</span><br><span class="line">-rw-r--r-- 1 root root 1712 Dec  7 07:03 harbor.lukme.com.csr</span><br><span class="line">-rw------- 1 root root 3272 Dec  7 07:01 harbor.lukme.com.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 生成 x509 v3 的扩展文件用于认证</span></span><br><span class="line">[root@harbor certs]# <span class="built_in">cat</span> &gt; harbor-server/v3.ext &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">authorityKeyIdentifier=keyid,issuer</span></span><br><span class="line"><span class="string">basicConstraints=CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">DNS.1=harbor.lukme.com</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">[root@harbor certs]# ll harbor-server/</span><br><span class="line">-rw-r--r-- 1 root root 1712 Dec  7 07:03 harbor.lukme.com.csr</span><br><span class="line">-rw------- 1 root root 3272 Dec  7 07:01 harbor.lukme.com.key</span><br><span class="line">-rw-r--r-- 1 root root  235 Dec  7 07:05 v3.ext</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 基于 x509 v3 的扩展文件认证签发harbor server证书</span></span><br><span class="line">[root@harbor certs]# openssl x509 -req -sha512 -days 3650 \</span><br><span class="line">-extfile harbor-server/v3.ext \</span><br><span class="line">-CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial \</span><br><span class="line">-<span class="keyword">in</span> harbor-server/harbor.lukme.com.csr \</span><br><span class="line">-out harbor-server/harbor.lukme.com.crt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@harbor certs]# ll harbor-server/</span><br><span class="line">-rw-r--r-- 1 root root 2130 Dec  7 07:07 harbor.lukme.com.crt</span><br><span class="line">-rw-r--r-- 1 root root 1712 Dec  7 07:03 harbor.lukme.com.csr</span><br><span class="line">-rw------- 1 root root 3272 Dec  7 07:01 harbor.lukme.com.key</span><br><span class="line">-rw-r--r-- 1 root root  235 Dec  7 07:05 v3.ext</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 修改harbor的配置文件使用自建证书</span></span><br><span class="line">[root@harbor certs]# <span class="built_in">cp</span> ../harbor.yml.tmpl ../harbor.yml</span><br><span class="line">[root@harbor certs]# vim ../harbor.yml</span><br><span class="line">...</span><br><span class="line">hostname: harbor.lukme.com</span><br><span class="line">https:</span><br><span class="line">  ...</span><br><span class="line">  certificate: /softwares/harbor/certs/harbor-server/harbor.lukme.com.crt</span><br><span class="line">  private_key: /softwares/harbor/certs/harbor-server/harbor.lukme.com.key</span><br><span class="line">...</span><br><span class="line">harbor_admin_password: 1</span><br><span class="line">...</span><br><span class="line">data_volume: /data/harbor  </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#6. 安装harbor</span></span><br><span class="line">[root@harbor certs]# ../install.sh --with-chartmuseum</span><br><span class="line"></span><br><span class="line"><span class="comment">#7. 访问HarborUI</span></span><br><span class="line">https://harbor.lukme.com </span><br><span class="line"></span><br><span class="line">温馨提示:</span><br><span class="line">- 1.此处在windows要配置hosts文件解析，内容为: <span class="string">&quot;10.0.0.250 harbor.lukme.com&quot;</span></span><br><span class="line">- 2.默认的用户名和密码为: <span class="string">&quot;admin:1&quot;</span></span><br><span class="line">新建公开项目验证Harbor可用</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241208093615700.png" alt="image-20241208093615700"></p><p><img src="https://cos.lukme.top/Pic/image-20241208093933288.png" alt="image-20241208093933288"></p><h2 id="上传镜像可能会遇到的报错">上传镜像可能会遇到的报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Q1： Get <span class="string">&quot;https://harbor.lukme.com/v2/&quot;</span>: dial tcp: lookup harbor.lukme.com on 127.0.0.53:53: no such host</span><br><span class="line">错误原因:</span><br><span class="line">没有配置hosts文件解析。</span><br><span class="line">解决方案:</span><br><span class="line">添加hosts文件解析即可。</span><br><span class="line"></span><br><span class="line">Q2: Get <span class="string">&quot;https://harbor.lukme.com/v2/&quot;</span>: x509: certificate signed by unknown authority</span><br><span class="line">错误原因:</span><br><span class="line">docker客户端不信任自建证书。</span><br><span class="line">解决方案:</span><br><span class="line">拷贝自建证书即可。</span><br></pre></td></tr></table></figure><h2 id="配置docker客户端证书">配置docker客户端证书</h2><p><strong>1. 生成docker客户端证书</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor certs]# openssl x509 -inform PEM -<span class="keyword">in</span> harbor-server/harbor.lukme.com.crt -out docker-client/harbor.lukme.com.cert</span><br><span class="line"></span><br><span class="line"><span class="comment">#其实这个文件和Harbor的证书一样，可以md5检验一下</span></span><br><span class="line">[root@harbor certs]# <span class="built_in">md5sum</span> docker-client/harbor.lukme.com.cert harbor-server/harbor.lukme.com.crt </span><br><span class="line">44e9282de7a9dfc566f43205c8bbefa9  docker-client/harbor.lukme.com.cert</span><br><span class="line">44e9282de7a9dfc566f43205c8bbefa9  harbor-server/harbor.lukme.com.crt</span><br><span class="line"></span><br><span class="line">`所以后面的key直接复制harbor的了`</span><br></pre></td></tr></table></figure><p><strong>2. 拷贝docker client证书文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor certs]# <span class="built_in">cp</span> harbor-server/harbor.lukme.com.key docker-client/</span><br><span class="line">[root@harbor certs]# <span class="built_in">cp</span> ca/ca.crt docker-client/</span><br><span class="line"></span><br><span class="line">[root@harbor certs]# ll docker-client/</span><br><span class="line">-rw-r--r-- 1 root root 2041 Dec  7 08:17 ca.crt</span><br><span class="line">-rw-r--r-- 1 root root 2130 Dec  7 08:13 harbor.lukme.com.cert</span><br><span class="line">-rw------- 1 root root 3272 Dec  7 08:17 harbor.lukme.com.key</span><br></pre></td></tr></table></figure><p><strong>3. docker客户端创建自建证书的目录结构</strong></p><p>以233节点为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@worker233 ~]# <span class="built_in">mkdir</span> -p /etc/docker/certs.d/harbor.lukme.com/mkdir -p </span><br><span class="line">/etc/docker/certs.d/harbor.lukme.com/</span><br><span class="line"><span class="comment">#注意域名的名称和目录要一致</span></span><br></pre></td></tr></table></figure><p><strong>4. docker客户端配置名称解析</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@worker233 ~]# <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">10.0.0.250 harbor.lukme.com</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>5. 将客户端证书文件进行拷贝</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@worker233 ~]# scp harbor.lukme.com:/softwares/harbor/certs/docker-client/* /etc/docker/certs.d/harbor.lukme.com/</span><br></pre></td></tr></table></figure><p><strong>6. docker客户端验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@worker233 ~]# docker login -u admin -p 1 harbor.lukme.com</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p><strong>其他docker客户端重复以上步骤(3-5)</strong></p><p>参考链接:<br><a href="https://goharbor.io/docs/1.10/install-config/configure-https/#generate-a-certificate-authority-certificate">https://goharbor.io/docs/1.10/install-config/configure-https/#generate-a-certificate-authority-certificate</a><br><a href="https://www.cnblogs.com/yinzhengjie/p/17153673.html">https://www.cnblogs.com/yinzhengjie/p/17153673.html</a></p><p><strong>7. 推送镜像到Harbor</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.查看镜像</span><br><span class="line">[root@worker233 ~]# docker images</span><br><span class="line">mysql              8.0       6c55ddbef969   7 weeks ago     591MB</span><br><span class="line"></span><br><span class="line">2.给推送的镜像打标签</span><br><span class="line">[root@worker233 ~]# docker tag mysql:8.0 harbor.lukme.com/mysql/mysql:8.0</span><br><span class="line"></span><br><span class="line">3.推送镜像</span><br><span class="line">[root@worker233 ~]# docker push harbor.lukme.com/mysql/mysql:8.0</span><br><span class="line">The push refers to repository [harbor.lukme.com/mysql/mysql]</span><br><span class="line">595880a638fc: Pushed </span><br><span class="line">e9e263909c0a: Pushed </span><br><span class="line">238a03116078: Pushed </span><br><span class="line">bad6f6fa0a06: Pushed </span><br><span class="line">20466b7f6582: Pushed </span><br><span class="line">cadedf47cc2b: Pushed </span><br><span class="line">8.0: digest: sha256:ce327c13199b0f553b3f3f53f8f1eabd725e589ec4bd1a937095812288b33e24 size: 2618</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241208094953820.png" alt="image-20241208094953820"></p><p><strong>8.验证其他节点拉取是否ok</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# docker pull harbor.lukme.com/mysql/mysql:8.0</span><br><span class="line">8.0: Pulling from mysql/mysql</span><br><span class="line">2c0a233485c3: Pull complete </span><br><span class="line">b746eccf8a0b: Pull complete </span><br><span class="line">570d30cf82c5: Pull complete </span><br><span class="line">Digest: sha256:ce327c13199b0f553b3f3f53f8f1eabd725e589ec4bd1a937095812288b33e24</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> harbor.lukme.com/mysql/mysql:8.0</span><br><span class="line">harbor.lukme.com/mysql/mysql:8.0</span><br></pre></td></tr></table></figure><h2 id="Harbor的私有镜像仓库">Harbor的私有镜像仓库</h2><blockquote><p>拉取Harbor设置的私有镜像仓库，参考sercet资源里，Harbor认证</p></blockquote><h2 id="综合—harbor认证">综合—harbor认证</h2><h3 id="故障排查">故障排查</h3><blockquote><p>将harbor仓库的WordPress改为私有仓库，将WordPress的镜像仓库拉取改为harbor仓库</p><p>资源清单里的镜像拉取策略改为always，那么应用资源清单后就会报错镜像拉取失败问题</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;分析&#x27;</span>：</span><br><span class="line">拉取镜像时候会去远程仓库建立连接，对比本地的镜像和远程仓库镜像信息是否一致，判断是否被修改，但是由于远程仓库私密的，没有访问权限</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;资源清单如下&#x27;</span></span><br><span class="line">[root@master231 secret]# <span class="built_in">cat</span> wordpress.yaml </span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy-db-cm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: db</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: db</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: datetime</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/localtime</span><br><span class="line">      - name: data</span><br><span class="line">      containers:</span><br><span class="line">      - name: db</span><br><span class="line">        image: mysql:8.0 </span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datetime</span><br><span class="line">          mountPath: /etc/localtime</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;yes&quot;</span></span><br><span class="line">        - name: MYSQL_DATABASE</span><br><span class="line">          value: wp</span><br><span class="line">        - name: MYSQL_USER</span><br><span class="line">          value: wp_user</span><br><span class="line">        - name: MYSQL_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-db</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: db</span><br><span class="line">  ports:</span><br><span class="line">    - name: db</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 3306</span><br><span class="line">      targetPort: 3306</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy-wp-cm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: wp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: wp</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: datetime</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/localtime</span><br><span class="line">      containers:</span><br><span class="line">      - name: wp</span><br><span class="line">        image: harbor.lukme.com/wordpress/wordpress:latest</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datetime</span><br><span class="line">          mountPath: /etc/localtime</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: WORDPRESS_DB_HOST</span><br><span class="line">          value: <span class="string">&quot;svc-db&quot;</span></span><br><span class="line">        - name: WORDPRESS_DB_USER</span><br><span class="line">          value: wp_user</span><br><span class="line">        - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_NAME</span><br><span class="line">          value: wp</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-wp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: wp</span><br><span class="line">  ports:</span><br><span class="line">    - name: wp</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      nodePort: 30080</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241229215324649.png" alt="image-20241229215324649"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 secret]# kubectl get pod</span><br><span class="line">NAME                            READY   STATUS             RESTARTS   AGE</span><br><span class="line">deploy-db-cm-bcc685766-wsbq6    1/1     Running            0          5m49s</span><br><span class="line">deploy-wp-cm-665cc988c9-vtcvh   0/1     ImagePullBackOff   0          5m49s</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241229215408711.png" alt="image-20241229215408711"></p><h3 id="故障解决">故障解决</h3><p><strong>基于secret响应式创建harbor的认证信息</strong>       ==基于harbor的admin用户==</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 secret]#  kubectl create secret docker-registry harbor-authentication --docker-username=admin --docker-password=1 --docker-email=admin@qq.com --docker-server=harbor.lukme.com </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;修改后资源清单如下&#x27;</span></span><br><span class="line">[root@master231 secret]# <span class="built_in">cat</span> wordpress.yaml </span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy-db-cm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: db</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: db</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: datetime</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/localtime</span><br><span class="line">      - name: data</span><br><span class="line">      containers:</span><br><span class="line">      - name: db</span><br><span class="line">        image: mysql:8.0 </span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datetime</span><br><span class="line">          mountPath: /etc/localtime</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;yes&quot;</span></span><br><span class="line">        - name: MYSQL_DATABASE</span><br><span class="line">          value: wp</span><br><span class="line">        - name: MYSQL_USER</span><br><span class="line">          value: wp_user</span><br><span class="line">        - name: MYSQL_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-db</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: db</span><br><span class="line">  ports:</span><br><span class="line">    - name: db</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 3306</span><br><span class="line">      targetPort: 3306</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy-wp-cm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: wp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: wp</span><br><span class="line">    spec:</span><br><span class="line">    <span class="comment"># 拉取私有镜像仓库时可以使用的认证信息，可以定义多个</span></span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      <span class="comment"># 指定secret的名称</span></span><br><span class="line">       - name: harbor-authentication</span><br><span class="line">      volumes:</span><br><span class="line">      - name: datetime</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/localtime</span><br><span class="line">      containers:</span><br><span class="line">      - name: wp</span><br><span class="line">        image: harbor.lukme.com/wordpress/wordpress:latest</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datetime</span><br><span class="line">          mountPath: /etc/localtime</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: WORDPRESS_DB_HOST</span><br><span class="line">          value: <span class="string">&quot;svc-db&quot;</span></span><br><span class="line">        - name: WORDPRESS_DB_USER</span><br><span class="line">          value: wp_user</span><br><span class="line">        - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_NAME</span><br><span class="line">          value: wp</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-wp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: wp</span><br><span class="line">  ports:</span><br><span class="line">    - name: wp</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      nodePort: 30080</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 secret]# kubectl apply -f wordpress.yaml </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master231 secret]# kubectl get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">deploy-db-cm-bcc685766-zscbg    1/1     Running   0          7s</span><br><span class="line">deploy-wp-cm-54c5879d98-pwrrs   1/1     Running   0          7s</span><br></pre></td></tr></table></figure><h3 id="基于harbor其它用户认证">基于harbor其它用户认证</h3><p><img src="https://cos.lukme.top/Pic/image-20241229223836514.png" alt="image-20241229223836514"></p><p><img src="https://cos.lukme.top/Pic/image-20241229223915450.png" alt="image-20241229223915450"></p><p><strong>基于声明式创建harbor的认证信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看之前Harbor认证信息如何写的</span></span><br><span class="line">[root@master231 secret]# kubectl get secrets harbor-authentication -oyaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: eyJhdXRocyI6eyJoYXJib3IubHVrbWUuY29tIjp7InVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEiLCJlbWFpbCI6ImFkbWluQHFxLmNvbSIsImF1dGgiOiJZV1J0YVc0Nk1RPT0ifX19</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2024-12-29T14:44:01Z&quot;</span></span><br><span class="line">  name: harbor-authentication</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;594485&quot;</span></span><br><span class="line">  uid: f5bcf199-437a-4c70-a55b-afe11e2e1204</span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/dockerconfigjson</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现里面是base64编码格式的信息，反编译出原格式</span></span><br><span class="line">[root@master231 secret]# <span class="built_in">echo</span> eyJhdXRocyI6eyJoYXJib3IubHVrbWUuY29tIjp7InVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEiLCJlbWFpbCI6ImFkbWluQHFxLmNvbSIsImF1dGgiOiJZV1J0YVc0Nk1RPT0ifX19|<span class="built_in">base64</span> -d|more</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;auths&quot;</span>:&#123;<span class="string">&quot;harbor.lukme.com&quot;</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;admin@qq.com&quot;</span>,<span class="string">&quot;auth&quot;</span>:<span class="string">&quot;YWRtaW46MQ==&quot;</span>&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 里面还有base64编码，再次反编译</span></span><br><span class="line">[root@master231 secret]# <span class="built_in">echo</span> YWRtaW46MQ==|<span class="built_in">base64</span> -d|more</span><br><span class="line">admin:1</span><br></pre></td></tr></table></figure><p><strong>以上为例，获取认证信息的base64编码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用户名  luay</span><br><span class="line">密码    Harbor123</span><br><span class="line">邮箱    luay@harbor.com</span><br><span class="line"></span><br><span class="line">[root@master231 secret]# <span class="built_in">echo</span> -n luay:Harbor123|<span class="built_in">base64</span></span><br><span class="line">bHVheTpIYXJib3IxMjM=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将信息补上如下</span></span><br><span class="line">&#123;<span class="string">&quot;auths&quot;</span>:&#123;<span class="string">&quot;harbor.lukme.com&quot;</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;luay&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;Harbor123&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;luay@harbor.com&quot;</span>,<span class="string">&quot;auth&quot;</span>:<span class="string">&quot;bHVheTpIYXJib3IxMjM=&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>修改资源清单，加上secret资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 secret]# <span class="built_in">cat</span> wp.yaml </span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy-db-cm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: db</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: db</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: datetime</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/localtime</span><br><span class="line">      - name: data</span><br><span class="line">      containers:</span><br><span class="line">      - name: db</span><br><span class="line">        image: mysql:8.0 </span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datetime</span><br><span class="line">          mountPath: /etc/localtime</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;yes&quot;</span></span><br><span class="line">        - name: MYSQL_DATABASE</span><br><span class="line">          value: wp</span><br><span class="line">        - name: MYSQL_USER</span><br><span class="line">          value: wp_user</span><br><span class="line">        - name: MYSQL_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-db</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: db</span><br><span class="line">  ports:</span><br><span class="line">    - name: db</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 3306</span><br><span class="line">      targetPort: 3306</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy-wp-cm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: wp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: wp</span><br><span class="line">    spec:</span><br><span class="line">    <span class="comment"># 拉取私有镜像仓库时可以使用的认证信息，可以定义多个</span></span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      <span class="comment"># 指定secret的名称</span></span><br><span class="line">       - name: luay-authentication</span><br><span class="line">      volumes:</span><br><span class="line">      - name: datetime</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/localtime</span><br><span class="line">      containers:</span><br><span class="line">      - name: wp</span><br><span class="line">        image: harbor.lukme.com/wordpress/wordpress:latest</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datetime</span><br><span class="line">          mountPath: /etc/localtime</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: WORDPRESS_DB_HOST</span><br><span class="line">          value: <span class="string">&quot;svc-db&quot;</span></span><br><span class="line">        - name: WORDPRESS_DB_USER</span><br><span class="line">          value: wp_user</span><br><span class="line">        - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_NAME</span><br><span class="line">          value: wp</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-wp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: wp</span><br><span class="line">  ports:</span><br><span class="line">    - name: wp</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      nodePort: 30080</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: luay-authentication</span><br><span class="line">  namespace: default</span><br><span class="line">stringData:</span><br><span class="line">  .dockerconfigjson: |</span><br><span class="line">    &#123;<span class="string">&quot;auths&quot;</span>:&#123;<span class="string">&quot;harbor.lukme.com&quot;</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;luay&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;Harbor123&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;luay@harbor.com&quot;</span>,<span class="string">&quot;auth&quot;</span>:<span class="string">&quot;bHVheTpIYXJib3IxMjM=&quot;</span>&#125;&#125;&#125;</span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/dockerconfigjson</span><br></pre></td></tr></table></figure><h3 id="验证">验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 secret]# kubectl apply -f wp.yaml</span><br><span class="line">[root@master231 secret]# kubectl get po </span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">deploy-db-cm-bcc685766-gx2x6    1/1     Running   0          76s</span><br><span class="line">deploy-wp-cm-54c5879d98-2l8d8   1/1     Running   0          76s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试移除luay用户，看看是否还能拉取成功</span></span><br><span class="line"></span><br><span class="line">[root@master231 secret]# kubectl get po</span><br><span class="line">NAME                            READY   STATUS         RESTARTS   AGE</span><br><span class="line">deploy-db-cm-bcc685766-hlxgk    1/1     Running        0          105s</span><br><span class="line">deploy-wp-cm-54c5879d98-z8qc4   1/1     Running        0          105s</span><br><span class="line">deploy-wp-cm-566b9c4787-llgmz   0/1     ErrImagePull   0          5s</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">k8s对接私有镜像仓库harbor</summary>
    
    
    
    <category term="kubernetes" scheme="https://lukme.top/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://lukme.top/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s报错排查技巧</title>
    <link href="https://lukme.top/posts/5c722e91.html"/>
    <id>https://lukme.top/posts/5c722e91.html</id>
    <published>2024-12-04T15:12:16.000Z</published>
    <updated>2025-01-21T13:36:54.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pod报错及可能原因">pod报错及可能原因</h2><pre><code>1.ImagePullBackOff  问题原因:  镜像拉取失败。  可能原因：  1.可能是网络问题导致，检查Pod所在节点是否能够正常访问网络;  2.镜像名称写错，也可能会导致这个错误;  3.镜像是私有仓库，镜像无权限拉取;  2.ContainerCreating问题分析:容器正在创建阶段，等待容器创建，该过程包含拉取镜像的时间。3.Pending问题分析:任务已经被K8S集群接受，但是未调度到指定节点。可能原因:1.当前集群不正常工作，请检查集群状态，比如CNI组件未安装;2.指定的调度的节点不存在时也会出现这样的问题;3.端口冲突，无法完成调度;4.所有节点都被打上污点，且pod没有配置污点容忍也会导致该状态;4.CrashLoopBackOff问题分析:处于该状态，说明Pod内至少有一个容器正在重启。可能原因:1.可能是容器的守护进程运行命令结束导致的;5.Completed问题分析:容器正常退出，容器没有被强制中断。6.Running问题分析:至少有一个容器处于正常运行状态。7.Init:1/2 问题分析:当前的Pod处于初始化容器阶段，目前已经完成一个初始化容器，正在进行第二个容器初始化。8.PodInitializing问题分析:Pod正处于初始化阶段。9.ErrImageNeverPull 问题分析:将镜像下载策略设置为Never，且本地也没有缓存镜像，因此启动容器失败。10.OutOfcpu问题分析:一般情况下是由于CPU资源不足导致的。11.OutOfmemory问题分析:一般情况下是由于内存不足无法分配导致的。12.NodePorts问题分析:当前的worker节点的端口可能存在冲突。13.RunContainerError问题分析:运行容器时出错，可以通过kubectl describe pods &lt;POD_NAME&gt;查看详细的信息。14.ErrImagePull问题分析:拉取镜像是失败。可能原因:1.镜像名称写错了;2.没有访问权限;15.Terminating问题分析:Pod的容器正在删除，此过程可能需要等待一段时间，一般情况下不会超过30s。16.CreateContainerConfigError问题分析:运行容器出错，一般情下，是配置出错。17.ContainerStatusUnknown问题分析:容器重启策略为Nerver，且我们测试时将工作节点的容器直接删除啦。无法获取</code></pre><h2 id="常用排错命令">常用排错命令</h2><h3 id="describe">describe</h3><blockquote><p><code> kubectl describe pod</code></p><p>查看相关 Pod 的详细信息，帮助我们了解 Pod 的状态、配置和运行状况。尤其是Events可以帮助我们做一些故障排查。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl describe pod busybox-pod -n luay</span><br><span class="line"><span class="comment">#如果查看的pod的名称空间不是默认default，则需要指定 -n</span></span><br><span class="line">···</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  18m   default-scheduler  Successfully assigned luay/busybox-pod to node03</span><br><span class="line">  Normal  Pulled     18m   kubelet            Container image <span class="string">&quot;busybox&quot;</span> already present on machine</span><br><span class="line">  Normal  Created    18m   kubelet            Created container busybox-container</span><br><span class="line">  Normal  Started    18m   kubelet            Started container busybox-container</span><br><span class="line">  Normal  Pulled     18m   kubelet            Container image <span class="string">&quot;nginx:alpine&quot;</span> already present on machine</span><br><span class="line">  Normal  Created    18m   kubelet            Created container nginx-container</span><br><span class="line">  Normal  Started    18m   kubelet            Started container nginx-container</span><br><span class="line">  </span><br><span class="line"><span class="comment">#查看node节点信息</span></span><br><span class="line">[root@master ~]# kubectl describe node master01</span><br></pre></td></tr></table></figure><h3 id="logs">logs</h3><blockquote><p><code> kubectl logs 资源名</code>   可以使用kubectl get pod  查看资源名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;kubectl logs 资源名称&#x27;</span></span><br><span class="line">[root@master ~]# kubectl logs mysql80 </span><br><span class="line"></span><br><span class="line"><span class="comment">#实时查看日志</span></span><br><span class="line">[root@master ~]# kubectl logs -f mysql80 </span><br><span class="line"></span><br><span class="line"><span class="comment">#基于一个Pod内多个容器查看指的容器的日志   -c  指定容器名</span></span><br><span class="line">[root@master ~]# kubectl logs -f multiple-wordpress -c db</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;multiple-wordpress&#x27;</span> pod名</span><br><span class="line">-c 指定pod里的某一个容器名</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pod上一个容器的日志（前提是该容器存在，若移除了则看不到）</span></span><br><span class="line"><span class="string">&#x27;这种情况存在于，杀掉了pod里某个容器，又被kubelet重新拉取了另一个新的容器,-p查看上个容器日志&#x27;</span></span><br><span class="line">[root@master ~]#  kubectl logs -f mysql80 -p</span><br><span class="line"><span class="string">&#x27;mysql80&#x27;</span> 容器名   ----待验证</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看5分钟内的日志信息， 默认是查看所有日志，可以自定义指定时间，例如: 5s, 2m, or 3h.</span></span><br><span class="line">[root@master ~]# kubectl logs -f mysql80 --since  5m</span><br></pre></td></tr></table></figure><h3 id="cp">cp</h3><p><strong>将本地的文件拷贝到Pod的容器中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl <span class="built_in">cp</span> wordpress.yaml mysql80:/tmp</span><br><span class="line"></span><br><span class="line">如何查看？</span><br><span class="line">[root@master ~]# kubectl <span class="built_in">exec</span> -it mysql80 --<span class="built_in">ls</span> /tmp</span><br><span class="line">类似于docker <span class="built_in">exec</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有多个容器，则需要使用-c指定 </span></span><br><span class="line">kubectl <span class="built_in">cp</span>  wordpress.yaml  -c wp multiple-wordpress:/</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;multiple-wordpress&#x27;</span>   <span class="comment">#pod名   ---待验证</span></span><br><span class="line"><span class="string">&#x27;wp&#x27;</span> <span class="comment">#容器名</span></span><br><span class="line"></span><br><span class="line">如果有多个容器，则需要使用-c指定容器的名称，若不指定，则默认Pod连接第一个容器</span><br></pre></td></tr></table></figure><h3 id="explain">explain</h3><p><strong>查看指定字段的帮助信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl explain pods.</span><br><span class="line">[root@master ~]# kubectl explain pods.metadata</span><br><span class="line">[root@master ~]# kubectl explain pods.metadata.name</span><br><span class="line">[root@master ~]# kubectl explain pods.spec.containers</span><br></pre></td></tr></table></figure><p><strong>常见的资源类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;string&gt;：</span><br><span class="line">表示一个字符串。</span><br><span class="line"></span><br><span class="line">&lt;Object&gt;:</span><br><span class="line">表示有下级字段。</span><br><span class="line"></span><br><span class="line"> &lt;[]Object&gt;:</span><br><span class="line">表示数组对象说可以有多个，每个对象的区分使用<span class="string">&quot;-&quot;</span>，同一个对象数组内的相关字段可以相互交换。</span><br><span class="line"></span><br><span class="line">&lt;boolean&gt;:</span><br><span class="line">只有<span class="literal">true</span>和<span class="literal">false</span>两个有效值。</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">integer</span>&gt;:</span><br><span class="line">整型，表示的是一个整数。</span><br><span class="line"></span><br><span class="line">-required-</span><br><span class="line">表示该字段必须定义，不定义则会报错。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">了解一些常见报错指令以及排错技巧</summary>
    
    
    
    <category term="kubernetes" scheme="https://lukme.top/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://lukme.top/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s资源清单</title>
    <link href="https://lukme.top/posts/219d8e69.html"/>
    <id>https://lukme.top/posts/219d8e69.html</id>
    <published>2024-12-03T12:20:13.000Z</published>
    <updated>2025-01-21T13:39:41.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="k8s资源清单描述">k8s资源清单描述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">ApiVersion:</span><br><span class="line">资源的版本，官方对每个资源规定了不同的版本，我们需要根据资源的版本进行书写。</span><br><span class="line">一般情况下，资源的版本很少变动，除非在升级过程中，随着功能的增强，版本可能也会微调。</span><br><span class="line"></span><br><span class="line">kind:</span><br><span class="line">资源的类型，K8S集群中一切皆资源。</span><br><span class="line"></span><br><span class="line">metadata:</span><br><span class="line">资源的元数据信息，包括但不限于： </span><br><span class="line">- 资源的名称;(常用)</span><br><span class="line">- 资源所属的名称空间;(常用)</span><br><span class="line">- 资源的标签;(常用)</span><br><span class="line">- 资源的注解;(早期版本常用)</span><br><span class="line">- 资源的创建时间;</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">定义了用户对Pod的期望状态。用户可以做如下操作:</span><br><span class="line">- 指定节点调度;</span><br><span class="line">- 指定调度的亲和性或反亲和性;</span><br><span class="line">- 资源的数据是否进行持久化;</span><br><span class="line">- 资源的配置文件是否需要修改;</span><br><span class="line">- 资源的容器使用具体的镜像;</span><br><span class="line">- 资源的限制</span><br><span class="line">- 资源的认证信息</span><br><span class="line">- 资源的安全信息</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">status:</span><br><span class="line">资源实际的状态，比如调度到哪个worker节点，实际分配的IP地址，运行周期，重启次数等。</span><br><span class="line">该资源一般不需要人为定义，而是有K8S集群自身维护。</span><br><span class="line"></span><br><span class="line">[root@master231 ~]# kubectl api-resources</span><br><span class="line">查看所有资源</span><br></pre></td></tr></table></figure><h2 id="pod资源及资源清单">pod资源及资源清单</h2><p><strong>1.POD资源</strong></p><p><strong>kubernetes资源对象操作</strong></p><table><thead><tr><th>资源对象</th><th>增</th><th>删</th><th>改</th><th>查</th></tr></thead><tbody><tr><td>node</td><td></td><td>kubectl delete node</td><td></td><td>kubectl get nodes</td></tr><tr><td>namespace</td><td>kubectl create ns [资源名]</td><td>kubectl delete ns [资源名]</td><td>kubectl edit ns [资源名]</td><td>kubectl get ns</td></tr><tr><td>pod</td><td></td><td>kubectl delete pod [资源名]</td><td>kubectl edit pod[资源名]</td><td>kubectl get pod</td></tr></tbody></table><p><strong>查看集群节点状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">master   Ready    master   4d13h   v1.19.3</span><br><span class="line">node01   Ready    &lt;none&gt;   4d13h   v1.19.3</span><br><span class="line">node02   Ready    &lt;none&gt;   4d13h   v1.19.3</span><br><span class="line">node03   Ready    &lt;none&gt;   4d13h   v1.19.3</span><br></pre></td></tr></table></figure><p><strong>查看名称空间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   4d13h</span><br><span class="line">kube-flannel      Active   4d12h</span><br><span class="line">kube-node-lease   Active   4d13h</span><br><span class="line">kube-public       Active   4d13h</span><br><span class="line">kube-system       Active   4d13h</span><br><span class="line">luay              Active   4h17m</span><br></pre></td></tr></table></figure><p><strong>查看pod  (默认default名称空间)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-565785f75c-tpjmj   1/1     Running   0          6h8m</span><br><span class="line">nginx-pod                1/1     Running   0          5h43m</span><br></pre></td></tr></table></figure><p><strong>查看pod  (指定名称空间)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get pods -n luay</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">busybox-pod   2/2     Running   0          3m30s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master ~]# kubectl get pod -n luay -o wide</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     IP         NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">busybox-pod   2/2     Running   0          4m14s   10.2.2.6   node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">-n 指定命名空间</span><br><span class="line">-o 指定输出方式</span><br><span class="line">json：输出json格式</span><br><span class="line">yaml：输出yaml格式</span><br><span class="line">wide：输出详细信息</span><br></pre></td></tr></table></figure><p><strong>2.pod的资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# vim nginx.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    name: nginx-containers</span><br><span class="line"></span><br><span class="line">`注释`</span><br><span class="line">apiVersion: v1       <span class="comment"># K8S资源接口</span></span><br><span class="line">kind: Pod            <span class="comment"># 资源类型</span></span><br><span class="line">metadata:            <span class="comment">#资源的元数据</span></span><br><span class="line">  name: nginx-pod    <span class="comment"># POD名字</span></span><br><span class="line">  namespace: default <span class="comment"># 指定资源启动在哪个名称空间，默认default</span></span><br><span class="line">spec:                <span class="comment">#容器相关信息</span></span><br><span class="line">  containers:        <span class="comment">#容器信息</span></span><br><span class="line">  - image: nginx:alpine           <span class="comment">#指定容器镜像</span></span><br><span class="line">    imagePullPolicy: IfNotPresent <span class="comment">#指定镜像拉取规则</span></span><br><span class="line">    name: nginx-containers        <span class="comment">#容器名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Always：总是拉取镜像，不管当前机器上是否有该镜像都拉取 nginx:latest</span><br><span class="line">Never：从不拉取镜像，需要提前docker pull</span><br><span class="line">IfNotPresent：如果镜像不存在，则拉取</span><br></pre></td></tr></table></figure><h2 id="资源清单的增，删，查">资源清单的增，删，查</h2><p><strong>1.编写资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# <span class="built_in">cat</span> single-pods.yaml </span><br><span class="line">apiVersion: v1  <span class="comment"># 指定资源的api版本信息</span></span><br><span class="line">kind: Pod       <span class="comment"># 指定资源的类型</span></span><br><span class="line">metadata:       <span class="comment"># 指定Pod的元数据信息</span></span><br><span class="line">  name: xiuxian <span class="comment"># 指的Pod的名称</span></span><br><span class="line">spec:           <span class="comment"># 定义期望资源</span></span><br><span class="line">  containers:   <span class="comment"># 定义容器资源</span></span><br><span class="line">  - name: c1    <span class="comment"># 容器的名称</span></span><br><span class="line">    image: registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/apps:v1  <span class="comment"># 容器的镜像</span></span><br></pre></td></tr></table></figure><p><strong>2.创建资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl create -f single-pods.yaml </span><br><span class="line">pod/xiuxian created</span><br></pre></td></tr></table></figure><p><strong>3.查看资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl get pods</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE</span><br><span class="line">xiuxian   1/1     Running   0          54s</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# kubectl get pods -o wide</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE   IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">xiuxian   1/1     Running   0          86s   10.100.2.4   worker233   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# curl 10.0.100.2.4</span><br><span class="line">curl: (6) Could not resolve host: 10.0.100.2.4</span><br><span class="line">[root@master231:1 pods]# curl 10.100.2.4</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;title&gt;yinzhengjie apps v1&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">       div img &#123;</span><br><span class="line">          width: 900px;</span><br><span class="line">          height: 600px;</span><br><span class="line">          margin: 0;</span><br><span class="line">       &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1 style=<span class="string">&quot;color: green&quot;</span>&gt;凡人修仙传 v1 &lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;img src=<span class="string">&quot;1.jpg&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>4.删除资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl delete -f single-pods.yaml </span><br><span class="line">pod <span class="string">&quot;xiuxian&quot;</span> deleted</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# kubectl get pods -o wide</span><br><span class="line">No resources found <span class="keyword">in</span> default namespace.</span><br><span class="line">[root@master231:1 pods]# </span><br></pre></td></tr></table></figure><p><strong>5.使用apply命令创建或者修改资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一次执行则是创建</span></span><br><span class="line">[root@master231:1 pods]# kubectl apply -f single-pods.yaml </span><br><span class="line">pod/xiuxian created</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# kubectl get pods -o wide</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE   IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">xiuxian   1/1     Running   0          23s   10.100.2.5   worker233   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment">#再次执行则是修改资源，若没有修改资源清单则提示unchanged</span></span><br><span class="line">[root@master231:1 pods]# kubectl apply -f single-pods.yaml </span><br><span class="line">pod/xiuxian unchanged</span><br></pre></td></tr></table></figure><h2 id="响应式·基于标签管理POD资源">响应式·基于标签管理POD资源</h2><p><strong>1.查看资源的标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">xiuxian   1/1     Running   0          5m54s   &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>2.给资源打标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl label pod xiuxian name=wanglin level=huashen</span><br><span class="line">pod/xiuxian labeled</span><br><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">xiuxian   1/1     Running   0          9m17s   level=huashen,name=wanglin</span><br></pre></td></tr></table></figure><p><strong>3.将资源移除标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl label pod xiuxian name-</span><br><span class="line">pod/xiuxian unlabeled</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">xiuxian   1/1     Running   0          10m   level=huashen</span><br></pre></td></tr></table></figure><p>**4.修改标签 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">xiuxian   1/1     Running   0          10m   level=huashen</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# kubectl label pod xiuxian level=jindan --overwrite</span><br><span class="line">pod/xiuxian labeled</span><br><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">xiuxian   1/1     Running   0          12m   level=jindan</span><br><span class="line"></span><br><span class="line">`--overwrite`不加上则报错level的值已存在</span><br></pre></td></tr></table></figure><p><strong>5.为所有Pod资源打标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl label pods --all app=xiuxian</span><br><span class="line">pod/xiuxian labeled</span><br><span class="line">pod/xiuxian-v1 labeled</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE    LABELS</span><br><span class="line">xiuxian      1/1     Running   0          20m    app=xiuxian,level=jindan</span><br><span class="line">xiuxian-v1   1/1     Running   0          101s   app=xiuxian</span><br></pre></td></tr></table></figure><p><strong>基于标签过滤资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">xiuxian      1/1     Running   0          25m     app=xiuxian,level=jindan</span><br><span class="line">xiuxian-v1   1/1     Running   0          6m41s   app=xiuxian,name=wanglin</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤key里含有name的标签</span></span><br><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels -l name</span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">xiuxian-v1   1/1     Running   0          6m21s   app=xiuxian,name=wanglin</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤level=jindan的标签</span></span><br><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels -l level=jindan</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">xiuxian   1/1     Running   0          26m   app=xiuxian,level=jindan</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤level不等于jindan的标签</span></span><br><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels -l  level!=jindan</span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">xiuxian-v1   1/1     Running   0          8m54s   app=xiuxian,name=wanglin</span><br></pre></td></tr></table></figure><p><strong>7.基于标签删除资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">xiuxian      1/1     Running   0          30m   app=xiuxian,level=jindan</span><br><span class="line">xiuxian-v1   1/1     Running   0          11m   app=xiuxian,name=wanglin</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# kubectl delete pods -l name</span><br><span class="line">pod <span class="string">&quot;xiuxian-v1&quot;</span> deleted</span><br><span class="line"></span><br><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">xiuxian   1/1     Running   0          31m   app=xiuxian,level=jindan</span><br></pre></td></tr></table></figure><h2 id="声明式·修改资源标签">声明式·修改资源标签</h2><p><strong>1.修改资源清单</strong>    记得修改后要应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# <span class="built_in">cat</span> single-pods.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: xiuxian</span><br><span class="line">  <span class="comment"># 为资源打标签</span></span><br><span class="line">  labels:</span><br><span class="line">    name: wanglin</span><br><span class="line">    level: jindan</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/apps:v1</span><br><span class="line"></span><br><span class="line"><span class="comment">#资源清单修改后要应用一下</span></span><br><span class="line">[root@master231:1 pods]# kubectl apply -f single-pods.yaml </span><br><span class="line">pod/xiuxian created</span><br></pre></td></tr></table></figure><p><strong>2.查看资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# kubectl get pods --show-labels</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">xiuxian   1/1     Running   0          76s   level=jindan,name=wanglin</span><br></pre></td></tr></table></figure><blockquote><p>修改标签和删除标签直接在资源清单里修改即可，修改后应用一下</p></blockquote><h2 id="响应式和声明式的区别">响应式和声明式的区别</h2><p><strong>1.相同点</strong></p><p>​    都可以管理资源</p><p><strong>2.不同点</strong></p><ul><li>响应式修改后立即生效，但是资源被重新创建后又得重新执行相关命令;</li><li>声明式修改需要先修改资源清单，在使用apply命令更新应用配置;</li></ul><h2 id="连接容器">连接容器</h2><p><strong>1.连接指定pod执行命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it 资源名 <span class="built_in">command</span></span><br><span class="line">[root@master231:0 kubernetes]# kubectl <span class="built_in">exec</span> -it mysql80 -- mysql</span><br><span class="line">···</span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure><p><strong>2.连接同一个Pod的不同容器执行命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 pods]# kubectl <span class="built_in">exec</span> -it multiple-wordpress -c db -- <span class="built_in">ls</span> / -l</span><br><span class="line"></span><br><span class="line">温馨提示:</span><br><span class="line">1.kubectl <span class="built_in">exec</span>和docker <span class="built_in">exec</span>都是在容器中执行命令;</span><br><span class="line">2.如果一个Pod有多个容器，则可以使用-c连接到指定的容器执行相应的命令;</span><br><span class="line">3.如果一个Pod有多个容器，若不使用-c连接到指定容器执行命令，则默认连接到第一个容器;</span><br></pre></td></tr></table></figure><h2 id="案例">案例</h2><h3 id="基于pod部署mysql数据库">基于pod部署mysql数据库</h3><p><strong>1.编写资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 pods]# <span class="built_in">cat</span> single-pods-mysql.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql80</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">spec:</span><br><span class="line">   <span class="comment"># 指定调度到哪个节点，该节点必须在etcd数据库中有记录</span></span><br><span class="line">  nodeName: worker233</span><br><span class="line">  containers:</span><br><span class="line">  - name: mysqld</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">      <span class="comment"># 指定变量的名称,允许密码为空</span></span><br><span class="line">    - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">      <span class="comment"># 指定变量的值</span></span><br><span class="line">      value: <span class="string">&quot;yes&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: wordpress</span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: wp_usre</span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br></pre></td></tr></table></figure><p><strong>2.运行msyql实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:0 kubernetes]# kubectl apply -f single-pods-mysql.yaml </span><br><span class="line">pod/mysql80 created</span><br></pre></td></tr></table></figure><p><strong>3.查看pod信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:0 kubernetes]# kubectl get pod -o wide</span><br><span class="line">NAME      READY   STATUS             RESTARTS   AGE   IP            NODE     </span><br><span class="line">mysql80   0/1     ImagePullBackOff   0          83s   10.100.2.12   worker233</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建节点worker233   ip 10.100.2.12</span></span><br></pre></td></tr></table></figure><h3 id="基于一个pod部署wordpress">基于一个pod部署wordpress</h3><p><strong>1.编写资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# <span class="built_in">cat</span> wordpress.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-pod</span><br><span class="line">spec:</span><br><span class="line"> <span class="comment"># 使用宿主机网络名称空间</span></span><br><span class="line">  hostNetwork: <span class="literal">true</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: db</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;yes&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: wp</span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: wp_usre</span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  - name: wp</span><br><span class="line">    image: wordpress:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: WORDPRESS_DB_HOST</span><br><span class="line">      value: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_NAME</span><br><span class="line">      value: wp</span><br><span class="line">    - name: WORDPRESS_DB_USER</span><br><span class="line">      value: wp_usre</span><br><span class="line">    - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">      value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">`保证宿主机80端口不被占用`</span><br></pre></td></tr></table></figure><p><strong>2.根据资源清单创建pod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# kubectl apply -f wordpress.yaml </span><br></pre></td></tr></table></figure><p><strong>3.查看pod信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# kubectl get pod  -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-565785f75c-tpjmj   1/1     Running   0          8h    10.2.2.2     node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-pod                1/1     Running   0          8h    10.2.2.3     node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">wordpress-pod            2/2     Running   0          26m   10.0.0.203   node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">#pod创建节点ip为10.0.0.203</span><br><span class="line">浏览器访问：100.0.203</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">什么是资源清单，又该如何使用？</summary>
    
    
    
    
    <category term="k8s" scheme="https://lukme.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s集群部署</title>
    <link href="https://lukme.top/posts/a90d3645.html"/>
    <id>https://lukme.top/posts/a90d3645.html</id>
    <published>2024-12-02T13:35:13.000Z</published>
    <updated>2025-01-21T13:36:54.943Z</updated>
    
    <content type="html"><![CDATA[<h2 style="text-align:center">Kubernetes部署</h2><blockquote><p>说明：</p><p>​k8s系列部署使用都是基于Ubuntu系统的，如果你也想使用Ubuntu系统和我保持一致，请参考<a href="https://lukme.top/posts/91269589.html">《Ubuntu最小化安装》</a></p></blockquote><p><strong>==这里是基于kubeadm来部署k8==</strong></p><table><thead><tr><th>主机名</th><th>WanIP</th><th>配置</th></tr></thead><tbody><tr><td>master231</td><td>10.0.0.231</td><td>2c 4G 50G</td></tr><tr><td>worker232</td><td>10.0.0.232</td><td>2c 3G 50G</td></tr><tr><td>worker233</td><td>10.0.0.233</td><td>2c 3G 50G</td></tr></tbody></table><h2 id="部署K8S集群准备">部署K8S集群准备</h2><p><strong>1.关闭swap分区</strong></p><blockquote><p>Swap是交换分区，如果机器内存不够，会使用swap分区，但是swap分区的性能较低，k8s设计的时候为了能提升性能，默认是不允许使用交换分区的。Kubeadm初始化的时候会检测swap是否关闭，如果没关闭，那就初始化失败。如果不想要关闭交换分区，安装k8s的时候可以指定–ignore-preflight-errors=Swap来解决</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 ~]# swapoff -a &amp;&amp; sysctl -w vm.swappiness=0  <span class="comment"># 临时关闭</span></span><br><span class="line">[root@master231:1 ~]# sed -ri <span class="string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> /etc/fstab  <span class="comment"># 基于配置文件关闭</span></span><br></pre></td></tr></table></figure><p><strong>2.查看swap分区是否关闭</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 ~]# free -h</span><br><span class="line">               total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.8Gi       855Mi       1.4Gi       2.0Mi       1.5Gi       2.7Gi</span><br><span class="line">Swap:             0B          0B          0B</span><br><span class="line"><span class="comment">#swap 都是0B</span></span><br></pre></td></tr></table></figure><p><strong>3.确保各个节点MAC地址或product_uuid唯一</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 ~]# ifconfig  eth0  | grep ether | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line">00:0c:29:97:ce:c7</span><br><span class="line">[root@worker232:1 ~]# ifconfig  eth0  | grep ether | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line">00:0c:29:31:90:93</span><br><span class="line">[root@worker233:0 ~]# ifconfig  eth0  | grep ether | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line">00:0c:29:1a:94:53</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master231:1 ~]# <span class="built_in">cat</span> /sys/class/dmi/id/product_uuid </span><br><span class="line">64ea4d56-6c14-ca1e-54e6-489f5597cec7</span><br><span class="line">[root@worker232:1 ~]# <span class="built_in">cat</span> /sys/class/dmi/id/product_uuid </span><br><span class="line">a8bc4d56-161c-5efa-1edf-ce270e319093</span><br><span class="line">[root@worker233:0 ~]# <span class="built_in">cat</span> /sys/class/dmi/id/product_uuid </span><br><span class="line">21fe4d56-5f21-35aa-b83c-9f5b501a9453</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般来讲，硬件设备会拥有唯一的地址，但是有些虚拟机的地址可能会重复。Kubernetes使用这些值来唯一确定集群中的节点。 如果这些值在每个节点上不唯一，可能会导致安装失败。</span></span><br></pre></td></tr></table></figure><p><strong>4 检查网络节点是否互通</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 ~]# ping sina.com -c 10 </span><br></pre></td></tr></table></figure><p><strong>5 允许iptable检查桥接流量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 ~]#  sysctl --system</span><br></pre></td></tr></table></figure><p><strong>6 检查端口是否被占用</strong></p><table><thead><tr><th>协议</th><th>方向</th><th>端口范围</th><th>目的</th><th>使用者</th></tr></thead><tbody><tr><td>TCP</td><td>入站</td><td>6443</td><td>Kubernetes API 服务器</td><td>所有</td></tr><tr><td>TCP</td><td>入站</td><td>2379-2380</td><td>etcd 服务器客户端 API</td><td>kube-apiserver、etcd</td></tr><tr><td>TCP</td><td>入站</td><td>10250</td><td>kubelet API</td><td>自身、控制面</td></tr><tr><td>TCP</td><td>入站</td><td>10259</td><td>kube-scheduler</td><td>自身</td></tr><tr><td>TCP</td><td>入站</td><td>10257</td><td>kube-controller-manager</td><td>自身</td></tr></tbody></table><table><thead><tr><th>协议</th><th>方向</th><th>端口范围</th><th>目的</th><th>使用者</th></tr></thead><tbody><tr><td>TCP</td><td>入站</td><td>10250</td><td>kubelet API</td><td>自身、控制面</td></tr><tr><td>TCP</td><td>入站</td><td>10256</td><td>kube-proxy</td><td>自身、负载均衡器</td></tr><tr><td>TCP</td><td>入站</td><td>30000-32767</td><td>NodePort Services†</td><td>所有</td></tr></tbody></table><p>参考链接: <a href="https://kubernetes.io/zh-cn/docs/reference/networking/ports-and-protocols/">https://kubernetes.io/zh-cn/docs/reference/networking/ports-and-protocols/</a></p><p>检查master节点和worker节点的各组件端口是否被占用。</p><p><strong>所有节点修改cgroup的管理进程为systemd</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">温馨提示:</span><br><span class="line">在CentOS操作系统中，如果不修改cgroup的管理驱动为systemd，则默认值为cgroupfs，在初始化master节点时会失败</span><br><span class="line"></span><br><span class="line">下面的案例是CentOS操作的实例，Ubuntu可以跳过此步骤。</span><br><span class="line">[root@master231 ~]# docker info  | grep cgroup</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line">[root@master231 ~]# </span><br><span class="line">[root@master231 ~]# <span class="built_in">cat</span> /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://tuv7rqqq.mirror.aliyuncs.com&quot;</span>,<span class="string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span>,<span class="string">&quot;https://hub-mirror.c.163.com/&quot;</span>,<span class="string">&quot;https://reg-mirror.qiniu.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@master231 ~]# systemctl restart docker</span><br><span class="line">[root@master231 ~]# docker info | grep <span class="string">&quot;Cgroup Driver&quot;</span></span><br><span class="line"> Cgroup Driver: systemd</span><br><span class="line">[root@master231 ~]# </span><br></pre></td></tr></table></figure><p><strong>7.安装docker环境(所有节点)</strong></p><blockquote><p>一键安装docker脚本，获取请关注公众号《原来开源》，私信回复  docker-install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">安装执行：./install-docker.sh i</span><br><span class="line">卸载执行：./install-docker.sh r</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.更新软件包索引：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.允许APT使用HTTPS：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.添加Docker官方GPG密钥：</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.添加Docker的稳定版本仓库：</span></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.再次更新软件包索引：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.安装Docker CE（社区版）：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.验证Docker是否安装成功并运行：</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.或者使用简单的命令检查Docker版本：</span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line"><span class="comment">#温馨提示  以上步骤会安装最新版本的Docker。如果需要安装特定版本的Docker，可以列出可用版本并选择安装：</span></span><br><span class="line">apt-cache madison docker-cesudo apt-get install docker-ce=&lt;VERSION_STRING&gt;</span><br><span class="line"><span class="comment">#替换&lt;VERSION_STRING&gt;为你需要的版本号。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.配置docker镜像加速</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">    &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">    &quot;https://docker.1panel.live&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://dockercf.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker-cf.registry.cyou&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.chenby.cn&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.m.daocloud.io&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.m.daocloud.io&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.重启docker</span></span><br><span class="line">[root@worker231 ~]# systemctl daemon-reload</span><br><span class="line">[root@worker231 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker</span></span><br><span class="line">[root@master231:1 ~]# docker --version</span><br><span class="line">Docker version 20.10.24, build 297e128</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# docker info  | grep <span class="string">&quot;Cgroup Driver:&quot;</span></span><br><span class="line"> Cgroup Driver: systemd</span><br><span class="line"></span><br><span class="line">[root@worker232 ~]# docker info  | grep <span class="string">&quot;Cgroup Driver:&quot;</span></span><br><span class="line"> Cgroup Driver: systemd</span><br><span class="line"></span><br><span class="line">[root@worker233 ~]# docker info  | grep <span class="string">&quot;Cgroup Driver:&quot;</span></span><br><span class="line"> Cgroup Driver: systemd</span><br></pre></td></tr></table></figure><p><strong>8.所有节点安装kubeadm，kubelet，kubectl</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">你需要在每台机器上安装以下的软件包：</span><br><span class="line">kubeadm：</span><br><span class="line">用来初始化K8S集群的工具。</span><br><span class="line">kubelet：</span><br><span class="line">在集群中的每个节点上用来启动Pod和容器等。</span><br><span class="line">kubectl：</span><br><span class="line">用来与K8S集群通信的命令行工具。</span><br><span class="line"></span><br><span class="line">kubeadm不能帮你安装或者管理kubelet或kubectl，所以你需要确保它们与通过kubeadm安装的控制平面(master)的版本相匹配。 如果不这样做，则存在发生版本偏差的风险，可能会导致一些预料之外的错误和问题。 </span><br><span class="line">然而，控制平面与kubelet间的相差一个次要版本不一致是支持的，但kubelet的版本不可以超过<span class="string">&quot;API SERVER&quot;</span>的版本。 例如，1.7.0版本的kubelet可以完全兼容1.8.0版本的<span class="string">&quot;API SERVER&quot;</span>，反之则不可以。</span><br></pre></td></tr></table></figure><p><strong>8.1 K8S所有节点配置软件源</strong></p><pre><code>apt-get update &amp;&amp; apt-get install -y apt-transport-httpscurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.listdeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOF[root@master231:1 ~]#  apt-get update</code></pre><p><strong>8.2 查看一下当前环境支持的k8s版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# apt-cache madison kubeadm</span><br><span class="line">   kubeadm |  1.28.2-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span><br><span class="line">   kubeadm |  1.28.1-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span><br><span class="line">   kubeadm |  1.28.0-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span><br><span class="line">   ...</span><br><span class="line">   kubeadm | 1.23.17-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span><br><span class="line">   kubeadm | 1.23.16-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span><br><span class="line">   kubeadm | 1.23.15-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span><br><span class="line">   kubeadm | 1.23.14-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span><br></pre></td></tr></table></figure><p><strong>8.3 安装 kubelet kubeadm kubectl</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install kubelet=1.23.17-00 kubeadm=1.23.17-00 kubectl=1.23.17-00</span><br></pre></td></tr></table></figure><p><strong>8.4检查各组件版本 是否统一</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master232:1 ~]# kubeadm version</span><br><span class="line">kubeadm version: &amp;version.Info&#123;Major:<span class="string">&quot;1&quot;</span>, Minor:<span class="string">&quot;23&quot;</span>, GitVersion:<span class="string">&quot;v1.23.17&quot;</span>, GitCommit:<span class="string">&quot;953be8927218ec8067e1af2641e540238ffd7576&quot;</span>, GitTreeState:<span class="string">&quot;clean&quot;</span>, BuildDate:<span class="string">&quot;2023-02-22T13:33:14Z&quot;</span>, GoVersion:<span class="string">&quot;go1.19.6&quot;</span>, Compiler:<span class="string">&quot;gc&quot;</span>, Platform:<span class="string">&quot;linux/amd64&quot;</span>&#125;</span><br><span class="line">[root@master231:1 ~]# </span><br><span class="line"></span><br><span class="line">[root@worker232:1 ~]# kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:<span class="string">&quot;1&quot;</span>, Minor:<span class="string">&quot;23&quot;</span>, GitVersion:<span class="string">&quot;v1.23.17&quot;</span>, GitCommit:<span class="string">&quot;953be8927218ec8067e1af2641e540238ffd7576&quot;</span>, GitTreeState:<span class="string">&quot;clean&quot;</span>, BuildDate:<span class="string">&quot;2023-02-22T13:34:27Z&quot;</span>, GoVersion:<span class="string">&quot;go1.19.6&quot;</span>, Compiler:<span class="string">&quot;gc&quot;</span>, Platform:<span class="string">&quot;linux/amd64&quot;</span>&#125;</span><br><span class="line">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br><span class="line"></span><br><span class="line">[root@worker232:1 ~]# kubelet --version</span><br><span class="line">Kubernetes v1.23.17</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他两个节点都要检查下，避免你安装的版本不一致！</span></span><br><span class="line">参考链接:</span><br><span class="line">https://kubernetes.io/zh/docs/tasks/tools/install-kubectl-linux/</span><br></pre></td></tr></table></figure><p><strong>9.检查时区  一定要一致</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# <span class="built_in">date</span> -R</span><br><span class="line">Mon, 09 Sep 2024 14:58:34 +0800</span><br><span class="line">[root@master231 ~]# ll /etc/localtime </span><br><span class="line">lrwxrwxrwx 1 root root 33 Aug 30 15:27 /etc/localtime -&gt; /usr/share/zoneinfo/Asia/Shanghai</span><br><span class="line"></span><br><span class="line">[root@worker232 ~]# <span class="built_in">date</span> -R</span><br><span class="line">Mon, 09 Sep 2024 14:59:22 +0800</span><br><span class="line">[root@worker232 ~]# ll /etc/localtime </span><br><span class="line">lrwxrwxrwx 1 root root 33 Aug 30 15:27 /etc/localtime -&gt; /usr/share/zoneinfo/Asia/Shanghai</span><br><span class="line"></span><br><span class="line">[root@worker233 ~]# <span class="built_in">date</span> -R</span><br><span class="line">Mon, 09 Sep 2024 14:59:35 +0800</span><br><span class="line">[root@worker233 ~]# ll /etc/localtime </span><br><span class="line">lrwxrwxrwx 1 root root 33 Aug 30 15:27 /etc/localtime -&gt; /usr/share/zoneinfo/Asia/Shanghai</span><br></pre></td></tr></table></figure><p><strong>9.1修改时区</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# <span class="built_in">ln</span> -svf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  </span><br><span class="line"></span><br><span class="line">[root@worker233 ~]# <span class="built_in">ln</span> -svf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><br><span class="line"></span><br><span class="line">[root@worker232 ~]# <span class="built_in">ln</span> -svf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><br></pre></td></tr></table></figure><h2 id="初始化K8S的master组件">初始化K8S的master组件</h2><p><strong>1 使用kubeadm初始化master节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# kubeadm init \</span><br><span class="line">--kubernetes-version=v1.23.17 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--pod-network-cidr=10.100.0.0/16 \</span><br><span class="line">--service-cidr=10.200.0.0/16  \</span><br><span class="line">--service-dns-domain=k8s-service</span><br><span class="line"></span><br><span class="line">温馨提示：</span><br><span class="line">相关参数说明在下面</span><br><span class="line">...</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  </span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> 10.0.0.231:6443 --token 8lutg1.3i6jcp7vgd7gpldl \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:e4a5061043bba6e271c502eb6e3fe80bb3555c8f00e42649e08f3939eacdb459 </span><br><span class="line">[root@master231 ~]# </span><br></pre></td></tr></table></figure><blockquote><p>注意：你的token跟我不一致，请保存好token，默认保留24小时，因此24小时内你的集群必须启动起来！</p></blockquote><p><strong>master初始化不成功解决问题的方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">可能存在的原因：</span><br><span class="line"> - 由于没有禁用swap分区导致无法完成初始化;</span><br><span class="line">   - 每个2core以上的CPU导致无法完成初始化;</span><br><span class="line">   - 没有手动导入镜像;</span><br><span class="line">解决方案:</span><br><span class="line">  - 1.检查上面的是否有上面的情况</span><br><span class="line">   free -h </span><br><span class="line">   lscpu</span><br><span class="line">   </span><br><span class="line">  - 2.重置当前节点环境</span><br><span class="line">[root@master231 ~]# kubeadm reset -f</span><br><span class="line">  - 3.再次尝试初始化master节点 </span><br></pre></td></tr></table></figure><p><strong>相关参数说明:</strong>:dango:</p><pre><code>--kubernetes-version:指定K8S master组件的版本号。--image-repository:指定下载k8s master组件的镜像仓库地址。--pod-network-cidr:指定Pod的网段地址。--service-cidr:指定SVC的网段--service-dns-domain:指定service的域名。若不指定，默认为&quot;cluster.local&quot;。</code></pre><p><strong>使用kubeadm初始化集群时，可能会出现如下的输出信息:</strong></p><pre><code>[init] 使用初始化的K8S版本。[preflight] 主要是做安装K8S集群的前置工作，比如下载镜像，这个时间取决于你的网速。[certs] 生成证书文件，默认存储在&quot;/etc/kubernetes/pki&quot;目录哟。[kubeconfig]生成K8S集群的默认配置文件，默认存储在&quot;/etc/kubernetes&quot;目录哟。[kubelet-start] 启动kubelet，环境变量默认写入:&quot;/var/lib/kubelet/kubeadm-flags.env&quot;配置文件默认写入:&quot;/var/lib/kubelet/config.yaml&quot;[control-plane]使用静态的目录，默认的资源清单存放在:&quot;/etc/kubernetes/manifests&quot;。此过程会创建静态Pod，包括&quot;kube-apiserver&quot;，&quot;kube-controller-manager&quot;和&quot;kube-scheduler&quot;[etcd] 创建etcd的静态Pod，默认的资源清单存放在:&quot;&quot;/etc/kubernetes/manifests&quot;[wait-control-plane] 等待kubelet从资源清单目录&quot;/etc/kubernetes/manifests&quot;启动静态Pod。[apiclient]等待所有的master组件正常运行。[upload-config] 创建名为&quot;kubeadm-config&quot;的ConfigMap在&quot;kube-system&quot;名称空间中。[kubelet] 创建名为&quot;kubelet-config-1.22&quot;的ConfigMap在&quot;kube-system&quot;名称空间中，其中包含集群中kubelet的配置[upload-certs] 跳过此节点，详情请参考”--upload-certs&quot;[mark-control-plane]标记控制面板，包括打标签和污点，目的是为了标记master节点。[bootstrap-token] 创建token口令，例如:&quot;kbkgsa.fc97518diw8bdqid&quot;。如下图所示，这个口令将来在加入集群节点时很有用，而且对于RBAC控制也很有用处哟。[kubelet-finalize] 更新kubelet的证书文件信息[addons] 添加附加组件，例如:&quot;CoreDNS&quot;和&quot;kube-proxy”</code></pre><p><strong>2 拷贝授权文件，用于管理K8S集群  初始化时候有这些命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">[root@master231 ~]# <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">[root@master231 ~]# <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p><strong>3 查看集群节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 ~]# kubectl get cs</span><br><span class="line">Warning: v1 ComponentStatus is deprecated <span class="keyword">in</span> v1.19+</span><br><span class="line">NAME                 STATUS    MESSAGE                         ERROR</span><br><span class="line">controller-manager   Healthy   ok                              </span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>,<span class="string">&quot;reason&quot;</span>:<span class="string">&quot;&quot;</span>&#125;   </span><br><span class="line">scheduler            Healthy   ok                              </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master231 ~]# kubectl get nodes</span><br><span class="line">NAME        STATUS     ROLES                  AGE    VERSION</span><br><span class="line">master231   NotReady   control-plane,master   117s   v1.23.17</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署worker组件">部署worker组件</h2><p><strong>1.在worker节点执行加入的命令 ！！！使用自己初始化获得的命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@worker232 ~]# kubeadm <span class="built_in">join</span> 10.0.0.231:6443 --token 8lutg1.3i6jcp7vgd7gpldl \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:e4a5061043bba6e271c502eb6e3fe80bb3555c8f00e42649e08f3939eacdb459 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.master节点检查集群的worker节点列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# kubectl get nodes</span><br><span class="line">NAME        STATUS     ROLES                  AGE   VERSION</span><br><span class="line">master231   NotReady   control-plane,master   32m   v1.23.17</span><br><span class="line">worker232   NotReady   &lt;none&gt;                 36s   v1.23.17</span><br><span class="line">worker233   NotReady   &lt;none&gt;                 25s   v1.23.17</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示:<br>此时K8S组件就算部署成功了，但是将来容器的网络依旧没有准备就绪，因此各节点处于“NotReady”状态。</p></blockquote><h2 id="部署flannel的CNI插件">部署flannel的CNI插件</h2><p>符合的CNI插件列表选择:<br><a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/">https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/</a></p><p>falnnel的网站:<br><a href="https://github.com/flannel-io/flannel#deploying-flannel-manually">https://github.com/flannel-io/flannel#deploying-flannel-manually</a></p><p><strong>1.所有节点下载Flannel组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master231:1 ~]#  wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#没有魔法比较慢</span></span><br></pre></td></tr></table></figure><p><strong>2.修改Pod的网段即可。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将10.244.0.0/16改为10.100.0.0/16  详情见falnnel官方</span></span><br><span class="line">...</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.100.0.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;EnableNFTables&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>3.安装Flannel组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# kubectl apply -f kube-flannel.yml </span><br><span class="line">namespace/kube-flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.apps/kube-flannel-ds created</span><br></pre></td></tr></table></figure><p><strong>4.检查falnnel各组件是否安装成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# kubectl get pod -o wide -n kube-flannel</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE   IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">kube-flannel-ds-7mchd   1/1     Running   0          20s   10.0.0.232   worker232   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-ccwl7   1/1     Running   0          20s   10.0.0.231   master231   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-wzzq9   1/1     Running   0          20s   10.0.0.233   worker233   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">`在初始化容器，不可能马上就是running状态，等待一会查看`</span><br></pre></td></tr></table></figure><p><strong>5.测试各节点组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# kubectl get nodes</span><br><span class="line">NAME        STATUS   ROLES                  AGE   VERSION</span><br><span class="line">master231   Ready    control-plane,master   58m   v1.23.17</span><br><span class="line">worker232   Ready    &lt;none&gt;                 26m   v1.23.17</span><br><span class="line">worker233   Ready    &lt;none&gt;                 25m   v1.23.17</span><br></pre></td></tr></table></figure><p><strong>6.检查flannel.1网卡是否存在</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master231 ~]# ifconfig </span><br><span class="line">cni0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.100.0.1  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        inet6 fe80::7498:efff:fe86:d4bc  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 3a:28:99:ca:1f:85  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2  bytes 164 (164.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">...</span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.100.0.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        inet6 fe80::d88c:e5ff:fe0f:b4ba  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether da:8c:e5:0f:b4:ba  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 33 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master232 ~]# ifconfig </span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.100.1.1  netmask 255.255.255.0  broadcast 10.100.1.255</span><br><span class="line">        inet6 fe80::3828:99ff:feca:1f85  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 3a:28:99:ca:1f:85  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 30  bytes 4343 (4.3 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">...</span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.100.1.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        inet6 fe80::4846:2dff:fe52:2307  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 4a:46:2d:52:23:07  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master233 ~]# ifconfig </span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.100.2.1  netmask 255.255.255.0  broadcast 10.100.2.255</span><br><span class="line">        inet6 fe80::3828:99ff:feca:1f85  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 3a:28:99:ca:1f:85  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 514  bytes 43908 (43.9 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 534  bytes 68678 (68.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">...</span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.100.2.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        inet6 fe80::17:21ff:fe24:c641  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 02:17:21:24:c6:41  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 32 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p><strong>7.fannel网卡cni0网卡缺失</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1问题描述</span><br><span class="line">部分节点不存在cni0网络设备，仅有flannel.1设备，此时我们需要手动创建cni0网桥设备，但是注意网段要一致。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">手动创建cni0网卡</span><br><span class="line">---&gt; 假设 master231的flannel.1是10.100.0.0网段。</span><br><span class="line">ip <span class="built_in">link</span> add cni0 <span class="built_in">type</span> bridge</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev cni0 up</span><br><span class="line">ip addr add 10.100.0.1/24 dev cni0</span><br><span class="line"></span><br><span class="line">---&gt; 假设 worker232的flannel.1是10.100.1.0网段。</span><br><span class="line">ip <span class="built_in">link</span> add cni0 <span class="built_in">type</span> bridge</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev cni0 up</span><br><span class="line">ip addr add 10.100.2.1/24 dev cni0</span><br></pre></td></tr></table></figure><h2 id="验证Pod的CNI网络是否正常">验证Pod的CNI网络是否正常</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.编写Pod资源清单</span></span><br><span class="line">[root@master231 ~]# <span class="built_in">cat</span> &gt; network-cni-test.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Pod</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: xiuxian-v1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  nodeName: worker232</span></span><br><span class="line"><span class="string">  containers:</span></span><br><span class="line"><span class="string">  - image: registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/apps:v1 </span></span><br><span class="line"><span class="string">    name: xiuxian</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Pod</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: xiuxian-v2</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  nodeName: worker233</span></span><br><span class="line"><span class="string">  containers:</span></span><br><span class="line"><span class="string">  - image: registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/apps:v2</span></span><br><span class="line"><span class="string">    name: xiuxian</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建Pod资源</span></span><br><span class="line">[root@master231 ~]# kubectl apply -f network-cni-test.yaml</span><br><span class="line">pod/xiuxian-v1 created</span><br><span class="line">pod/xiuxian-v2 created</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.查看Pod资源你列表</span></span><br><span class="line">[root@master231 ~]# kubectl get pods -o wide</span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE   IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">xiuxian-v1   1/1     Running   0          11s   10.100.1.2   worker232   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">xiuxian-v2   1/1     Running   0          11s   10.100.2.4   worker233   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">4.访问worker232节点的服务</span><br><span class="line">[root@master231 ~]# curl 10.100.1.2 </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;title&gt;yinzhengjie apps v1&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">       div img &#123;</span><br><span class="line">          width: 900px;</span><br><span class="line">          height: 600px;</span><br><span class="line">          margin: 0;</span><br><span class="line">       &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1 style=<span class="string">&quot;color: green&quot;</span>&gt;凡人修仙传 v1 &lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;img src=<span class="string">&quot;1.jpg&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@master231 ~]# </span><br><span class="line">[root@master231 ~]# curl  10.100.2.4</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;title&gt;yinzhengjie apps v2&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">       div img &#123;</span><br><span class="line">          width: 900px;</span><br><span class="line">          height: 600px;</span><br><span class="line">          margin: 0;</span><br><span class="line">       &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1 style=<span class="string">&quot;color: red&quot;</span>&gt;凡人修仙传 v2 &lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;img src=<span class="string">&quot;2.jpg&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="kubectl自动补全">kubectl自动补全</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bash-completion</span><br><span class="line">如果您的系统中没有启用 bash-completion，您可以尝试以下命令来启用它：</span><br><span class="line">echo &quot;if [ -f /etc/bash_completion ]; then . /etc/bash_completion; fi&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">[root@master231 ~]# kubectl completion bash &gt; ~/.kube/completion.bash.inc</span><br><span class="line">[root@master231 ~]# echo source &#x27;$HOME/.kube/completion.bash.inc&#x27; &gt;&gt; ~/.bashrc </span><br><span class="line">[root@master231 ~]# source ~/.bashrc </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">基于kubeadm部署k8s集群</summary>
    
    
    
    
    <category term="k8s" scheme="https://lukme.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s概述</title>
    <link href="https://lukme.top/posts/c470e553.html"/>
    <id>https://lukme.top/posts/c470e553.html</id>
    <published>2024-12-01T02:33:13.000Z</published>
    <updated>2025-01-21T13:36:54.938Z</updated>
    
    <content type="html"><![CDATA[<h2 style="text-align:center">Kubernetes介绍</h2><ul><li>Kubernetes和docker的简史精简版<ul><li>2013年docker开源，IT界的福音，备受关注</li><li>2014.06 Google有15年的容器编排Borg(博格，商业产品)使用经验，并将K8S(基于borg系统使用go语言研发)底层基于docker作为容器运行时开源</li><li>2014.12 docker inc公司推出了K8S竞品，docker swarm</li><li>Google kubernets vs docker inc swarm 【3年对抗赛】 2017年年底结束，k8s完胜。（k8s 72% vs swarm %13）<ul><li>2014 coreOS 公司推出了rkt容器管理工具并站队K8S</li><li>2015 Google公司将K8S开源并贡献给了CNCF组织，成为该组织的第一个毕业项目。</li><li>2015 docker inc公司推出了OCI提议，主要针对容器运行时和镜像规范，并开源了runc。</li><li>2016 Google推出了CRI规范，目前市面上没有任何产品可以满足，于是就开源了docker-shim组件（会调用docker接口并满足cri规范）支持CRI接口;</li><li>2016，RedHat公司基于cri-o（既符合CRI也符合OCI规范）开发框架让rkt容器管理工具支持CRI接口;</li><li>2017，docker inc公司将containerd从docker engine剥离，并将containerd开源给了CNCF组织，<ul><li>containerd底层调用runc，因此该产品是支持OCI提议的;</li><li>containerd组件本身不支持CRI，因此社区大佬们（包含国内外）集体开发cri-containerd组件，最后合并到containerd项目</li></ul></li></ul></li><li>2018 年国内开始流程K8S，各大云厂商已经开始大规模使用K8S集群，<ul><li>阿里云的ACK的SAAS产品</li><li>腾讯云的TKE的SAAS产品</li><li>华为云的CCE的SAAS产品</li><li>ucloud的UK8S的SAAS产品</li><li>亚马逊的Amazon EKS的SAAS产品</li><li>京东云，百度云等</li></ul></li><li>2018年，coreOS公司被Redhat以2.5亿美元收购。</li><li>2018年10月29日，IBM宣布以340亿美元的价格收购Red Hat。<ul><li>曾经一度，Docker方面的炒作非常猛。</li><li>Docker从Greylock Partners、Insight Partners和红杉资本等大牌投资者处筹资超过2.7亿美元，</li><li>2018年估值达到最高峰：13.2亿美元。</li></ul></li><li>2019年2，Docker一分为二，将企业业务出售给了云咨询公司Mirantis（对于OpenStack代码贡献量非常大，能排到前3）。</li><li>2020年，Google宣布K8S将在1.22+版本后弃用docker容器运行时，当时年底发布的最新版是1.20.X;</li><li>2020年3月11日公布的，当时Docker宣布被云计算软件巨头微软（Microsoft）以 6.7亿美元收购。</li><li>2021年底 K8S 1.23的RC版本发布;</li><li>2022年初，K8S 1.24横空出世，直接将docker-shim组件移除，而是使用containerd作为容器运行时;</li><li>2023年初，K8S 1.27.X发布;</li><li>2023年3月，K8S 1.23.17 发布了最后一个支持docker-shim的版本。<ul><li>docker和Mirantis公司作为合作伙伴，将维护该项目，运维小伙伴如果需要在K8S 1.24及以后的版本使用docker的话，需要单独cri-docker组件。</li></ul></li><li>2024年初，K8S 1.30.x版本发布</li></ul></li></ul><p>官方文档:<br><a href="https://kubernetes.io/zh-cn/">https://kubernetes.io/zh-cn/</a></p><h2 id="为什么要使用K8S">为什么要使用K8S</h2><pre><code>- 1.它将组成应用程序的容器组合成逻辑单元，以便于管理和服务发现。Kubernetes 源自Google 15 年生产环境的运维经验，同时凝聚了社区的最佳创意和实践。- 2.Google 每周运行数十亿个容器，Kubernetes 基于与之相同的原则来设计，能够在不扩张运维团队的情况下进行规模扩展。- 3.无论是本地测试，还是跨国公司，Kubernetes 的灵活性都能让你在应对复杂系统时得心应手。- 4.Kubernetes是开源系统，可以自由地部署在企业内部，私有云、混合云或公有云，让您轻松地做出合适的选择。</code></pre><h2 id="kubernetes组件">kubernetes组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.master 节点</span><br><span class="line">etcd：              整个集群的核心，负责存储K8S请求数据所有的数据。保存了整个集群的状态</span><br><span class="line">Controller manager：负责维护集群的状态，比如故障检测、自动扩展、滚动更新等</span><br><span class="line">Scheduler：         负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上;</span><br><span class="line">API Server：        提供了资源操作的唯一入口，无论是客户端还是内部组件都必须通过它来访问</span><br><span class="line">2.node节点</span><br><span class="line">kubelet：           负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理;</span><br><span class="line">kube-proxy：        负责为Service提供cluster内部的服务发现和负载均衡；</span><br><span class="line">pod：               是K8S中最小可部署的计算单元，可包含一个或多个容器，这些容器共享网络和存储等资源。</span><br><span class="line">Container Runtime   容器运行时，负责运行容器，如Docker、containerd、CRI-O等。</span><br></pre></td></tr></table></figure><p><strong>1.Scheduler:</strong><br>kube-scheduler根据调度算法为新创建的Pod选择一个Node节点，可以任意部署，可以部署在同一个节点上，也可以部署在不同的节点上。</p><p><strong>2.Controller Manager:</strong><br>Kube-controller-manager，处理集群中常规后台任务，一个资源对应一个控制器，而ControllerManager就是负责管理这些控制器的。</p><p><strong>3.Cloud Controller Manager:</strong><br>用在云平台上的Kube-controller-manager组件。如果我们直接在物理机上部署的话，可以不使用该组件。</p><p><strong>4.API Server:</strong><br>kube-apiserver，集群的统一入口，各组件协调者，以RESTFUL API提供接口服务，所有对象资源的增删改查和监听操作都交给APIServer处理后再提交给etcd存储。</p><p><strong>5.Etcd:</strong><br>分布式键值存储系统，用于保存集群状态元数据信息，比如Pod，Service等对象信息。这个数据库是可以单独拿出来部署，只需要API server可以连接到该分布式数据库集群即可。</p><p><strong>6.kubelet:</strong><br>可以理解为Master在工作节点上的Agent，管理本机运行容器的生命周期，比如创建容器，Pod挂载数据卷，下载secret，获取容器的节点状态等工作。kubelet将每一个Pod转换成一组容器。</p><p><strong>7.kube-proxy:</strong><br>在工作节点上实现Pod网络代理，维护网络规则和四层负载均衡工作。换句话说，就是用于负责Pod网络路由，用于对外提供访问的实现。可以找到你关心的项目所在的pod节点。</p><p><strong>8.POD:</strong><br>用户划分容器的最小单位，一个POD可以存在多个容器。</p><p>docker/rocket(rkt，已停止支持):<br>容器引擎，用于运行容器。</p><p>参考链接:<br><a href="https://kubernetes.io/zh/docs/concepts/overview/components/">https://kubernetes.io/zh/docs/concepts/overview/components/</a></p><h2 id="kubernetes三种网络">kubernetes三种网络</h2><p>Kubernetes的三种网段说明</p><ul><li><p>K8S各组件通信的网络<br>使用时物理网卡，默认网段: 10.0.0.0/24。</p></li><li><p>跨节点容器实现通信的网段:<br>用户可以自定义，学习环境推荐: 10.100.0.0/16。</p><p>但是在自定义网段时，要考虑将来能够分片的IP地址数量，&quot;10.100.0.0/16&quot;最多有65536个IP地址。</p><p>如果将来容器运行的数量超过该规模时，应该考虑将网段地址调大，比如&quot;10.0.0.0/8&quot;。</p></li><li><p>Service网段：<br>为容器提供负载均衡和服务发现功能。也是需要一个独立的网段，比如&quot;10.200.0.0/16&quot;最多有65536个IP地址。</p><p>同理，如果规模较大时，应该考虑网段分配的问题。</p></li></ul><h2 id="kubernetes的部署方式">kubernetes的部署方式</h2><blockquote><p>1.kubeadm部署      简单，适合新手</p><p>2.二进制部署          繁琐，但是可以自定义配置信息</p><p>==这里使用kubeadm部署==</p></blockquote><p><strong>二进制部署和kubeadm部署的区别？</strong></p><ul><li><p>K8S常见的部署方式对比及CNCF项目：</p><ul><li><p>官方提供</p><ul><li><p>二进制部署K8S集群<br>手动部署K8S各个组件，配置文件，启动脚本及证书生成，kubeconfig文件。<br>对新手不友好，尤其是证书管理。对K8S玩熟练的小伙伴需要2小时起步。</p></li><li><p>kubeadm部署K8S集群<br>是官方提供的一种快速部署K8S各组件的搭建，如果镜像准备就绪的情况下，基于容器的方式部署，新手估计就1-2分钟部署完成。</p><p>需要提前安装kubelet，docker或者containerd，kubeadm组件。</p></li></ul></li><li><p>第三方提供的部署方式：<br>国内公司:<br>- 青云科技： kubesphere<br>底层基于kubeadm快速部署K8S，提供了丰富的图形化管理界面。<br>- kuboard<br>底层基于kubeadm快速部署K8S，提供了丰富的图形化管理界面。<br>- kubeasz<br>底层基于二进制方式部署，结合ansible的playbook实现的快速部署管理K8S集群。</p><p>国外的产品:<br>- rancher:<br>和国内的kubesphere很相似，也是K8S发行商，提供了丰富的图形化管理界面。<br>还基于K8S研发出来了K3S，号称轻量级的K8S。</p><p>云厂商：<br>- 阿里云： ACK<br>- 腾讯云： TKE<br>- 华为云： CCE<br>- 京东云： Kubernetes<br>- …</p><p>其他部署方式:</p><ul><li>minikube:<br>适合在windows部署K8S，适合开发环境搭建的使用。不建议生产环境部署。</li><li>kind:<br>可以部署多套K8S环境，轻量级的命令行管理工具。、</li><li>yum:<br>不推荐，版本支持较低，默认是1.5.2。</li></ul></li></ul></li></ul><p>​CNCF技术蓝图：<a href="https://landscape.cncf.io/">https://landscape.cncf.io/</a></p><p>:dango:<strong>K8S的集群配置环境准备</strong></p><p>推荐阅读:<br><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></p><ul><li>本机示例环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">环境准备:</span><br><span class="line">硬件配置: 2core 4GB</span><br><span class="line">磁盘: 50GB+</span><br><span class="line">操作系统: Ubuntu 22.04.04 LTS</span><br><span class="line">IP和主机名:</span><br><span class="line">10.0.0.231 master231</span><br><span class="line">10.0.0.232 worker232</span><br><span class="line">10.0.0.233 worker233</span><br></pre></td></tr></table></figure><ul><li>Kubernetes的版本选择</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择的版本是K8S 1.23.17版本，该版本的第一个rc版本是2021年初，最后一个版本是23年年初结束</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">什么是k8s</summary>
    
    
    
    
    <category term="k8s" scheme="https://lukme.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu最小化安装22.04</title>
    <link href="https://lukme.top/posts/91269589.html"/>
    <id>https://lukme.top/posts/91269589.html</id>
    <published>2024-11-28T12:33:13.000Z</published>
    <updated>2025-01-21T13:08:02.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最小化安装Ubuntu-Server-22-04">最小化安装Ubuntu Server 22.04</h2><blockquote><p>声明：</p><p>​本篇图片引用了csdn作者杨小羊《最小化安装Ubuntu Server 22.04（图文详解版本）》，自己在其基础上额外归纳了一些系统优化内容，仅供学习使用，如若侵权联系删除</p></blockquote><h3 id="0-Ubuntu-Server下载">0.Ubuntu Server下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ubuntu.com/download/server</span><br></pre></td></tr></table></figure><h2 id="1、自定义安装虚拟机">1、自定义安装虚拟机</h2><p><img src="https://cos.lukme.top/Pic/Ubuntu-01.png" alt="centos ubuntulinux"></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-02.png" alt="02"></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-03.png" alt="03"></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-04.png" alt="04"></p><p><strong>这里的cpu内存等硬件自定义设置，博主比较喜欢的配置是 2核2内核2G内存，后面其他的没有提及的都默认配置</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-05.png" alt="05"></p><p><strong>这里最好使用NAT网络，方便后面远程连接</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-06.png" alt="06"></p><p><strong>完成配置后点击下面的CD，开始设置IOS路径</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-07.png" alt="07"></p><h5 id="完成后确认，开机">完成后确认，开机</h5><h2 id="2、Ubuntu-Server最小化安装">2、Ubuntu Server最小化安装</h2><p><img src="https://cos.lukme.top/Pic/Ubuntu-08.png" alt="08"></p><p><strong>选择第一个</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-09.png" alt="09"></p><p><strong>这里由于没有中文，只能选择英文</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-10.png" alt="10"></p><p><strong>选择第二个，不更新</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-11.png" alt="11"></p><p><strong>这里直接回车，默认配置</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-12.png" alt="12"></p><p><strong>按上下键，到最小化安装那，按回车，等最小化安装前面括号有一个x时候，，下键到Done，回车</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-13.png" alt="13"></p><p><img src="C:/Users/Dell/Desktop/Luay_20241203_164511.png" alt="Luay_20241203_164511"></p><p><strong>这里上下键，选择静态ip，设置ens33和ens34，ip和网关根据你的实际修改</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-14.png" alt="14"></p><p><strong>Configure proxy配置页面的Proxy address无需配置，直接回车</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-15.png" alt="15"></p><p><strong>这里设置云源，自己输入以下阿里云的源</strong></p><p>阿里云源地址：<code>https://mirrors.aliyun.com/ubuntu</code></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-16.png" alt="16"></p><p><strong>选择安装磁盘，直接回车默认自动分配，需要手动分区的话选择 [custom storage layout]</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-17.png" alt="17"></p><p><strong>检查磁盘分区是否符合你的要求，回车继续</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-18.png" alt="18"></p><p><strong>再次确认 Continue 继续</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-19.png" alt="19"></p><p><strong>设置计算机名、用户名及密码</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-20.png" alt="20"></p><p><strong>按空格键或者回车 选择安装 OpenSSH Server 服务</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-21.png" alt="21"></p><p><strong>选择预置环境，按需选取，自由而定，不需要则直接选择Done回车继续</strong>,</p><p><img src="https://cos.lukme.top/Pic/Ubuntu-22.png" alt="22"></p><p><strong>开始安装，这个环节有点慢，需要有点耐心,下面那个小横再转就说明在安装，博主也安装了十几分钟</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-23.png" alt="23"></p><p><strong>这里可以取消更新，直接重启，我们可以后续再更新，也可以等他更新完，博主建议等他更行完</strong></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-24.png" alt="24"></p><p><strong>重启重启过程中可能有的地方会卡一下，你按一下回车就好</strong></p><h2 id="3、服务器配置">3、服务器配置</h2><h3 id="（1）设置root密码">（1）设置root密码</h3><p>重启后，开启root用户的设置，设置root用户密码：<code>sudo passwd root</code></p><p>需要先输入当前用户密码，再输入需要设置的root用户密码</p><h3 id="（2）安装需要的工具">（2）安装需要的工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y vim zip net-tools iptables</span><br><span class="line"><span class="built_in">sudo</span> apt-get install inetutils-*ping*</span><br></pre></td></tr></table></figure><h3 id="（3）设置静态ip">（3）设置静态ip</h3><p>①获取当前ip <code>ip addr</code></p><p>②编辑网络文件：<code>sudo vim /etc/netplan/00-installer-config.yaml</code></p><p><img src="https://cos.lukme.top/Pic/Ubuntu-25.png" alt="25"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># This is the network config written by &#x27;subiquity&#x27;</span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      addresses:</span><br><span class="line">        - 192.168.10.133/24</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [114.114.114.114, 8.8.8.8]</span><br><span class="line">      routes:</span><br><span class="line">        - to: default</span><br><span class="line">          via: 192.168.10.2</span><br><span class="line">  version: 21.2.3.4.5.6.7.8.9.10.11.12.</span><br></pre></td></tr></table></figure><p>③配置生效： <code>sudo netplan apply</code></p><p><strong>更新</strong></p><p>登录后复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure><h3 id="（4）root远程登录">（4）root远程登录</h3><blockquote><p>默认不支持root远程登录，如果你需要就操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.编辑ssh配置文件</span><br><span class="line">root@luay:~# vim /etc/ssh/sshd_config</span><br><span class="line">···</span><br><span class="line">PermitRootLogin .*  ==》PermitRootLogin <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">2.重启服务</span><br><span class="line">root@luay:~# systemctl restart sshd</span><br></pre></td></tr></table></figure><h2 id="4、优化">4、优化</h2><h3 id="修改网卡为eth0">修改网卡为eth0</h3><blockquote><p>修改与否看你，不强制</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/default/grub</span><br><span class="line">找到GRUB_CMDLINE_LINUX=<span class="string">&quot;&quot;</span></span><br><span class="line">改为GRUB_CMDLINE_LINUX=<span class="string">&quot;net.ifnames=0 biosdevname=0&quot;</span></span><br><span class="line">然后<span class="built_in">sudo</span> grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line"></span><br><span class="line">重启系统</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件里名字修改为eth0，eth1（如果你有第二块网卡）</span></span><br><span class="line">root@luay:~# vim /etc/netplan/00-installer-config.yaml </span><br><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:<span class="comment">#==&gt;eth0</span></span><br><span class="line">      addresses:</span><br><span class="line">      - 10.0.0.243/24</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses:</span><br><span class="line">        - 223.5.5.5</span><br><span class="line">        search:</span><br><span class="line">        - 114.114.114.114</span><br><span class="line">      routes:</span><br><span class="line">      - to: default</span><br><span class="line">        via: 10.0.0.254</span><br><span class="line">    ens34:<span class="comment">#==&gt;eth1</span></span><br><span class="line">      addresses:</span><br><span class="line">      - 172.16.1.243/24</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: []</span><br><span class="line">        search: []</span><br><span class="line">      routes:</span><br><span class="line">      - to: default</span><br><span class="line">        via: 10.0.0.254</span><br><span class="line">        </span><br><span class="line">完成上述配置后执行指令 <span class="built_in">sudo</span> netplan apply  重启网卡</span><br></pre></td></tr></table></figure><h3 id="A-start-job-is-running-for-wait-for-network">A start job is running for wait for network</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@luay ~]# vim /etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service </span><br><span class="line">···</span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># 设置超时2s</span></span><br><span class="line">TimeoutStartSec=2sec</span><br><span class="line"></span><br><span class="line">重启reboot</span><br></pre></td></tr></table></figure><h3 id="命令自动补全">命令自动补全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装bash-completion包</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install bash-completion</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用bash-completion</span></span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br></pre></td></tr></table></figure><h3 id="iptables">iptables</h3><p><strong>如果部署docker应用，需要用到iptables，否则会网络控制器初始化失败</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">× docker.service - linux Docke Engine</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: failed (Result: exit-code) since Thu 2025-01-16 03:21:02 UTC; 9s ago</span><br><span class="line">       Docs: https://docs.docker.com</span><br><span class="line">    Process: 2301 ExecStart=/usr/bin/dockerd (code=exited, status=1/FAILURE)</span><br><span class="line">   Main PID: 2301 (code=exited, status=1/FAILURE)</span><br><span class="line">        CPU: 149ms</span><br><span class="line"></span><br><span class="line">Jan 16 03:21:01 worker233 dockerd[2301]: time=<span class="string">&quot;2025-01-16T03:21:01.641966036Z&quot;</span> level=info msg=<span class="string">&quot;Loading containers: start.&quot;</span></span><br><span class="line">Jan 16 03:21:01 worker233 dockerd[2301]: time=<span class="string">&quot;2025-01-16T03:21:01.643510915Z&quot;</span> level=warning msg=<span class="string">&quot;failed to find iptables&quot;</span> error=<span class="string">&quot;exec: </span></span><br><span class="line"><span class="string">\&quot;iptables\&quot;: executable file not found in <span class="variable">$PATH</span>&quot;</span></span><br><span class="line">Jan 16 03:21:01 worker233 dockerd[2301]: time=<span class="string">&quot;2025-01-16T03:21:01.643999117Z&quot;</span> level=info msg=<span class="string">&quot;stopping event stream following graceful </span></span><br><span class="line"><span class="string">shutdown&quot;</span> error=<span class="string">&quot;context canceled&quot;</span> module=libcontainerd namespace=moby</span><br><span class="line">Jan 16 03:21:01 worker233 dockerd[2301]: time=<span class="string">&quot;2025-01-16T03:21:01.644115308Z&quot;</span> level=info msg=<span class="string">&quot;stopping healthcheck following graceful s</span></span><br><span class="line"><span class="string">hutdown&quot;</span> module=libcontainerd</span><br><span class="line">Jan 16 03:21:01 worker233 dockerd[2301]: time=<span class="string">&quot;2025-01-16T03:21:01.644136371Z&quot;</span> level=info msg=<span class="string">&quot;stopping event stream following graceful </span></span><br><span class="line"><span class="string">shutdown&quot;</span> error=<span class="string">&quot;context canceled&quot;</span> module=libcontainerd namespace=plugins.moby</span><br><span class="line">Jan 16 03:21:02 worker233 dockerd[2301]: time=<span class="string">&quot;2025-01-16T03:21:02.646850683Z&quot;</span> level=warning msg=<span class="string">&quot;grpc: addrConn.createTransport failed </span></span><br><span class="line"><span class="string">to connect to &#123;unix:///var/run/docker/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err :connection error: desc = \&quot;transport: Error while</span></span><br><span class="line"><span class="string"> dialing dial unix:///var/run/docker/containerd/containerd.sock: timeout\&quot;. Reconnecting...&quot;</span> module=grpc</span><br><span class="line">Jan 16 03:21:02 worker233 dockerd[2301]: failed to start daemon: Error initializing network controller: error obtaining controller insta</span><br><span class="line">nce: failed to create NAT chain DOCKER: Iptables not found</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install iptables</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">虚拟机最小化安装Ubuntu系统学习使用图文详解</summary>
    
    
    
    
    <category term="Ubuntu" scheme="https://lukme.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>11-Prometheus数据远端存储</title>
    <link href="https://lukme.top/posts/ee6702b0.html"/>
    <id>https://lukme.top/posts/ee6702b0.html</id>
    <published>2024-11-25T03:23:03.000Z</published>
    <updated>2024-12-05T04:38:23.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VicoriaMetrics概述">VicoriaMetrics概述</h2><p>VictoriaMetrics是一个快速、经济高效且可扩展的监控解决方案和时间序列数据库。</p><p>官网地址:<br><a href="https://victoriametrics.com/">https://victoriametrics.com/</a></p><p>官方文档:<br><a href="https://docs.victoriametrics.com/">https://docs.victoriametrics.com/</a></p><p>GitHub地址:<br><a href="https://github.com/VictoriaMetrics/VictoriaMetrics">https://github.com/VictoriaMetrics/VictoriaMetrics</a></p><p>部署文档:<br><a href="https://docs.victoriametrics.com/quick-start/">https://docs.victoriametrics.com/quick-start/</a></p><h2 id="部署victoriametrics">部署victoriametrics</h2><p><strong>1. 下载victoriametrics</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# wget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.93.16/victoria-metrics-linux-amd64-v1.93.16.tar.gz</span><br></pre></td></tr></table></figure><p>**2. 解压软件包 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# tar xf victoria-metrics-linux-amd64-v1.93.16.tar.gz  -C /usr/local/bin/</span><br></pre></td></tr></table></figure><p><strong>3 编写启动脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# <span class="built_in">cat</span> &gt; /etc/systemd/system/victoria-metrics.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Linux VictoriaMetrics Server</span></span><br><span class="line"><span class="string">Documentation=https://docs.victoriametrics.com/</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/bin/victoria-metrics-prod  \</span></span><br><span class="line"><span class="string">   -httpListenAddr=0.0.0.0:8428 \</span></span><br><span class="line"><span class="string">   -storageDataPath=/data/victoria-metrics \</span></span><br><span class="line"><span class="string">   -retentionPeriod=3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">[root@elk02 ~]# systemctl daemon-reload</span><br><span class="line">[root@elk02 ~]# systemctl <span class="built_in">enable</span> --now victoria-metrics.service</span><br><span class="line">[root@elk02 ~]# systemctl status victoria-metrics</span><br></pre></td></tr></table></figure><p><strong>4 检查端口是否存活</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# ss -ntl | grep 8428</span><br><span class="line">LISTEN 0      4096              0.0.0.0:8428       0.0.0.0:*        </span><br></pre></td></tr></table></figure><p><strong>5 查看webUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.212:8428/</span><br><span class="line">`此时点到WebUI时候搜索`<span class="string">&#x27;node_cpu_seconds_total&#x27;</span>  是没有任何数据的</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241128130653976.png" alt="image-20241128130653976"></p><h2 id="prometheus配置远端存储">prometheus配置远端存储</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line"><span class="comment"># 在顶级字段中配置VictoriaMetrics地址</span></span><br><span class="line">remote_write:</span><br><span class="line">  - url: http://10.0.0.212:8428/api/v1/write</span><br><span class="line">  </span><br><span class="line"><span class="comment">#因为之前配置的prometheus的启动脚本指定了数据存储目录，所以这里为了避免冲突，不使用systemd方式启动</span></span><br><span class="line"></span><br><span class="line">1.停止prometheus</span><br><span class="line">systemctl stop prometheus-server.service </span><br><span class="line"></span><br><span class="line">2.进入prometheus安装目录</span><br><span class="line">[root@elk02:2 ~]# <span class="built_in">cd</span> /softwares/prometheus-2.53.2.linux-amd64/</span><br><span class="line"></span><br><span class="line">3.启动prometheus，指定修改过的配置文件（如果配置没有错误，就会去连接http://10.0.0.212:8428）</span><br><span class="line">./prometheus --config.file=<span class="string">&quot;prometheus.yml&quot;</span>  </span><br><span class="line"></span><br><span class="line">4.查看WebUI</span><br><span class="line">http://10.0.0.212:8428/</span><br><span class="line">`此时点到WebUI时候搜索`<span class="string">&#x27;node_cpu_seconds_total&#x27;</span> 发现数据过来了</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241128133415223.png" alt="image-20241128133415223"></p><blockquote><p>温馨提示：</p><p>​    如果此时没有数据接入，就不要进行下面步骤了，不然就一直是错的，出数据就行</p></blockquote><p><strong>4.配置grafana的数据源及URL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择数据源还是prometheus，名字区分下，地址更换下就行了</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241128134037207.png" alt="image-20241128134037207"></p><h2 id="部署参考连接">部署参考连接</h2><p>单点部署参考链接:<br><a href="https://docs.victoriametrics.com/quick-start/#starting-vm-single-from-a-binary">https://docs.victoriametrics.com/quick-start/#starting-vm-single-from-a-binary</a></p><p>集群部署参考链接:<br><a href="https://docs.victoriametrics.com/quick-start/#starting-vm-cluster-from-binaries">https://docs.victoriametrics.com/quick-start/#starting-vm-cluster-from-binaries</a><br><a href="https://docs.victoriametrics.com/cluster-victoriametrics/#architecture-overview">https://docs.victoriametrics.com/cluster-victoriametrics/#architecture-overview</a></p><p>部署集群时软件包要下载对应的集群cluster版本:<br>wget <a href="https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.93.16/victoria-metrics-linux-amd64-v1.93.16-cluster.tar.gz">https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.93.16/victoria-metrics-linux-amd64-v1.93.16-cluster.tar.gz</a></p><p>软件包会提供3个程序，该程序对应了集群的3个组件<br>vmstorage:<br>存储原始数据，并返回给定标签过滤器在给定时间范围内的查询数据<br>vminsert:<br>接受摄入的数据，并根据对度量名称及其所有标签的一致散列在vmstorage节点之间传播<br>vmselect:<br>通过从所有配置的vmstorage节点获取所需数据来执行传入查询</p><p><strong>集群部署VictoriaMetrics架构</strong></p><p><img src="https://cos.lukme.top/Pic/VictoriaMetrics-cluster.png" alt="VictoriaMetrics集群架构图解"></p>]]></content>
    
    
    <summary type="html">了解使用 VicoriaMetrics</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>10-Prometheus的联邦模式</title>
    <link href="https://lukme.top/posts/d10c7e6f.html"/>
    <id>https://lukme.top/posts/d10c7e6f.html</id>
    <published>2024-11-24T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="联邦模式配置">联邦模式配置</h2><p><strong>1.prometheus联邦模式架构概述</strong><br>默认情况下，prometheus采集的数据会存储到本地，这意味者prometheus在这种工作模式下，可能会存在单机存储的瓶颈。为了解决prometheus对于数据的采集压力，我们可以采用联邦模式来部署prometheus。</p><blockquote><p>这里 91,92,93 节点分别对应本篇的 211,212,213 节点</p></blockquote><p><img src="https://cos.lukme.top/Pic/prometheus-federate.jpg" alt="联邦模式Prometheus server"></p><p><strong>2.部署Prometheus的集群环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">1. 212,213节点部署Prometheus</span><br><span class="line">  略，步骤见01-Prometheus介绍及部署</span><br><span class="line"></span><br><span class="line">`212节点`</span><br><span class="line">2. 212节点配置Prometheus</span><br><span class="line">[root@elk02:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">  - job_name: <span class="string">&#x27;file-sd-discovery-212&#x27;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - /softwares/prometheus-2.53.2.linux-amd64/file-sd.yaml</span><br><span class="line"></span><br><span class="line">3. 编写Prometheus的基于文件服务的发现</span><br><span class="line">[root@elk02:0 ~]# <span class="built_in">cat</span> &gt; /softwares/prometheus-2.53.2.linux-amd64/file-sd.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">- targets:</span></span><br><span class="line"><span class="string">  - 10.0.0.211:9100</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    &quot;tag&quot;: &quot;elk01&quot;</span></span><br><span class="line"><span class="string">    &quot;apps&quot;: &quot;yaml&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">4. 检查Prometheus语法</span><br><span class="line">[root@elk02:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">5.Prometheus热加载</span><br><span class="line">[root@elk02:0 ~]# curl -X POST http://10.0.0.212:9090/-/reload</span><br><span class="line"></span><br><span class="line">6.访问Prometheus的WebUI</span><br><span class="line">http://10.0.0.212:9090/targets?search=</span><br><span class="line"></span><br><span class="line">`213节点`</span><br><span class="line">1. 213 节点配置Prometheus</span><br><span class="line">[root@elk03:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">  - job_name: <span class="string">&#x27;file-sd-discovery-212&#x27;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - /softwares/prometheus-2.53.2.linux-amd64/file-sd.yaml</span><br><span class="line"></span><br><span class="line">2.编写Prometheus的基于文件服务的发现</span><br><span class="line">[root@elk03:0 ~]# <span class="built_in">cat</span> &gt; /softwares/prometheus-2.53.2.linux-amd64/file-sd.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">- targets:</span></span><br><span class="line"><span class="string">  - 10.0.0.212:9100</span></span><br><span class="line"><span class="string">  - 10.0.0.213:9100</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    &quot;tag&quot;: &quot;elk02/03&quot;</span></span><br><span class="line"><span class="string">    &quot;apps&quot;: &quot;yaml&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">3. 检查Prometheus语法</span><br><span class="line">[root@elk03:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">4.Prometheus热加载</span><br><span class="line">[root@elk03:0 ~]# curl -X POST http://10.0.0.213:9090/-/reload</span><br><span class="line"></span><br><span class="line">5.访问Prometheus的WebUI</span><br><span class="line">http://10.0.0.213:9090/targets?search=</span><br></pre></td></tr></table></figure><p><strong>3.修改211节点配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1.修改Prometheus配置文件</span><br><span class="line">[root@elk01:0 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">  - job_name: <span class="string">&quot;prometheus-federate-212&quot;</span></span><br><span class="line">    metrics_path: <span class="string">&quot;/federate&quot;</span></span><br><span class="line">    honor_labels: <span class="literal">true</span></span><br><span class="line">    params:</span><br><span class="line">       <span class="string">&quot;match[]&quot;</span>:</span><br><span class="line">       - <span class="string">&#x27;&#123;job=&quot;promethues&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">        - <span class="string">&quot;10.0.0.212:9090&quot;</span></span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&quot;prometheus-federate-213&quot;</span></span><br><span class="line">    metrics_path: <span class="string">&quot;/federate&quot;</span></span><br><span class="line">    honor_labels: <span class="literal">true</span></span><br><span class="line">    params:</span><br><span class="line">       <span class="string">&quot;match[]&quot;</span>:</span><br><span class="line">       - <span class="string">&#x27;&#123;job=&quot;promethues&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">        - <span class="string">&quot;10.0.0.213:9090&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.检查Prometheus语法</span><br><span class="line">3.Prometheus热加载</span><br></pre></td></tr></table></figure><p><strong>4.验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">213上可查询的语法（可自行访问212或者213的Prometheus的WebUI界面找到promQL语法查询放在211节点上验证）</span><br><span class="line">node_cpu_seconds_total&#123;apps=<span class="string">&quot;yaml&quot;</span>, cpu=<span class="string">&quot;0&quot;</span>, job=<span class="string">&quot;file-sd-discovery-213&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">在211上查询是否有结果</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241128112719771.png" alt="image-20241128112719771"></p>]]></content>
    
    
    <summary type="html">使用Prometheus联邦模式缓解数据采集压力</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>09-Prometheus的服务发现</title>
    <link href="https://lukme.top/posts/86e5bc5f.html"/>
    <id>https://lukme.top/posts/86e5bc5f.html</id>
    <published>2024-11-23T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务发现的常见类别说明">服务发现的常见类别说明</h2><pre><code>- 静态配置： static_configs每次修改配置后，都需要重新加载配置或者重启服务。- 动态配置每次修改后，无需重新加载配置或者重启服务。常见的动态配置:&lt;file_sd_config&gt;基于文件的服务发现。https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#file_sd_config&lt;consul_sd_config&gt;基于consul的服务发现。https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#consul_sd_config&lt;kubernetes_sd_config&gt;基于K8S实现的服务发现https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#kubernetes_sd_config&lt;dns_sd_config&gt;:基于DNS实现服务发现。https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#dns_sd_config&lt;docker_sd_config&gt;：基于docker engine的服务发现https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#docker_sd_config&lt;http_sd_config&gt;：基于http的服务发现。https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#http_sd_config</code></pre><h2 id="基于文件的服务发现">基于文件的服务发现</h2><p><strong>1.修改Prometheus的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">...</span><br><span class="line">  - job_name: <span class="string">&quot;linux-file-sd-config&quot;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">     - files:</span><br><span class="line">        -  /softwares/prometheus-2.53.2.linux-amd64/test.yaml</span><br><span class="line">        -  /softwares/prometheus-2.53.2.linux-amd64/test.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line">此时访问Prometheus的webui，发现没有显示新的服务</span><br><span class="line">http://10.0.0.211:9090/targets</span><br></pre></td></tr></table></figure><p><strong>2.编辑服务发现文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">`yaml格式：`</span><br><span class="line">[root@elk01:5 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/test.yaml</span><br><span class="line">- targets:</span><br><span class="line">    - 10.0.0.213:9100</span><br><span class="line">    - 10.0.0.211:9100</span><br><span class="line">    - 10.0.0.212:3000</span><br><span class="line">    </span><br><span class="line">`json格式`</span><br><span class="line">[root@elk01:5 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/test.json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;targets&quot;</span>: [ <span class="string">&quot;10.0.0.211:9100&quot;</span>,<span class="string">&quot;10.0.0.212:9100&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>3.测试验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件保存后直接访问webUI，即可发现就可以显示了，不需要热加载Prometheus</span><br><span class="line">http://10.0.0.211:9090/targets</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127135024922.png" alt="image-20241127135024922"></p><h2 id="基于文件发现和基于consul对比">基于文件发现和基于consul对比</h2><p>基于文件的服务发现是在Prometheus本地基于某个文件读取要监控的节点;</p><p>基于consul服务发现是需要单独部署一套consul集群，Prometheus-server去对应的consul集群获取需要监控的节点。</p><h2 id="部署基于console的服务发现">部署基于console的服务发现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1 下载consul</span><br><span class="line">wget https://releases.hashicorp.com/consul/1.19.2/consul_1.19.2_linux_amd64.zip</span><br><span class="line"></span><br><span class="line">2 解压consul</span><br><span class="line">unzip consul_1.19.2_linux_amd64.zip -d /usr/local/bin/</span><br><span class="line"></span><br><span class="line">3 运行consul 集群</span><br><span class="line">服务端211:</span><br><span class="line">consul agent -server -bootstrap -<span class="built_in">bind</span>=10.0.0.211 -data-dir=/data/consul -client=10.0.0.211 -ui</span><br><span class="line"></span><br><span class="line">客户端212:</span><br><span class="line">consul agent  -<span class="built_in">bind</span>=10.0.0.212 -data-dir=/data/consul -client=10.0.0.212 -ui -retry-join=10.0.0.211</span><br><span class="line"></span><br><span class="line">客户端213:</span><br><span class="line">consul agent -server -<span class="built_in">bind</span>=10.0.0.213 -data-dir=/data/consul -client=10.0.0.213 -ui -retry-join=10.0.0.211</span><br><span class="line"></span><br><span class="line">4 查看各节点的监听端口</span><br><span class="line">ss -ntl | grep 8500</span><br><span class="line"></span><br><span class="line">5 访问console服务的WebUI</span><br><span class="line">http://10.0.0.213:8500/ui/dc1/nodes</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127144212517.png" alt="image-20241127144212517"></p><h2 id="基于consul的服务发现应用">基于consul的服务发现应用</h2><p><strong>1 修改prometheus的配置文件并重新加载配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">  ...</span><br><span class="line">  - job_name: <span class="string">&quot;Linux-consul-seriver-discovery&quot;</span></span><br><span class="line">    <span class="comment"># 配置基于consul的服务发现</span></span><br><span class="line">    consul_sd_configs:</span><br><span class="line">        <span class="comment"># 指定consul的服务器地址，若不指定，则默认值为&quot;localhost:8500&quot;.</span></span><br><span class="line">      - server: 10.0.0.213:8500</span><br><span class="line">      - server: 10.0.0.212:8500</span><br><span class="line">      - server: 10.0.0.211:8500</span><br><span class="line">    relabel_configs:</span><br><span class="line">        <span class="comment"># 匹配consul的源标签字段，表示服务名称</span></span><br><span class="line">      - source_labels: [__meta_consul_service]</span><br><span class="line">        <span class="comment"># 指定源标签的正则表达式，若不定义，默认值为&quot;(.*)&quot;</span></span><br><span class="line">        regex: consul</span><br><span class="line">        <span class="comment"># 执行动作为删除，默认值为&quot;replace&quot;,有效值有多种</span></span><br><span class="line">        <span class="comment">#   https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_action</span></span><br><span class="line">        action: drop</span><br><span class="line">        </span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br></pre></td></tr></table></figure><p><strong>2.被监控节点注册到console集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# curl -X PUT -d <span class="string">&#x27;&#123;&quot;id&quot;:&quot;elk211&quot;,&quot;name&quot;:&quot;elk01&quot;,&quot;address&quot;:&quot;10.0.0.211&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.211:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.213:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line">[root@elk02 ~]# curl -X PUT -d <span class="string">&#x27;&#123;&quot;id&quot;:&quot;elk212&quot;,&quot;name&quot;:&quot;elk212&quot;,&quot;address&quot;:&quot;10.0.0.212&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.212:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.213:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line">[root@elk03 ~]# curl -X PUT -d <span class="string">&#x27;&#123;&quot;id&quot;:&quot;elk213&quot;,&quot;name&quot;:&quot;elk213&quot;,&quot;address&quot;:&quot;10.0.0.213&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.213:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.213:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`详解`</span><br><span class="line"><span class="string">&quot;id&quot;</span>:<span class="string">&quot;elk211&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;elk01&quot;</span>,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;10.0.0.211&quot;</span>,<span class="string">&quot;port&quot;</span>:9100 监控211节点，地址和端口</span><br><span class="line">checks<span class="string">&quot;: [&#123;&quot;</span>http<span class="string">&quot;:&quot;</span>http://10.0.0.211:9100<span class="string">&quot;,&quot;</span>interval<span class="string">&quot;:&quot;</span>5m<span class="string">&quot;&#125;]&#125;&#x27;  检查节点，和间隔时间</span></span><br><span class="line"><span class="string">http://10.0.0.213:8500/v1/agent/service/register                注册到console集群（写211,212,213都可以）</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>3.检查consul的WebUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.212:8500/ui/dc1/services</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127153448968.png" alt="image-20241127153448968"></p><p><strong>4 检查Prometheus的WebUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.211:9090/targets?search=</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127153520806.png" alt="image-20241127153520806"></p><p><strong>5.注销节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://10.0.0.213:8500/v1/agent/service/deregister/elk213</span><br><span class="line"></span><br><span class="line">elk213  `这里写的是<span class="built_in">id</span>，而不是name`</span><br></pre></td></tr></table></figure><p>注意，也可以使用POSTMAN直接进行如下操作，需要使用PUT方法。<br>PUT <a href="http://10.0.0.213:8500/v1/agent/service/deregister/elk213">http://10.0.0.213:8500/v1/agent/service/deregister/elk213</a></p><h2 id="Prometheus监控console集群">Prometheus监控console集群</h2><p>Prometheus监控consul集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.下载consul exporter</span><br><span class="line">[root@elk02:5 ~]# wget https://github.com/prometheus/consul_exporter/releases/download/v0.12.1/consul_exporter-0.12.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压软件包 </span><br><span class="line">[root@elk02:5 ~]# tar xf consul_exporter-0.12.1.linux-amd64.tar.gz  -C /usr/local/bin/ consul_exporter-0.12.1.linux-amd64/consul_exporter --strip-components=1</span><br><span class="line"></span><br><span class="line">3.启动console exporter </span><br><span class="line">[root@elk02:5 ~]# consul_exporter --consul.server=<span class="string">&quot;http://10.0.0.213:8500&quot;</span> --web.telemetry-path=<span class="string">&quot;/metrics&quot;</span> --web.listen-address=:9107 </span><br><span class="line"></span><br><span class="line">4.访问consul exporter的WebUI</span><br><span class="line">http://10.0.0.212:9107/metrics</span><br><span class="line"></span><br><span class="line">5.向consul注册(或者修改Prometheus配置文件，静态发现需要热加载Prometheus)</span><br><span class="line">[root@elk02:5 ~]# curl -X PUT -d <span class="string">&#x27;&#123;&quot;id&quot;:&quot;elk212-consul&quot;,&quot;name&quot;:&quot;consul-cluster&quot;,&quot;address&quot;:&quot;10.0.0.212&quot;,&quot;port&quot;:9107,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.212:9107&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.213:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line">6.访问consul的WebUI</span><br><span class="line">http://10.0.0.212:8500/ui/dc1/services/consul-cluster/instances</span><br><span class="line"></span><br><span class="line">7.访问prometheus的WebUI</span><br><span class="line">http://10.0.0.211:9090/targets</span><br><span class="line"></span><br><span class="line">8.grafana导入模板ID </span><br><span class="line">12049</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Prometheus的服务发现，让你不再需要热加载或者重启Prometheus</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>08-部署pushgetway和altermanager</title>
    <link href="https://lukme.top/posts/2cdee406.html"/>
    <id>https://lukme.top/posts/2cdee406.html</id>
    <published>2024-11-22T03:23:03.000Z</published>
    <updated>2024-12-05T04:36:34.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署pushgatway">部署pushgatway</h2><p>Prometheus自定义监控组件pushgateway<br>1.下载pushgateway</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]# wget https://github.com/prometheus/pushgateway/releases/download/v1.9.0/pushgateway-1.9.0.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>2.解压软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]# tar xf pushgateway-1.9.0.linux-amd64.tar.gz -C /softwares/</span><br></pre></td></tr></table></figure><p>3.运行pushgateway组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]# <span class="built_in">cd</span> /softwares/pushgateway-1.9.0.linux-amd64/</span><br><span class="line">[root@elk02:0 ~]# ./pushgateway --web.listen-address=:9091 --web.telemetry-path=<span class="string">&quot;/metrics&quot;</span> </span><br></pre></td></tr></table></figure><p>4.访问pushgetway组件的WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.212:9091</span><br></pre></td></tr></table></figure><p>5.推送测试数据到pushgateway组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk211 ~]# <span class="built_in">echo</span> <span class="string">&quot;student_online 75&quot;</span> | curl --data-binary @-  http://10.0.0.212:9091/metrics/job/student/instance/10.0.0.211</span><br></pre></td></tr></table></figure><p>6.再次访问pushgetway组件的WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.92:9091/#</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241124112052347.png" alt="image-20241124112052347"></p><p>7.修改Prometheus的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">...</span><br><span class="line">    - job_name: <span class="string">&quot;pushgateway&quot;</span></span><br><span class="line">      <span class="comment"># 用于解决标签的冲突问题，有效值为: true和false，默认值为false</span></span><br><span class="line">      <span class="comment"># 当设置为true时，将保留抓取的标签以忽略服务器自身的标签。说白了会覆盖原有标签。</span></span><br><span class="line">      <span class="comment"># 当设置为false时，则不会覆盖原有标签，而是在标点前加了一个&quot;exported_&quot;前缀。</span></span><br><span class="line">      honor_labels: <span class="literal">true</span></span><br><span class="line">      static_configs:</span><br><span class="line">        - targets: </span><br><span class="line">          - <span class="string">&quot;10.0.0.212:9091&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器访问</span></span><br><span class="line">http://10.0.0.211:9090/targets?search=</span><br></pre></td></tr></table></figure><h2 id="Alertmanager环境部署">Alertmanager环境部署</h2><p><strong>1.altermanager概述</strong><br>用于prometheus server的告警功能的组件，目前支持多种告警媒介，包括但不限于邮件告警，钉钉告警，企业微信告警等。</p><p><strong>2.部署alermanager组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.下载软件包</span><br><span class="line">[root@elk02:1 ~]# wget https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2. 解压软件包</span><br><span class="line">[root@elk02:1 ~]# tar xf alertmanager-0.27.0.linux-amd64.tar.gz  -C /softwares/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.修改alermanager的配置文件</span><br><span class="line">[root@elk02:1 ~]# vim /softwares/alertmanager-0.27.0.linux-amd64/alertmanager.yml </span><br><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  smtp_from: <span class="string">&#x27;1968554226@qq.com&#x27;</span></span><br><span class="line">  smtp_smarthost: <span class="string">&#x27;smtp.qq.com:465&#x27;</span></span><br><span class="line">  smtp_auth_username: <span class="string">&#x27;1968554226@qq.com&#x27;</span></span><br><span class="line">  smtp_auth_password: <span class="string">&#x27;xwghtaasufprewcb&#x27;</span></span><br><span class="line">  smtp_require_tls: <span class="literal">false</span></span><br><span class="line">  smtp_hello: <span class="string">&#x27;qq.com&#x27;</span></span><br><span class="line">route:</span><br><span class="line">  group_by: [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">  group_wait: 5s</span><br><span class="line">  group_interval: 5s</span><br><span class="line">  repeat_interval: 30s</span><br><span class="line">  receiver: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">  email_configs:</span><br><span class="line">  - to: <span class="string">&#x27;3078155561@qq.com&#x27;</span></span><br><span class="line">    send_resolved: <span class="literal">true</span></span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: <span class="string">&#x27;critical&#x27;</span></span><br><span class="line">    target_match:</span><br><span class="line">      severity: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    equal: [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.启动alermanager</span><br><span class="line">[root@elk02:1 ~]# <span class="built_in">cd</span> /softwares/alertmanager-0.27.0.linux-amd64/</span><br><span class="line">[root@elk02:1 alertmanager-0.27.0.linux-amd64]# ./alertmanager </span><br><span class="line"></span><br><span class="line">5.访问webui</span><br><span class="line">http://10.0.0.212:9093/#/status</span><br></pre></td></tr></table></figure><p><strong>3.修改Prometheus配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets:</span><br><span class="line">          - 10.0.0.212:9093</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line">rule_files:</span><br><span class="line">  - <span class="string">&quot;/softwares/prometheus-2.53.2.linux-amd64/status-rules.yaml&quot;</span></span><br></pre></td></tr></table></figure><p><strong>4.修改告警规则</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /softwares/prometheus-2.53.2.linux-amd64/status-rules.yaml &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">groups:</span></span><br><span class="line"><span class="string">- name: service_status</span></span><br><span class="line"><span class="string">  rules:</span></span><br><span class="line"><span class="string">  - alert: 10.0.0.213:9100节点挂掉啦</span></span><br><span class="line"><span class="string">    expr: up&#123;instance=&quot;10.0.0.213:9100&quot;&#125; == 0</span></span><br><span class="line"><span class="string">    for: 15s</span></span><br><span class="line"><span class="string">    labels:</span></span><br><span class="line"><span class="string">      service: node_exporter</span></span><br><span class="line"><span class="string">      porter: 9100</span></span><br><span class="line"><span class="string">    annotations:</span></span><br><span class="line"><span class="string">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 已停止运行超过 15s！&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>5.重新加载Prometheus配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127094655913.png" alt="image-20241127094655913"></p><p>6.验证告警</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">停止elk3的node_exporter服务</span><br><span class="line">[root@elk03:0 ~]# systemctl stop node-exporter.service </span><br><span class="line"></span><br><span class="line">问题未修复没间隔30s发一次邮件（自己可设置）</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127095054688.png" alt="image-20241127095054688"></p><p>告警邮件</p><p><img src="https://cos.lukme.top/Pic/image-20241127095509855.png" alt="image-20241127095509855"></p><h2 id="修改告警模板">修改告警模板</h2><p><strong>1. 告警模板介绍</strong><br>默认的告警信息界面有些简单，可以借助告警的模板信息，对告警信息进行丰富，需要借助于Alertmanager的模板功能来实现。</p><p>告警模板的使用流程如下:<br>- 分析关键信息<br>- 定制模板内容<br>- Alertmanager加载模板文件<br>- 告警信息使用模板内容属性</p><p>模板文件使用标准Go模板语法，并暴露一些包含时间标签和值的变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标签引用: &#123;&#123; <span class="variable">$label</span>.&lt;label_name&gt; &#125;&#125;</span><br><span class="line">指标样本值引用: &#123;&#123; <span class="variable">$value</span> &#125;&#125;</span><br></pre></td></tr></table></figure><p>为了显式效果，需要了解一些html相关技术，参考链接:<br><a href="https://www.w3school.com.cn/html/index.asp">https://www.w3school.com.cn/html/index.asp</a></p><p><strong>2.自定义模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">创建一个模板目录</span><br><span class="line">[root@elk02:0 ~]# <span class="built_in">mkdir</span> /softwares/alertmanager-0.27.0.linux-amd64/tmpl</span><br><span class="line">[root@elk02:0 tmpl]# <span class="built_in">cat</span> email.tmpl</span><br><span class="line">&#123;&#123; define <span class="string">&quot;alert.html&quot;</span> &#125;&#125;</span><br><span class="line">&lt;h1 style=<span class="string">&#x27;color: red;&#x27;</span>&gt;服务异常告警&lt;/h1&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">                &lt;th&gt;报警项&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;实例&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;报警阀值&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;开始时间&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &#123;&#123; range <span class="variable">$i</span>, <span class="variable">$alert</span> := .Alerts &#125;&#125;</span><br><span class="line">                &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; index <span class="variable">$alert</span>.Labels <span class="string">&quot;alertname&quot;</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; index <span class="variable">$alert</span>.Labels <span class="string">&quot;instance&quot;</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; index <span class="variable">$alert</span>.Annotations <span class="string">&quot;value&quot;</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; <span class="variable">$alert</span>.StartsAt &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">        &#123;&#123; end &#125;&#125;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>3.alertmanager引用自定义模板文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 temp]# vim /softwares/alertmanager-0.27.0.linux-amd64/alertmanager.yml </span><br><span class="line"><span class="comment">#加载模板</span></span><br><span class="line">templates:</span><br><span class="line">  - <span class="string">&#x27;./tmpl/*.tmpl&#x27;</span></span><br><span class="line">···</span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">  email_configs:</span><br><span class="line">  - to: <span class="string">&#x27;3078155561@qq.com&#x27;</span></span><br><span class="line">    send_resolved: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 添加此行，定制邮件的标题，对于&quot;&#123;&#123;&#125;&#125;&quot;属性用于加载其他信息，需要使用单引号括住。</span></span><br><span class="line">    headers: &#123; Subject: <span class="string">&quot;[WARN] 报警邮件&quot;</span> &#125;</span><br><span class="line">    <span class="comment"># 添加此行，调用模板显式邮件正文，对于&quot;&#123;&#125;&quot;不需要使用单引号，否则服务启动不成功。</span></span><br><span class="line">    html: <span class="string">&#x27;&#123;&#123; template &quot;alert.html&quot; . &#125;&#125;&#x27;</span></span><br><span class="line">      <span class="comment">#alter.html是模板里定义的的define，.代表的是加载</span></span><br></pre></td></tr></table></figure><p><strong>4.altermanager语法检查</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 alertmanager-0.27.0.linux-amd64]# <span class="built_in">pwd</span></span><br><span class="line">/softwares/alertmanager-0.27.0.linux-amd64</span><br><span class="line">[root@elk02:0 alertmanager-0.27.0.linux-amd64]# ./amtool check-config ./alertmanager.yml </span><br><span class="line">Checking <span class="string">&#x27;./alertmanager.yml&#x27;</span>  SUCCESS</span><br><span class="line">Found:</span><br><span class="line"> - global config</span><br><span class="line"> - route</span><br><span class="line"> - 1 inhibit rules</span><br><span class="line"> - 1 receivers</span><br><span class="line"> - 1 templates</span><br><span class="line">  SUCCESS</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#altermanager自带的语法检查</span></span><br></pre></td></tr></table></figure><p><strong>5.重新启动altermanager</strong></p><p>上面我们定制邮件内容中包含阈值的部分，而我们在规则中并没有指定，所以prometheus需要修改以下规则文件。</p><p><strong>6.修改规则文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/status-rules.yaml </span><br><span class="line">···</span><br><span class="line">    annotations:</span><br><span class="line">      summary: <span class="string">&quot;&#123;&#123; .instance &#125;&#125; 已停止运行超过 15s！&quot;</span></span><br><span class="line">      value: <span class="string">&quot;&#123;&#123; <span class="variable">$value</span> &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>7.检查Prometheus配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br></pre></td></tr></table></figure><p><strong>访问prometheus的WebUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.91:9090/rules</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127104621570.png" alt="image-20241127104621570"></p><p><strong>8.验证测试</strong></p><p>停掉exporter服务</p><p><img src="https://cos.lukme.top/Pic/image-20241127110010277.png" alt="image-20241127110010277"></p><p>依据模板可以将告警和恢复模板分开，使用不同模板通知</p><p>推荐阅读:<br><a href="https://prometheus.io/docs/alerting/latest/configuration/">https://prometheus.io/docs/alerting/latest/configuration/</a></p>]]></content>
    
    
    <summary type="html">部署监控组建pushgetway和告警组件altermanager</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>07-监控nginx和tomcat</title>
    <link href="https://lukme.top/posts/750619ba.html"/>
    <id>https://lukme.top/posts/750619ba.html</id>
    <published>2024-11-21T03:23:03.000Z</published>
    <updated>2024-12-05T04:40:27.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prometheus监控nginx">Prometheus监控nginx</h2><h3 id="1-编译安装nginx">1 编译安装nginx</h3><p>1.1 安装编译工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS：</span><br><span class="line">yum -y install git wget gcc make zlib-devel gcc-c++ libtool openssl openssl-devel</span><br><span class="line"></span><br><span class="line">Ubuntu：</span><br><span class="line">[root@elk93 ~]# apt -y install git wget gcc make zlib1g-dev build-essential libtool openssl libssl-dev</span><br></pre></td></tr></table></figure><p>1.2 克隆nginx-module-vts模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/vozlt/nginx-module-vts.git</span><br><span class="line"></span><br><span class="line">如果上述连接不好用，可以执行下面代码:</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/jasonyin2020/nginx-module-vts.git</span><br></pre></td></tr></table></figure><p>1.3 下载nginx软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 ~]# wget https://nginx.org/download/nginx-1.26.2.tar.gz</span><br></pre></td></tr></table></figure><p>1.4 解压nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 ~]# tar xf nginx-1.26.2.tar.gz </span><br><span class="line"></span><br><span class="line">[root@elk93 ~]# ll nginx-1.26.2</span><br><span class="line">total 860</span><br><span class="line">drwxr-xr-x  8  502 staff   4096 Aug 13 00:39 ./</span><br><span class="line">drwx------ 10 root root    4096 Sep  5 14:35 ../</span><br><span class="line">drwxr-xr-x  6  502 staff   4096 Sep  5 14:35 auto/</span><br><span class="line">-rw-r--r--  1  502 staff 327851 Aug 13 00:39 CHANGES</span><br><span class="line">-rw-r--r--  1  502 staff 501527 Aug 13 00:39 CHANGES.ru</span><br><span class="line">drwxr-xr-x  2  502 staff   4096 Sep  5 14:35 conf/</span><br><span class="line">-rwxr-xr-x  1  502 staff   2611 Aug 12 22:28 configure*</span><br><span class="line">drwxr-xr-x  4  502 staff   4096 Sep  5 14:35 contrib/</span><br><span class="line">drwxr-xr-x  2  502 staff   4096 Sep  5 14:35 html/</span><br><span class="line">-rw-r--r--  1  502 staff   1397 Aug 12 22:28 LICENSE</span><br><span class="line">drwxr-xr-x  2  502 staff   4096 Sep  5 14:35 man/</span><br><span class="line">-rw-r--r--  1  502 staff     49 Aug 12 22:28 README</span><br><span class="line">drwxr-xr-x  9  502 staff   4096 Aug 13 00:39 src/</span><br></pre></td></tr></table></figure><p>1.5 配置nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Centos：</span><br><span class="line"><span class="built_in">cd</span> nginx-1.22.1</span><br><span class="line">./configure --prefix=/softwares/nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--without-http_gzip_module \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--add-module=/root/nginx-module-vts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ubuntu:</span><br><span class="line">[root@elk93 ~]# <span class="built_in">cd</span> nginx-1.26.2/</span><br><span class="line">[root@elk93 nginx-1.26.2]# </span><br><span class="line">[root@elk93 nginx-1.26.2]# ./configure --prefix=/softwares/nginx --with-http_ssl_module --with-http_v2_module --with-http_realip_module --without-http_rewrite_module --with-http_stub_status_module --without-http_gzip_module  --with-file-aio --with-stream --with-stream_ssl_module --with-stream_realip_module --add-module=/root/nginx-module-vts</span><br></pre></td></tr></table></figure><p>1.6 编译并安装nginx</p><pre><code>[root@elk93 nginx-1.26.2]# make -j 2 &amp;&amp; make install</code></pre><p>1.7 修改nginx的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 nginx-1.26.2]# vim /softwares/nginx/conf/nginx.conf</span><br><span class="line">...</span><br><span class="line">http &#123;</span><br><span class="line">    vhost_traffic_status_zone;</span><br><span class="line">    upstream linux-promethues &#123;</span><br><span class="line">       server 10.0.0.31:9090;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            <span class="comment"># index  index.html index.htm;</span></span><br><span class="line">            proxy_pass http://linux-promethues;</span><br><span class="line">        &#125;</span><br><span class="line">    location /status &#123;</span><br><span class="line">        vhost_traffic_status_display;</span><br><span class="line">        vhost_traffic_status_display_format html;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.8 检查配置文件语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 nginx-1.26.2]# /softwares/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /softwares/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /softwares/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><p>1.9 启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 nginx-1.26.2]# /softwares/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>1.10 访问nginx的状态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.93/status/format/prometheus</span><br></pre></td></tr></table></figure><h3 id="2-安装nginx-vtx-exporter">2 安装nginx-vtx-exporter</h3><p>2.1 下载nginx-vtx-exporter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CentOS：</span><br><span class="line">wget https://github.com/hnlq715/nginx-vts-exporter/releases/download/v0.10.3/nginx-vts-exporter-0.10.3.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">温馨提示:</span><br><span class="line">不建议下载更高版本，因为其会提升对GLIC的版本要求，可以通过<span class="string">&quot; strings /lib64/libc.so.6 | grep GLIBC_ &quot;</span>查看默认是2.17版本，若使用较高版本则需要2.32+</span><br><span class="line"></span><br><span class="line">Ubuntu:</span><br><span class="line">wget https://github.com/sysulq/nginx-vts-exporter/releases/download/v0.10.8/nginx-vtx-exporter_0.10.8_linux_amd64.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.2 解压软件包到path路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk92 ~]# tar xf nginx-vtx-exporter_0.10.8_linux_amd64.tar.gz -C /usr/local/bin/ nginx-vtx-exporter</span><br></pre></td></tr></table></figure><p>2.3 运行nginx-vtx-exporter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk92 ~]# nginx-vtx-exporter -nginx.scrape_uri=http://10.0.0.93/status/format/json</span><br></pre></td></tr></table></figure><p>2.4 访问测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.92:9913/metrics</span><br><span class="line">http://10.0.0.93/status/format/prometheus</span><br></pre></td></tr></table></figure><h3 id="3-配置prometheus采集nginx数据">3 配置prometheus采集nginx数据</h3><p>3.1 修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@elk91 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">scrape_configs:</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&quot;nginx-exporter&quot;</span></span><br><span class="line">    metrics_path: <span class="string">&quot;/status/format/prometheus&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - <span class="string">&quot;10.0.0.93:80&quot;</span></span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&quot;nginx-vts-exporter&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - <span class="string">&quot;10.0.0.92:9913&quot;</span></span><br><span class="line">          ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line"><span class="comment">#Prometheus热加载         （前面文章都有未赘述）</span></span><br></pre></td></tr></table></figure><p>3.2 查看Prometheus的WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.91:9090/targets?</span><br></pre></td></tr></table></figure><p>3.3 导入grafana模板</p><pre><code>2949</code></pre><h2 id="prometheus监控tomcat">prometheus监控tomcat</h2><p>部署tomcat-exporter<br>1 基于Dockerfile构建tomcat-exporter<br>参考链接：<br>[root@elk93 ~]# git clone <a href="https://gitee.com/jasonyin2020/tomcat-exporter.git">https://gitee.com/jasonyin2020/tomcat-exporter.git</a></p><p>2 编译tomcat exporter镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 ~]# <span class="built_in">cd</span> tomcat-exporter/</span><br><span class="line">[root@elk93 tomcat-exporter]# ll</span><br><span class="line">total 44</span><br><span class="line">drwxr-xr-x  5 root root 4096 Sep  5 15:02 ./</span><br><span class="line">drwx------ 11 root root 4096 Sep  5 15:02 ../</span><br><span class="line">-rw-r--r--  1 root root   96 Sep  5 15:02 build.sh</span><br><span class="line">-rw-r--r--  1 root root  503 Sep  5 15:02 Dockerfile</span><br><span class="line">drwxr-xr-x  8 root root 4096 Sep  5 15:02 .git/</span><br><span class="line">drwxr-xr-x  2 root root 4096 Sep  5 15:02 libs/</span><br><span class="line">-rw-r--r--  1 root root 3407 Sep  5 15:02 metrics.war</span><br><span class="line">drwxr-xr-x  2 root root 4096 Sep  5 15:02 myapp/</span><br><span class="line">-rw-r--r--  1 root root  191 Sep  5 15:02 README.md</span><br><span class="line">-rw-r--r--  1 root root 7604 Sep  5 15:02 server.xml</span><br><span class="line">[root@elk93 tomcat-exporter]# </span><br><span class="line">[root@elk93 tomcat-exporter]# bash build.sh </span><br></pre></td></tr></table></figure><p>3.运行tomcat exporter镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 tomcat-exporter]# docker run -p 28080:8080 -d --name tomcat-server registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/tomcat9-app:v1</span><br><span class="line">81926f3514f0531a462d289a022b6dbb12c4d68f2023e9c947ad9d8766d0fb90</span><br></pre></td></tr></table></figure><p>4.访问tomcat应用</p><pre><code>http://10.0.0.93:28080/metrics/http://10.0.0.93:28080/myapp/</code></pre><p>5 配置prometheus监控tomcat应用</p><p>5.1 修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk91 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">...</span><br><span class="line">scrape_configs:</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&quot;tomcat-exporter&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: </span><br><span class="line">        - <span class="string">&quot;10.0.0.93:28080&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br></pre></td></tr></table></figure><p>5.2 查看Prometheus的WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.91:9090/targets</span><br></pre></td></tr></table></figure><p>5.3 导入grafana模板</p><pre><code>由于官方的支持并不友好，可以在GitHub自行搜索相应的tomcat监控模板。 参考链接:https://github.com/nlighten/tomcat_exporter/blob/master/dashboard/example.json</code></pre>]]></content>
    
    
    <summary type="html">带你了解使用Prometheus监控ELK集群</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>06-监控docker容器及数据库</title>
    <link href="https://lukme.top/posts/668ffa27.html"/>
    <id>https://lukme.top/posts/668ffa27.html</id>
    <published>2024-11-20T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.736Z</updated>
    
    <content type="html"><![CDATA[<h1>监控docker</h1><p><strong>环境准备</strong></p><table><thead><tr><th>主机名</th><th>WanIP</th><th>角色</th></tr></thead><tbody><tr><td>elk01</td><td>10.0.0.211</td><td>Prometheus服务端</td></tr><tr><td>elk02</td><td>10.0.0.212</td><td>作为docker的被监控端，安装docker，cadvisor</td></tr><tr><td>elk03</td><td>10.0.0.213</td><td>作为docker的被监控端，安装docker，cadvisor</td></tr></tbody></table><p>Prometheus监控docker容器环境<br>1.cadVisor<br>cadVisor是Google公司开源的一款容器监控工具，支持docker，podman容器管理工具的监控。</p><p>GitHub地址:<br><a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a></p><p><strong>两台需要机器能够翻墙，因为拉取的是谷歌容器镜像仓库</strong></p><p><strong>我有cadvisor镜像，所有直接导入就行了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@elk02:~# docker load  &lt; cadvisor-amd64-0.49.1.tar.gz </span><br><span class="line">root@elk03:~# docker load  &lt; cadvisor-amd64-0.49.1.tar.gz </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">后续考虑提供cadvisor镜像</span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">  -v /:/rootfs:ro \</span><br><span class="line">  -v /var/run:/var/run:ro \</span><br><span class="line">  -v /sys:/sys:ro \</span><br><span class="line">  -v /var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">  -v /dev/disk/:/dev/disk:ro \</span><br><span class="line">  -p 18080:8080 \</span><br><span class="line">  -d  \</span><br><span class="line">  --name=cadvisor \</span><br><span class="line">  --privileged \</span><br><span class="line">  --device=/dev/kmsg \</span><br><span class="line">  gcr.io/cadvisor/cadvisor-amd64:v0.49.1</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">可以尝使用dockerhub里的cadvisor，镜像换为google/cadvisor:latest  </span><br></pre></td></tr></table></figure><p><strong>访问测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03:1 ~]# curl -s 10.0.0.213:18080/metrics | <span class="built_in">head</span> -3</span><br><span class="line"><span class="comment"># HELP cadvisor_version_info A metric with a constant &#x27;1&#x27; value labeled by kernel version, OS version, docker version, cadvisor version &amp; cadvisor revision.</span></span><br><span class="line"><span class="comment"># TYPE cadvisor_version_info gauge</span></span><br><span class="line">cadvisor_version_info&#123;cadvisorRevision=<span class="string">&quot;6f3f25ba&quot;</span>,cadvisorVersion=<span class="string">&quot;v0.49.1&quot;</span>,dockerVersion=<span class="string">&quot;&quot;</span>,kernelVersion=<span class="string">&quot;5.15.0-124-generic&quot;</span>,osVersion=<span class="string">&quot;Alpine Linux v3.18&quot;</span>&#125; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者浏览器访问</span><br><span class="line">http://10.0.0.212:18080/containers/</span><br></pre></td></tr></table></figure><p><strong>prometheus定义要监控的docker主机</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.修改Prometheus的配置文件</span><br><span class="line">[root@elk02:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">   - job_name: <span class="string">&quot;docker&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.212:18080</span><br><span class="line">        - 10.0.0.213:18080</span><br><span class="line">        </span><br><span class="line">2.检查Prometheus语法是否有误</span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">3.重新发起请求（热加载Prometheus）</span><br><span class="line">[root@elk02 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line">4.grafana导入对应的模板Id</span><br><span class="line">315</span><br><span class="line">10619</span><br></pre></td></tr></table></figure><h1>监控数据库</h1><h2 id="监控MySQL">监控MySQL</h2><p><strong>mysql本身并不支持metrics接口，因此需要独立部署mysql-exporter来提供metrics接口。</strong></p><p><strong>这里使用docker部署MySQL，使用Prometheus监控MySQL(不再赘述docker安装部署了)</strong></p><p>GitHub地址:</p><p><a href="https://github.com/prometheus/mysqld_exporter/releases/download/v0.16.0/mysqld_exporter-0.16.0.linux-amd64.tar.gz">https://github.com/prometheus/mysqld_exporter/releases/download/v0.16.0/mysqld_exporter-0.16.0.linux-amd64.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">1.下载mysql_exporter</span><br><span class="line">[root@elk02:1 ~]# wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.16.0/mysqld_exporter-0.16.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.拉取镜像</span><br><span class="line">[root@elk02:1 ~]# docker pull mysql:8.3.0-oracle</span><br><span class="line"></span><br><span class="line">3.部署MySQL数据库 </span><br><span class="line">[root@elk02:1 ~]# docker run --name mysql-server -t \</span><br><span class="line">             -e MYSQL_DATABASE=<span class="string">&quot;linux&quot;</span> \</span><br><span class="line">             -e MYSQL_USER=<span class="string">&quot;luay&quot;</span> \</span><br><span class="line">             -e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">             -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="string">&quot;yes&quot;</span> \</span><br><span class="line">             --restart unless-stopped \</span><br><span class="line"> --network host \</span><br><span class="line">             -d mysql:8.3.0-oracle \</span><br><span class="line">             --character-set-server=utf8mb4 --collation-server=utf8mb4_bin \</span><br><span class="line">             --default-authentication-plugin=mysql_native_password</span><br><span class="line"></span><br><span class="line">4.查看运行状态</span><br><span class="line">[root@elk02:1 ~]# docker ps -l</span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS      </span><br><span class="line">a069ae1367ff   mysql:8.3.0-oracle   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   5 seconds ago   Up 4 seconds</span><br><span class="line"></span><br><span class="line">[root@elk02:1 ~]# netstat -lntup|grep 3306</span><br><span class="line">tcp6       0      0 :::3306      :::*      LISTEN      38663/mysqld       </span><br><span class="line">tcp6       0      0 :::33060     :::*      LISTEN      38663/mysqld </span><br><span class="line"></span><br><span class="line">5.解压软件包(后面步骤意思是将mysqld_exporter直接解压到/usr/local/bin/下，跳过一层目录)</span><br><span class="line">tar xf mysqld_exporter-0.15.1.linux-amd64.tar.gz -C /usr/local/bin/ mysqld_exporter-0.15.1.linux-amd64/mysqld_exporter  --strip-components=1</span><br><span class="line"></span><br><span class="line">6.创建MySQL的配置，指定默认的用户名和密码</span><br><span class="line">[root@elk02:1 ~]#  <span class="built_in">cat</span> &gt; /root/.my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[client]</span></span><br><span class="line"><span class="string">user=luay</span></span><br><span class="line"><span class="string">password=123</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">7.运行mysqld-exporter</span><br><span class="line">[root@elk02:1 ~]# mysqld_exporter --mysqld.address=<span class="string">&quot;10.0.0.212:3306&quot;</span> --web.listen-address=:9104 --config.my-cnf=<span class="string">&quot;/root/.my.cnf&quot;</span></span><br><span class="line"></span><br><span class="line">8.访问mysqld-exporter的webui</span><br><span class="line">http://10.0.0.212:9104/metrics</span><br><span class="line"></span><br><span class="line">9.修改Prometheus的配置文件</span><br><span class="line">[root@elk02:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">   - job_name: <span class="string">&quot;mysql&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.212:9104</span><br><span class="line">        </span><br><span class="line">10.检查Prometheus语法是否有误</span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">11.重新发起请求（热加载Prometheus）</span><br><span class="line">[root@elk02 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line">12.检查Prometheus的WebUI</span><br><span class="line">http://10.0.0.211:9090/targets</span><br><span class="line"></span><br><span class="line">13.grafana导入对应的模板ID</span><br><span class="line">17320</span><br><span class="line">18949</span><br><span class="line">14057</span><br></pre></td></tr></table></figure><h2 id="监控redis">监控redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.拉取镜像</span><br><span class="line">[root@elk02:1 ~]# docker pull redis:7.2.5</span><br><span class="line"></span><br><span class="line">2.下载redis_exporter</span><br><span class="line">[root@elk02:1 ~]# wget https://github.com/oliver006/redis_exporter/releases/download/v1.62.0/redis_exporter-v1.62.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">3.启动redis</span><br><span class="line">[root@elk02:1 ~]# docker run -d --name redis-sever --network host redis:7.2.5 </span><br><span class="line"></span><br><span class="line">[root@elk02:1 ~]# netstat -lntup|grep 6379</span><br><span class="line">tcp     0   0 0.0.0.0:6379     0.0.0.0:*   LISTEN      39212/redis-server</span><br><span class="line">tcp6    0   0 :::6379          :::*        LISTEN      39212/redis-server</span><br><span class="line"></span><br><span class="line">4.解压软件包 </span><br><span class="line">[root@elk02:1 ~]# tar xf redis_exporter-v1.62.0.linux-amd64.tar.gz -C /usr/local/bin/ redis_exporter-v1.62.0.linux-amd64/redis_exporter --strip-components=1</span><br><span class="line"></span><br><span class="line">5.启动redis-exporter</span><br><span class="line">[root@elk92 ~]# redis_exporter -redis.addr redis://10.0.0.212:6379 -web.telemetry-path /metrics -web.listen-address :9121</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看redis_exporter帮助</span></span><br><span class="line">[root@elk02:1 ~]# redis_exporter -h</span><br><span class="line"></span><br><span class="line">5.浏览器访问</span><br><span class="line">10.0.0.212:9121/metrics</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241123135827708.png" alt="image-20241123135827708"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.进入redis数据库</span><br><span class="line">[root@elk02:2 ~]# docker <span class="built_in">exec</span> -it redis-sever redis-cli --raw -n 1</span><br><span class="line">127.0.0.1:6379[1]&gt; </span><br><span class="line"></span><br><span class="line">2.写入数据</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> name zhangsan </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get name</span><br><span class="line">zhangsan</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get age</span><br><span class="line">18</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">127.0.0.1:6379[1]&gt; </span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241123140117078.png" alt="image-20241123140117078"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.修改Prometheus的配置文件</span><br><span class="line">[root@elk02:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">   - job_name: <span class="string">&quot;redis&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.212:9121</span><br><span class="line">        </span><br><span class="line">10.检查Prometheus语法是否有误</span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">11.重新发起请求（热加载Prometheus）</span><br><span class="line">[root@elk02 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line">12.检查Prometheus的WebUI</span><br><span class="line">http://10.0.0.211:9021/targets</span><br><span class="line"></span><br><span class="line">13.grafana导入对应的模板ID</span><br><span class="line">763</span><br><span class="line">14091</span><br><span class="line">14615</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Prometheus监控docker容器及docker起的数据库</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>05-监控CPU</title>
    <link href="https://lukme.top/posts/2471ba3e.html"/>
    <id>https://lukme.top/posts/2471ba3e.html</id>
    <published>2024-11-19T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.736Z</updated>
    
    <content type="html"><![CDATA[<p><strong>监控CPU的使用情况案例</strong><br>1 统计各个节点CPU的使用率<br>1.1 我们需要先找到CPU相关的KEY</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_cpu_seconds_total</span><br></pre></td></tr></table></figure><p>1.2 过滤出CPU的空闲时间({mode=‘idle’})和全部CPU的时间(‘{}’)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_cpu_seconds_total&#123;<span class="attribute">mode</span>=<span class="string">&#x27;idle&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>过滤CPU的空闲时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_cpu_seconds_total&#123;&#125;</span><br><span class="line">此处的<span class="string">&#x27;&#123;&#125;&#x27;</span>可以不写，因为里面没有任何参数，代表获取CPU的所有状态时间。</span><br></pre></td></tr></table></figure><p>1.3 统计1分钟内CPU的增量时间</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">increase</span><span class="params">(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;[<span class="number">1</span>m])</span></span></span><br></pre></td></tr></table></figure><p>统计1分钟内CPU空闲状态的增量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">increase(node_cpu_seconds_total[1m])</span><br></pre></td></tr></table></figure><p>统计1分钟内CPU所有状态的增量。</p><p>1.4 将结果进行加和统计</p><p>将1分钟内所有CPU空闲时间的增量进行加和计算。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sum</span><span class="params">(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;[<span class="number">1</span>m])</span></span>)</span><br></pre></td></tr></table></figure><p>将1分钟内所有CPU空闲时间的增量进行加和计算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total[1m]))</span><br></pre></td></tr></table></figure><p>1.5 按照不同节点进行分组</p><p>将1分钟内所有CPU空闲时间的增量进行加和计算，并按照机器实例进行分组。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>&#123;mode=&#x27;idle&#x27;&#125;[<span class="number">1</span>m])) by (<span class="name">instance</span>)</span><br></pre></td></tr></table></figure><p>将1分钟内所有CPU空闲时间的增量进行加和计算，并按照机器实例进行分组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)</span><br></pre></td></tr></table></figure><p>1.6 计算1分钟内CPU空闲时间的百分比</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>&#123;mode=&#x27;idle&#x27;&#125;[<span class="number">1</span>m])) by (<span class="name">instance</span>) / sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>[<span class="number">1</span>m])) by (<span class="name">instance</span>)</span><br></pre></td></tr></table></figure><p>1.7 统计1小时内CPU的使用率，计算公式: (1 - CPU空闲时间的百分比) * 100%。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> - sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>&#123;mode=&#x27;idle&#x27;&#125;[<span class="number">1</span>h])) by (<span class="name">instance</span>) / sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>[<span class="number">1</span>h])) by (<span class="name">instance</span>)) * <span class="number">100</span></span><br></pre></td></tr></table></figure><p>1.8 统计1分钟内CPU的使用率，计算公式: (1 - CPU空闲时间的百分比) * 100%。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1 - <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)) * 100</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241123101647287.png" alt="image-20241123101647287"></p><p>2 计算CPU用户态的1分钟内百分比</p><pre><code>sum(increase(node_cpu_seconds_total&#123;mode='user'&#125;[1m])) by (instance) / sum(increase(node_cpu_seconds_total[1m])) by (instance) * 100</code></pre><p>3 计算CPU内核态的1分钟内百分比</p><pre><code>(sum(increase(node_cpu_seconds_total&#123;mode='system'&#125;[1m])) by (instance) / sum(increase(node_cpu_seconds_total[1m])) by (instance)) * 100</code></pre><p>4 计算CPU IO等待时间的1分钟内百分比</p><pre><code>(sum(increase(node_cpu_seconds_total&#123;mode='iowait'&#125;[1m])) by (instance) / sum(increase(node_cpu_seconds_total[1m])) by (instance)) * 100</code></pre><p><strong>以此添加以上2,3,4语法效果如下</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123101831485.png" alt="image-20241123101831485"></p><p><strong>保存dashboard</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123102158402.png" alt="image-20241123102158402"></p><p><strong>如何实现类似这样选择效果？</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123102014754.png" alt="image-20241123102014754"></p><h2 id="grafana的变量定义">grafana的变量定义</h2><p><img src="https://cos.lukme.top/Pic/image-20241123102621980.png" alt="image-20241123102621980"></p><p><img src="https://cos.lukme.top/Pic/image-20241123103440922.png" alt="image-20241123103440922"></p><p><strong>应用保存后再次查看这个dashboard</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123103551574.png" alt="image-20241123103551574"></p><p>==不过此时我们点击是没有效果的，因为我们之前写的promQL是直接写死的没有使用变量==</p><p><strong>替换如下变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;iowait&#x27;</span>,instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance)) * 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(1 - <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>,instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance)) * 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;system&#x27;</span>,instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance)) * 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;user&#x27;</span>,instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) * 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241123104039207.png" alt="image-20241123104039207"></p><p><strong>再次回到dashboard验证点击是否有变化（只验证了一个）</strong></p><p>==很明显变化了==</p><p><img src="D:/PixPin/History/recording.gif" alt="recording"></p><h2 id="自定义变量类型">自定义变量类型</h2><p><img src="https://cos.lukme.top/Pic/image-20241123105342511.png" alt="image-20241123105342511"></p><h2 id="dashboard备份">dashboard备份</h2><p><strong>点击到模板的设置，选择json model</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123111303063.png" alt="image-20241123111303063"></p>]]></content>
    
    
    <summary type="html">使用Prometheus监控CPU并出图展示</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>04-监控ELK系列</title>
    <link href="https://lukme.top/posts/750619ba.html"/>
    <id>https://lukme.top/posts/750619ba.html</id>
    <published>2024-11-18T03:23:03.000Z</published>
    <updated>2024-12-05T04:38:04.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监控zookeeper集群">监控zookeeper集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.修改zookeeper配置文件</span></span><br><span class="line">[root@elk03:2 ~]# vim /app/zookeeper/conf/zoo.cfg </span><br><span class="line">···</span><br><span class="line">metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span><br><span class="line">metricsProvider.httpHost=0.0.0.0</span><br><span class="line">metricsProvider.httpPort=7000</span><br><span class="line">metricsProvider.exportJvmInfo=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.同步到其他节点</span></span><br><span class="line">[root@elk01 ~]# scp /app/zookeeper/conf/zoo.cfg root@10.0.0.212:/app/zookeeper/conf/</span><br><span class="line">[root@elk01 ~]# scp /app/zookeeper/conf/zoo.cfg root@10.0.0.213:/app/zookeeper/conf/</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.重启zookeeper集群</span></span><br><span class="line">[root@elk01 ~]# zkServer.sh restart</span><br><span class="line">[root@elk02 ~]# zkServer.sh restart</span><br><span class="line">[root@elk03 ~]# zkServer.sh restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.测试访问zookeeper的监听端口是否正常</span></span><br><span class="line">[root@elk03 ~]# curl -s 10.0.0.211:7000/metrics | <span class="built_in">head</span> -3</span><br><span class="line"><span class="comment"># HELP approximate_data_size approximate_data_size</span></span><br><span class="line"><span class="comment"># TYPE approximate_data_size gauge</span></span><br><span class="line">approximate_data_size 15794.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.Prometheus配置zookeeper </span></span><br><span class="line">[root@elk03:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">   - job_name: <span class="string">&quot;zookeeper&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.211:7000</span><br><span class="line">        - 10.0.0.212:7000</span><br><span class="line">        - 10.0.0.213:7000</span><br><span class="line">        </span><br><span class="line"><span class="comment">#6.检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#7.重新发起请求（热加载Prometheus）</span></span><br><span class="line">[root@elk211 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#8. 浏览器刷新访问,在target里即可看到被监控端</span></span><br><span class="line">10.0.0.211:9090/targets</span><br><span class="line"></span><br><span class="line"><span class="comment">#grafana导入模板ID</span></span><br><span class="line">10465</span><br></pre></td></tr></table></figure><h2 id="监控kafka集群">监控kafka集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#官方  https://prometheus.io/docs/instrumenting/exporters/  搜索kafka exporter</span></span><br><span class="line"></span><br><span class="line">1.下载kafka exporter </span><br><span class="line">wget https://github.com/danielqsj/kafka_exporter/releases/download/v1.8.0/kafka_exporter-1.8.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压kafka exporter软件包 并做软连接</span><br><span class="line">[root@elk01:3 ~]# tar xf kafka_exporter-1.8.0.linux-amd64.tar.gz -C /app/</span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">ln</span> -s  /app/kafka_exporter-1.8.0.linux-amd64/ /app/kafka-exporter</span><br><span class="line"></span><br><span class="line">3.运行kafka exporter程序暴露kafka集群的指标提供http接口，以供Prometheus识别</span><br><span class="line">[root@elk01:3 ~]# /app/kafka-exporter/kafka_exporter \</span><br><span class="line">--web.listen-address=<span class="string">&quot;:9308&quot;</span> --web.telemetry-path=<span class="string">&quot;/metrics&quot;</span> \</span><br><span class="line">--kafka.server=elk211:9092 --kafka.server=elk212:9092  \</span><br><span class="line">--kafka.server=elk213:9092 --kafka.version=<span class="string">&quot;3.8.0&quot;</span></span><br><span class="line"></span><br><span class="line">4.访问kafka exporter测试</span><br><span class="line">http://10.0.0.213:9308/metrics</span><br><span class="line"></span><br><span class="line">5.Prometheus配置监控kafka</span><br><span class="line">[root@elk03:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">    - job_name: <span class="string">&quot;kafka&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.213:9308 </span><br><span class="line">        </span><br><span class="line">6.检测Prometheus语法</span><br><span class="line">7.热加载Prometheus</span><br></pre></td></tr></table></figure><h2 id="监控elasticsearch集群">监控elasticsearch集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.下载elasticsearch exporter </span><br><span class="line">[root@elk01:3 ~]# wget https://github.com/prometheus-community/elasticsearch_exporter/releases/download/v1.7.0/elasticsearch_exporter-1.7.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压软件包</span><br><span class="line">[root@elk01:3 ~]# tar xf elasticsearch_exporter-1.7.0.linux-amd64.tar.gz -C /app</span><br><span class="line"></span><br><span class="line">3.运行elasticsearch exporter暴露ES集群的监控指标为http接口，供给Prometheus抓取数据</span><br><span class="line">[root@elk01:3 ~]# /app/elasticsearch_exporter-1.7.0.linux-amd64/elasticsearch_exporter \</span><br><span class="line">--web.telemetry-path=<span class="string">&quot;/metrics&quot;</span> \</span><br><span class="line">--web.listen-address=:9114 \</span><br><span class="line">--es.all \</span><br><span class="line">--es.uri=<span class="string">&quot;http://elastic:123456@10.0.0.211:9200&quot;</span></span><br><span class="line"></span><br><span class="line">4.访问elasticsearch exporter的WebUI</span><br><span class="line">http://10.0.0.212:9114/metrics</span><br><span class="line"></span><br><span class="line">5.Prometheus配置监控kafka</span><br><span class="line">[root@elk03:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">    - job_name: <span class="string">&quot;es&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.213:9114</span><br><span class="line">        </span><br><span class="line">6.检测Prometheus语法</span><br><span class="line">7.热加载Prometheus</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">带你了解使用Prometheus监控ELK集群</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>03-grafana出图</title>
    <link href="https://lukme.top/posts/c9c8c45c.html"/>
    <id>https://lukme.top/posts/c9c8c45c.html</id>
    <published>2024-11-17T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装部署grafana">安装部署grafana</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">网址： https://grafana.com/grafana/download/9.5.21?pg=get&amp;plcmt=selfmanaged-box1-cta1</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.安装软件包（选择9版本的最新版）</span></span><br><span class="line">[root@elk01:0 ~]# yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.21-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.配置开机自启动</span></span><br><span class="line">[root@elk01:0 ~]# systemctl <span class="built_in">enable</span> --now grafana-server </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.访问grafana的WebUI</span></span><br><span class="line">http://10.0.0.211:3000/login</span><br><span class="line"></span><br><span class="line">首次登录用户名和密码均为admin，登录点击后面直接点击skip跳过修改密码</span><br></pre></td></tr></table></figure><h2 id="配置Prometheus数据源">配置Prometheus数据源</h2><p><img src="https://cos.lukme.top/Pic/image-20241122135329713.png" alt="image-20241122135329713"></p><p><img src="https://cos.lukme.top/Pic/image-20241122135413189.png" alt="image-20241122135413189"></p><p><img src="https://cos.lukme.top/Pic/image-20241122135559291.png" alt="image-20241122135559291"></p><p><strong>下拉找到保存save即可</strong></p><h2 id="导入模板">导入模板</h2><p><a href="https://grafana.com/grafana/dashboards/?search=node">官方dashboard，点击直达，搜索node查看模板</a></p><p>找到合适模板知道模板id导入grafana</p><p><img src="https://cos.lukme.top/Pic/image-20241122135814095.png" alt="image-20241122135814095"></p><p><img src="https://cos.lukme.top/Pic/image-20241122141944442.png" alt="image-20241122141944442"></p><blockquote><p>还有个模板8919仅供参考</p></blockquote><p><strong>CPU压测后数据明显了</strong><img src="https://cos.lukme.top/Pic/image-20241122142250940.png" alt="image-20241122142250940"></p><h2 id="创建自己的模板">创建自己的模板</h2><p><img src="https://cos.lukme.top/Pic/image-20241123094852067.png" alt="image-20241123094852067"></p><p><strong>Add  visualization</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123095639123.png" alt="image-20241123095639123"></p><p><strong>==创建dashboard以及出图见05-监控CPU使用情况==</strong></p><h2 id="grafana修改模板">grafana修改模板</h2><p><strong>以普罗米模板11277为例</strong></p><p><strong>导入模板</strong></p><p><img src="https://cos.lukme.top/Pic/QQ_1726060882752.png" alt="QQ_1726060882752"></p><p><img src="https://cos.lukme.top/Pic/image-20240911212345131.png" alt="image-20240911212345131"></p><p><img src="https://cos.lukme.top/Pic/image-20240911212434248.png" alt="image-20240911212434248"></p><h2 id="修改模板">修改模板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">去普罗米里发现新现版prometheus的project改为了job，所有下一步修改变量</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/recording.gif" alt="recording"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将project改为job，并且删掉不支持的project</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Prometheus接入grafana出图展示</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>02-prometheus常用函数介绍</title>
    <link href="https://lukme.top/posts/7c8bc612.html"/>
    <id>https://lukme.top/posts/7c8bc612.html</id>
    <published>2024-11-16T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.731Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Prometheus常用的函数</strong></p><h2 id="increase">increase</h2><p>increase函数:<br>用来针对counter数据类型，截取其中一段时间总的增量。</p><p>举个例子:</p><p>统计1分钟内，使用标签过滤器查看&quot;10.0.0.211:9100&quot;节点的第0颗CPU，空闲状态使用的总时间增量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;10.0.0.211:9100&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125;[1m])</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122125610115.png" alt="image-20241122125610115"></p><blockquote><p>一分钟内空闲59s，CPU太闲了，压测一波</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.安装压力测试工具</span></span><br><span class="line">[root@elk02 ~]# yum install -y stress</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.压力测试CPU</span></span><br><span class="line">[root@elk03:1 ~]# stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --<span class="built_in">timeout</span> 10m</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122130528444.png" alt="image-20241122130528444"></p><h2 id="sum">sum</h2><p>sum函数:<br>加和的作用。 （将下方图1所有结果累加，不分组）</p><p>举个例子:</p><p>统计1分钟内，使用标签过滤器查看所有节点的第0颗CPU，空闲状态使用的总时间增量，并将返回结果累加。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&quot;idle&quot;</span>,cpu=<span class="string">&#x27;0&#x27;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122131145124.png" alt="image-20241122131145124"></p><p><img src="https://cos.lukme.top/Pic/image-20241122131116002.png" alt="image-20241122131116002"></p><h2 id="by">by</h2><p>by函数:<br>将数据进行分组，类似于MySQL的&quot;GROUP BY&quot;。</p><p>举个例子:</p><p>统计1分钟内，使用标签过滤器查看CPU空闲状态，并将结果进行累加，基于instance进行分组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&quot;idle&quot;</span>,cpu=<span class="string">&#x27;0&#x27;</span>&#125;[1m])) by (instance)</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122131653295.png" alt="image-20241122131653295"></p><h2 id="rate">rate</h2><p>rate函数:<br>它的功能是按照设置的时间段，取counter在这个时间段中平均每秒的增量。<br>举个例子:</p><p>统计1分钟内，使用标签过滤器查看&quot;10.0.0.212:9100&quot;节点的第0颗CPU，空闲状态使用的每秒的增量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rate(node_cpu_seconds_total&#123;instance=<span class="string">&quot;10.0.0.212:9100&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>,cpu=<span class="string">&#x27;0&#x27;</span>&#125;[1m])</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122132326591.png" alt="image-20241122132326591"></p><p>increase和rate如何选择:<br>(1)对于采集数据频率较低的场景建议使用increase函数，因为使用rate函数可能会出现断点,比如针对硬盘容量监控。<br>(2)对于采集数据频率较高的场景建议使用rate函数，比如针对CPU，内存，网络流量等都是可以基于rate函数来采集等。</p><h2 id="topk">topk</h2><p>topk函数:<br>取前几位的最高值，实际使用的时候一般会用该函数进行瞬时报警，而不是为了观察曲线图。</p><p>举个例子:<br>统计1分钟内，使用标签过滤器查看CPU，所有状态使用的每秒的增量，只查看前3个节点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topk(3,rate(node_cpu_seconds_total&#123;mode=<span class="string">&quot;idle&quot;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122132911868.png" alt="image-20241122132911868"></p><p><img src="https://cos.lukme.top/Pic/image-20241122133011958.png" alt="image-20241122133011958"></p><h2 id="count">count</h2><p>count函数:<br>把数值符合条件的，输出数目进行累加加和。<br>比如说企业中有100台服务器，如果只有10台服务器CPU使用率高于80%时候是不需要报警的，但是数量超过70台时就需要报警了。</p><p>举个例子:<br>count(tcp_wait_conn &gt; 500):<br>假设tcp_wait_conn是咱们自定义的KEY。<br>若TCP等待数量大于500的机器数量就判断条件为真。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对统计的结果进行计数。</span></span><br><span class="line"></span><br><span class="line">count(rate(node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122133509836.png" alt="image-20241122133509836"></p><p>7 其他函数</p><p>推荐阅读:<br><a href="https://prometheus.io/docs/prometheus/latest/querying/functions/">https://prometheus.io/docs/prometheus/latest/querying/functions/</a></p>]]></content>
    
    
    <summary type="html">本篇介绍了Prometheus的常用函数</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>01-prometheus介绍及部署</title>
    <link href="https://lukme.top/posts/d9386973.html"/>
    <id>https://lukme.top/posts/d9386973.html</id>
    <published>2024-11-15T03:23:03.000Z</published>
    <updated>2024-12-05T03:37:04.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="prometheus介绍">prometheus介绍</h2><p>1.什么是Prometheus<br>Prometheus是一款监控系统，可以监控传统业务（tomcat，nginx，mysql，redis，elasticsearch），还能够监控云原生业务，比如docker，k8s监控。</p><p><strong>官方链接:</strong><br><a href="https://prometheus.io/docs/introduction/overview/#architecture">https://prometheus.io/docs/introduction/overview/#architecture</a></p><p>推荐阅读:</p><pre><code>云原生CNCF官网:    https://landscape.cncf.io/Prometheus的GitHub地址:    https://github.com/prometheus/prometheusPrometheus的官网地址:    https://prometheus.io/</code></pre><p><img src="https://cos.lukme.top/Pic/image-20241121163541907.png" alt="image-20241121163541907"></p><table><thead><tr><th>主机名</th><th>WanIP</th><th>角色</th></tr></thead><tbody><tr><td>elk01</td><td>10.0.0.211</td><td>Prometheus服务端，安装Prometheus、node exporeter</td></tr><tr><td>elk02</td><td>10.0.0.212</td><td>被监控端，安装node exporeter</td></tr><tr><td>elk03</td><td>10.0.0.213</td><td>被监控端，安装node exporeter</td></tr></tbody></table><blockquote><p>我的环境使用的是之前部署elk的环境，主机名所以都是elk，—无关紧要</p></blockquote><h2 id="二进制部署prometheus">二进制部署prometheus</h2><p><strong>本篇使用的是一键安装方式脚本部署，安装目录都在/software目录下</strong>k8s阶段可以使用云原生方式部署</p><p>**1.下载Prometheus server **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# wget https://github.com/prometheus/prometheus/releases/download/v2.53.3/prometheus-2.53.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>**2.解压软件包 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# tar xf prometheus-2.53.2.linux-amd64.tar.gz -C /app/</span><br><span class="line">[root@elk01 ~]# <span class="built_in">ln</span> -s /app/prometheus-2.53.2.linux-amd64/ /app/prometheus</span><br></pre></td></tr></table></figure><p>**3.启动Prometheus server **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# <span class="built_in">cd</span> /app/prometheus/ &amp;&amp; ./prometheus </span><br></pre></td></tr></table></figure><p><strong>4.访问Prometheus的WebUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.211:9090</span><br></pre></td></tr></table></figure><blockquote><p>使用安装脚本一键安装prometheus,软件包放在同级目录的download里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 auto_install_prometheus-server]# <span class="built_in">cat</span> install-prometheus-server.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># auther: lugaojie</span></span><br><span class="line"><span class="comment"># blog: www.lukme.top</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VERSION=2.53.2</span><br><span class="line">ARCH=amd64</span><br><span class="line">SOFTWARE=prometheus-<span class="variable">$&#123;VERSION&#125;</span>.linux-<span class="variable">$&#123;ARCH&#125;</span>.tar.gz</span><br><span class="line">URL=https://github.com/prometheus/prometheus/releases/download/v<span class="variable">$&#123;VERSION&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span></span><br><span class="line">DOWNLOAD=./download          <span class="comment">#指定软件下载目录</span></span><br><span class="line">INSTALLDIR=/softwares</span><br><span class="line">BASEDIR=<span class="variable">$&#123;INSTALLDIR&#125;</span>/prometheus-<span class="variable">$&#123;VERSION&#125;</span>.linux-amd64</span><br><span class="line">DATADIR=/data/prometheus</span><br><span class="line">LOGDIR=/var/log/prometheus</span><br><span class="line">HOSTIP=0.0.0.0</span><br><span class="line">PORT=9090</span><br><span class="line">HOSTNAME=`hostname`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">prepare</span></span>() &#123;</span><br><span class="line"><span class="comment"># 判断目录是否存在，若不存在则创建，-d指定目录，-o可以指定属主，-g指定数组</span></span><br><span class="line">[ -d <span class="variable">$INSTALLDIR</span> ] || install -d  <span class="variable">$&#123;INSTALLDIR&#125;</span></span><br><span class="line">[ -d <span class="variable">$DOWNLOAD</span> ] || install -d <span class="variable">$&#123;DOWNLOAD&#125;</span></span><br><span class="line">[ -d <span class="variable">$DATADIR</span> ] || install -d <span class="variable">$&#123;DATADIR&#125;</span></span><br><span class="line">[ -d <span class="variable">$LOGDIR</span> ] || install -d <span class="variable">$&#123;LOGDIR&#125;</span></span><br><span class="line"></span><br><span class="line">. /etc/os-release</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ID</span>&quot;</span> == <span class="string">&quot;centos&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"> <span class="comment"># 判断系统是否安装wget</span></span><br><span class="line"> [ -f /usr/bin/wget ] || yum -y install wget</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否存在，若不存在则下载</span></span><br><span class="line">[ -s <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span> ] || wget <span class="variable">$URL</span> -O <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">deploy</span></span>() &#123;</span><br><span class="line"><span class="comment"># 检查环境</span></span><br><span class="line">prepare</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件软件包</span></span><br><span class="line">tar xf <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span> -C <span class="variable">$&#123;INSTALLDIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成启动脚本</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/prometheus-server.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description== Linux  Prometheus Server</span></span><br><span class="line"><span class="string">Documentation=https://prometheus.io/docs/introduction/overview/</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string">ExecStart=/bin/bash -c &quot;$&#123;BASEDIR&#125;/prometheus \</span></span><br><span class="line"><span class="string">  --config.file=$&#123;BASEDIR&#125;/prometheus.yml \</span></span><br><span class="line"><span class="string">      --web.enable-lifecycle \</span></span><br><span class="line"><span class="string">      --storage.tsdb.path=$&#123;DATADIR&#125; \</span></span><br><span class="line"><span class="string">      --storage.tsdb.retention.time=60d  \</span></span><br><span class="line"><span class="string">      --web.listen-address=$&#123;HOSTIP&#125;:$&#123;PORT&#125;  \</span></span><br><span class="line"><span class="string">      --web.max-connections=65535  \</span></span><br><span class="line"><span class="string">      --storage.tsdb.retention.size=512MB \</span></span><br><span class="line"><span class="string">      --query.timeout=10s \</span></span><br><span class="line"><span class="string">      --query.max-concurrency=20 \</span></span><br><span class="line"><span class="string">      --log.level=info \</span></span><br><span class="line"><span class="string">      --log.format=json \</span></span><br><span class="line"><span class="string">      --web.read-timeout=5m &amp;&gt;&gt; $&#123;LOGDIR&#125;/prometheus-server.log&quot;</span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -HUP \$MAINPID</span></span><br><span class="line"><span class="string">LimitNOFILE=65535</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  --web.enable-lifecycle                      指定webUI的热加载功能</span></span><br><span class="line"><span class="comment">#  --storage.tsdb.path=$&#123;DATADIR&#125;     指定存储路径</span></span><br><span class="line"><span class="comment">#  --storage.tsdb.retention.time=60d  指定保留数据时间，默认15d</span></span><br><span class="line"><span class="comment">#  --web.max-connections=65535        指定最大连接数</span></span><br><span class="line"><span class="comment">#  --storage.tsdb.retention.size=512MB指定存储块大小，512M滚动一次</span></span><br><span class="line"><span class="comment">#  --log.level=info                                  指定日志级别</span></span><br><span class="line"><span class="comment">#  --log.format=json                              指定日志格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将服务设置为开机自启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now prometheus-server</span><br><span class="line">systemctl status prometheus-server</span><br><span class="line"><span class="built_in">sleep</span> 0.3</span><br><span class="line">ss -ntl | grep <span class="variable">$&#123;PORT&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">delete</span></span>()&#123;</span><br><span class="line">systemctl <span class="built_in">disable</span> --now prometheus-server.service</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/systemd/system/node-exporter.service <span class="variable">$BASEDIR</span> <span class="variable">$DATADIR</span> <span class="variable">$LOGDIR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </span><br><span class="line"> deploy|i)</span><br><span class="line">   deploy</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;HOSTNAME&#125;</span> 的prometheus-server 已经部署成功![successfully]&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"> delete|r)</span><br><span class="line">   delete</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;HOSTNAME&#125;</span> 的prometheus-server 已经卸载成功,期待下次使用~&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"> *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> deploy[i]|delete[r]&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main <span class="variable">$1</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="部署node-exporter">部署node exporter</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">部署过程同上，官网找到下载</span><br><span class="line"></span><br><span class="line">1.#下载node exporter</span><br><span class="line">[root@elk01 ~]# wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.#解压至指定目录</span><br><span class="line">[root@elk01 ~]# tar xf node_exporter-1.8.2.linux-amd64.tar.gz -C /app</span><br><span class="line">[root@elk01 ~]# <span class="built_in">ln</span> -s /app/node_exporter-1.8.2.linux-amd64 /app/node_exporter</span><br><span class="line"></span><br><span class="line">4.#启动node_exporter</span><br><span class="line">[root@elk01 ~]# <span class="built_in">cd</span>  /app/node_exporter &amp;&amp; ./node_exporter </span><br><span class="line"></span><br><span class="line">5.#另外两个节点同样安装 node exporter</span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器访问（这就是暴露出来的接口）</span></span><br><span class="line">http://10.0.0.211:9100/metrics</span><br><span class="line">http://10.0.0.212:9100/metrics</span><br><span class="line">http://10.0.0.213:9100/metrics</span><br></pre></td></tr></table></figure><blockquote><p>一键安装exporter,软件包放在同级目录的download目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> auto-install-node-exporter/install-node-exporter.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># auther: lugaojie</span></span><br><span class="line"><span class="comment"># blog: https://www.lukme.top</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VERSION=1.8.2</span><br><span class="line">SOFTWARE=node_exporter-<span class="variable">$&#123;VERSION&#125;</span>.linux-amd64.tar.gz</span><br><span class="line">URL=https://github.com/prometheus/node_exporter/releases/download/v<span class="variable">$&#123;VERSION&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span></span><br><span class="line">DOWNLOAD=./download</span><br><span class="line">INSTALLDIR=/softwares</span><br><span class="line">BASEDIR=<span class="variable">$&#123;INSTALLDIR&#125;</span>/node_exporter-<span class="variable">$&#123;VERSION&#125;</span>.linux-amd64</span><br><span class="line">HOST=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">PORT=9100</span><br><span class="line">hostname=`hostname`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">prepare</span></span>() &#123;</span><br><span class="line"><span class="comment"># 判断目录是否存在，若不存在则创建</span></span><br><span class="line">[ -d <span class="variable">$INSTALLDIR</span> ] || <span class="built_in">mkdir</span> -pv <span class="variable">$&#123;INSTALLDIR&#125;</span></span><br><span class="line">[ -d <span class="variable">$DOWNLOAD</span> ] || <span class="built_in">mkdir</span> -pv <span class="variable">$&#123;DOWNLOAD&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ID</span>&quot;</span> == <span class="string">&quot;centos&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="comment"># 判断系统是否安装curl</span></span><br><span class="line">  [ -f /usr/bin/wget ] || yum -y install wget</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否存在，若不存在则下载</span></span><br><span class="line">[ -s <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span> ] || wget <span class="variable">$URL</span> -O <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">install</span></span>() &#123;</span><br><span class="line"><span class="comment"># 检查环境</span></span><br><span class="line">prepare</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件软件包</span></span><br><span class="line">tar xf <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span> -C <span class="variable">$&#123;INSTALLDIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成启动脚本</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/node-exporter.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description= Linux Node Exporter</span></span><br><span class="line"><span class="string">Documentation=https://prometheus.io/docs/introduction/overview/</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStart=$&#123;BASEDIR&#125;/node_exporter --web.telemetry-path=&quot;/metrics&quot; \</span></span><br><span class="line"><span class="string">--web.listen-address=$&#123;HOST&#125;:$&#123;PORT&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将服务设置为开机自启动</span></span><br><span class="line">  systemctl daemon-reload</span><br><span class="line">  systemctl <span class="built_in">enable</span> --now node-exporter.service</span><br><span class="line">  systemctl status node-exporter.service</span><br><span class="line">  ss -ntl | grep 9100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">remove</span></span>()&#123;</span><br><span class="line">systemctl <span class="built_in">disable</span> --now node-exporter.service</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/systemd/system/node-exporter.service <span class="variable">$BASEDIR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </span><br><span class="line"> install|i)</span><br><span class="line">   install</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;hostname&#125;</span> 的node-exporter 已经部署成功![successfully]&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"> remove|r)</span><br><span class="line">   remove</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;hostname&#125;</span> 的node-exporter 已经卸载成功,期待下次使用~&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"> *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> install[i]|remove[r]&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main <span class="variable">$1</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="修改Prometheus文件">修改Prometheus文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.修改配置文件</span></span><br><span class="line">[root@elk01:0 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"><span class="comment">#为了测试，拉取间隔时间可以设置为3s</span></span><br><span class="line">scrape_interval: 3s</span><br><span class="line">···末尾加上</span><br><span class="line">    <span class="comment">#job名随便，告诉Prometheus去哪拉取数据     </span></span><br><span class="line">  - job_name: <span class="string">&quot;elk&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.211:9100&quot;</span>,<span class="string">&quot;10.0.0.212:9100&quot;</span>,<span class="string">&quot;10.0.0.213:9100&quot;</span>]</span><br><span class="line">      </span><br><span class="line"><span class="comment">#2.修改配置文件后，对配置文件进行语法检查（Prometheus自带的）</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">Checking /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml</span><br><span class="line"> SUCCESS: /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml is valid prometheus config file syntax</span><br><span class="line"> </span><br><span class="line">`可以设置别名针对检查配置文件命令太长`</span><br><span class="line">[root@elk01:~]# vim /etc/profile</span><br><span class="line"><span class="built_in">alias</span> check=<span class="string">&#x27;/softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml&#x27;</span></span><br><span class="line"></span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.重新加载配置（热加载）</span></span><br><span class="line">[root@elk211 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 浏览器刷新访问,在target里即可看到被监控端</span></span><br><span class="line">10.0.0.211:9090/targets</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122111710195.png" alt="image-20241122111710195"></p><p><strong>关于metrics</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241122113152787.png" alt="image-20241122113152787"></p><p><strong>过滤数据</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241122114130917.png" alt="image-20241122114130917"></p><h2 id="Prometheus-metrics-类型">Prometheus metrics 类型</h2><ul><li>prometheus metrics type<br>prometheus监控中采集过来的数据统一称为Metrics数据，其并不是代表具体的数据格式，而是一种统计度量计算单位。</li></ul><p>当我们需要为某个系统或者某个服务做监控时，就需要使用到metrics。</p><p>prometheus支持的metrics包括但不限于以下几种数据类型:<br>guage:<br>最简单的度量指标，只是一个简单的返回值，或者叫瞬时状态。<br>比如说统计硬盘，内存等使用情况。<br>couter:<br>就是一个计数器，从数据量0开始累积计算，在理想情况下，只能是永远的增长，不会降低(有特殊情况，比如粉丝量)。<br>比如统计1小时，1天，1周，1一个月的用户访问量，这就是一个累加的操作。<br>histograms:<br>是统计数据的分布情况，比如最小值，最大值，中间值，中位数等，代表的是一种近似百分比估算数值。<br>通过histograms可以分别统计处在一个时间段(1s,2s,5s,10s)内nginx访问用户的响应时间。<br>summary:<br>summary是histograms的扩展类型，主要弥补histograms不足。</p><h2 id="Prometheus的PromQL语法">Prometheus的PromQL语法</h2><p>1 查看某个特定的key<br>node_cpu_seconds_total</p><p>2.查看某个节点的指标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_cpu_seconds_total&#123;instance=<span class="string">&quot;10.0.0.211:9100&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>3 查看某个节点的某刻CPU的某种状态</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode=&quot;idle&quot;,cpu=&quot;1&quot;&#125;</code></pre><p>4 查询最近10s内某个节点CPU的某种状态时间</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode=&quot;idle&quot;,cpu=&quot;1&quot;&#125;[10s]</code></pre><p>5 统计10s内，使用标签过滤器查看&quot;10.0.0.211:9100&quot;节点的第0颗CPU，非空闲状态使用的总时间</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode!=&quot;idle&quot;,cpu=&quot;1&quot;&#125;[10s]</code></pre><p>6 统计10s内，使用标签过滤器查看&quot;10.0.0.211:9100&quot;节点的第0颗CPU，mode名称以字母&quot;i&quot;开头的所有CPU核心。</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode=~&quot;i.*&quot;,cpu=&quot;0&quot;&#125;[10s]</code></pre><p>7 统计10s内，使用标签过滤器查看&quot;10.0.0.211:9100&quot;节点的第0颗CPU，mode名称不是以字母&quot;i&quot;开头的所有CPU核心。</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode!~&quot;i.*&quot;,cpu=&quot;0&quot;&#125;[10s]</code></pre>]]></content>
    
    
    <summary type="html">本篇介绍了Prometheus的部署及Prometheus的metrics类型和PromQL语法</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>14.基于kafka的日志收集</title>
    <link href="https://lukme.top/posts/b922fe1d.html"/>
    <id>https://lukme.top/posts/b922fe1d.html</id>
    <published>2024-10-30T02:46:01.000Z</published>
    <updated>2024-10-30T04:02:48.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="filebeat写入数据到kafka集群">filebeat写入数据到kafka集群</h2><p><strong>1. 创建topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-topics.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic linux-study.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@elk01:5 ~]# kafka-topics.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --describe</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030003043850.png" alt="image-20241030003043850"></p><p><strong>2. filebeat写入数据到kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/20-filebeat-to-kafka.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">  - <span class="built_in">type</span>: filestream</span><br><span class="line">    paths:</span><br><span class="line">      - /opt/access.log*</span><br><span class="line">  </span><br><span class="line">output.kafka:</span><br><span class="line">  <span class="comment"># 指定kafka集群地址</span></span><br><span class="line">  hosts: [<span class="string">&quot;10.0.0.211:9092&quot;</span>, <span class="string">&quot;10.0.0.212:9092&quot;</span>, <span class="string">&quot;10.0.0.213:9092&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 指定写入的topic地址</span></span><br><span class="line">  topic: <span class="string">&#x27;linux-study&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动filebeat实例</span></span><br><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/20-filebeat-to-kafka.yaml</span><br></pre></td></tr></table></figure><p><strong>3. kafka节点测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]#  kafka-console-consumer.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --from-beginning --group filebeat01</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030004427518.png" alt="image-20241030004427518"></p><h2 id="logstash从kafka集群读取数据">logstash从kafka集群读取数据</h2><p>**1.编写logstash实例 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># elasticsearch&#123;</span></span><br><span class="line"> <span class="comment">#    hosts =&gt; [&quot;10.0.0.91:9200&quot;,&quot;10.0.0.92:9200&quot;,&quot;10.0.0.93:9200&quot;]</span></span><br><span class="line"> <span class="comment">#    index =&gt; &quot;oldboyedu-kafka-elk-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"> <span class="comment">#    user =&gt; &quot;elastic&quot;</span></span><br><span class="line"> <span class="comment">#    password =&gt; &quot;123456&quot;</span></span><br><span class="line"> <span class="comment">#  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 启动logstash实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# logstash -rf /etc/logstash/conf.d/17-kafka-to-logstash.conf </span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T17:05:27.448Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;&#123;\&quot;@timestamp\&quot;:\&quot;2024-10-29T16:39:24.279Z\&quot;,\&quot;@metadata\&quot;:&#123;\&quot;beat\&quot;:\&quot;filebeat\&quot;,\&quot;type\&quot;:\&quot;_doc\&quot;,\&quot;version\&quot;:\&quot;7.17.23\&quot;&#125;,\&quot;log\&quot;:&#123;\&quot;offset\&quot;:20478,\&quot;file\&quot;:&#123;\&quot;path\&quot;:\&quot;/opt/access.log\&quot;&#125;&#125;,\&quot;message\&quot;:\&quot;109.110.162.51 - - [04/Oct/2024:10:00:41 +0800] \\\&quot;GET / HTTP/1.1\\\&quot; 304 0 \\\&quot;-\\\&quot; \\\&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1 Edg/129.0.0.0\\\&quot;\&quot;,\&quot;input\&quot;:&#123;\&quot;type\&quot;:\&quot;filestream\&quot;&#125;,\&quot;ecs\&quot;:&#123;\&quot;version\&quot;:\&quot;1.12.0\&quot;&#125;,\&quot;host\&quot;:&#123;\&quot;name\&quot;:\&quot;elk01\&quot;&#125;,\&quot;agent\&quot;:&#123;\&quot;id\&quot;:\&quot;0f020f85-7619-4e85-83ae-346d91b5ca57\&quot;,\&quot;name\&quot;:\&quot;elk01\&quot;,\&quot;type\&quot;:\&quot;filebeat\&quot;,\&quot;version\&quot;:\&quot;7.17.23\&quot;,\&quot;hostname\&quot;:\&quot;elk01\&quot;,\&quot;ephemeral_id\&quot;:\&quot;ed96638d-32ee-4ee0-afbb-504643c3d52a\&quot;&#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030010834508.png" alt="image-20241030010834508"></p><p><strong>3. 优化logstash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#对message字段进行json格式化</span></span><br><span class="line">filter &#123;</span><br><span class="line">  json &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;message&quot;</span></span><br><span class="line">    <span class="comment">#移除不需要的字段，不然像下面一样出现很多没有价值的字段</span></span><br><span class="line">   <span class="comment"># remove_field =&gt; [ &quot;input&quot;,&quot;host&quot;,&quot;agent&quot;,&quot;@version&quot;,&quot;log&quot;, &quot;ecs&quot; ]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果展示</span></span><br><span class="line"></span><br><span class="line">         <span class="string">&quot;agent&quot;</span> =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hostname&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">             <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ephemeral_id&quot;</span> =&gt; <span class="string">&quot;9a1e6795-8fe4-476b-ba6b-9d91b41f282c&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;1b86f9d4-c41a-4c30-8b3c-c921ed07d026&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">         <span class="string">&quot;input&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filestream&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T16:40:45.156Z,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">           <span class="string">&quot;ecs&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">           <span class="string">&quot;log&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;offset&quot;</span> =&gt; 27088,</span><br><span class="line">          <span class="string">&quot;file&quot;</span> =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/opt/access.log&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#移除字段后展示</span></span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T16:40:45.156Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;150.109.253.34 - - [04/Oct/2024:10:01:27 +0800] \&quot;GET /app HTTP/1.1\&quot; 404 197 \&quot;-\&quot; \&quot;Mozilla/5.0 (Linux; Android 8.0.0; SM-G955U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36 Edg/129.0.0.0\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>4. 正常操作优化,并输出到es集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#对message字段进行json格式化</span></span><br><span class="line">filter &#123;</span><br><span class="line">  json &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;message&quot;</span></span><br><span class="line">    <span class="comment">#移除不需要的字段</span></span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;input&quot;</span>,<span class="string">&quot;host&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;@version&quot;</span>,<span class="string">&quot;log&quot;</span>, <span class="string">&quot;ecs&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 基于正则匹配任意文本，grok内置了120种匹配模式</span></span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;HTTPD_COMBINEDLOG&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  useragent &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;agent&quot;</span></span><br><span class="line">    target =&gt; <span class="string">&quot;agent-kind&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  geoip &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;clientip&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">date</span> &#123;</span><br><span class="line">    match =&gt; [ <span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  elasticsearch&#123;</span><br><span class="line">     hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">     index =&gt; <span class="string">&quot;kafka-elk-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">     user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">     password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030013045764.png" alt="image-20241030013045764"></p>]]></content>
    
    
    <summary type="html">本章介绍了基于ELFK架构+kafka收集日志处理</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>13.使用supervisor管理服务</title>
    <link href="https://lukme.top/posts/1267bcfa.html"/>
    <id>https://lukme.top/posts/1267bcfa.html</id>
    <published>2024-10-30T02:45:01.000Z</published>
    <updated>2024-10-30T04:02:43.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用supervisor管理服务">使用supervisor管理服务</h2><p><strong>1. 下载supervisor</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]#  apt -y install supervisor</span><br></pre></td></tr></table></figure><p><strong>2. 启动服务并设置开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]#  systemctl start supervisor</span><br><span class="line">[root@elk02:0 ~]#  systemctl <span class="built_in">enable</span> supervisor</span><br></pre></td></tr></table></figure><p><strong>3.修改supervisor配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# vim /etc/supervisor/supervisord.conf</span><br><span class="line">···</span><br><span class="line"><span class="comment"># 以后需要配置的服务只需要放在/etc/supervisor/下，以.ini结尾的都可被supervisor管理</span></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/*.ini</span><br></pre></td></tr></table></figure><p><strong>4.编辑ini配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/supervisor/zk.ini </span><br><span class="line">[program:zookeeper]</span><br><span class="line"><span class="built_in">command</span>=/app/zookeeper/bin/zkServer.sh start-foreground</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stderr_logfile=/var/log/zookeeper.err.log</span><br><span class="line">stdout_logfile=/var/log/zookeeper.out.log</span><br><span class="line">user=root</span><br><span class="line">priority=1</span><br><span class="line">environment=JAVA_HOME=<span class="string">&quot;/usr/share/elasticsearch/jdk/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意修改zookeeper的安装路径，以及javahome路径   （使用  echo $JAVA_HOME 查看java环境 ）</span></span><br><span class="line">[root@elk01:2 ~]# <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/usr/share/elasticsearch/jdk</span><br></pre></td></tr></table></figure><p><strong>5. 更新supervisor配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# supervisorctl update</span><br><span class="line"></span><br><span class="line">注意：每次跟新服务配置都需要update</span><br></pre></td></tr></table></figure><p><strong>6.supervisor管理命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl start zookeeper</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl stop zookeeper</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动或者停止所有服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl start/stop all</span><br><span class="line"></span><br><span class="line">友情提示：</span><br><span class="line">  如果你的zookeeper是使用zkServer.sh start 启动的，要先使用zkServer.sh stop关闭服务，不能使用zkServer启动服务，使用supervisor去关闭服务</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍了使用supervisor统一管理zookeeper和kafka，相比systemd管理更加方便</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>12.kafka的脚本管理及数据延迟、丢失分析</title>
    <link href="https://lukme.top/posts/70dc5443.html"/>
    <id>https://lukme.top/posts/70dc5443.html</id>
    <published>2024-10-30T02:44:01.000Z</published>
    <updated>2024-10-30T04:02:38.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka的脚本管理">kafka的脚本管理</h2><h3 id="topic管理">topic管理</h3><p><strong>1.查看topic列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --list </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**2.创建topic **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic luay.</span><br><span class="line"></span><br><span class="line"><span class="comment">#注释：</span></span><br><span class="line">--topic  luay           <span class="comment">#指定topic为luay</span></span><br><span class="line">--partitions 3          <span class="comment">#创建3个分区</span></span><br><span class="line">--replication-factor 2  <span class="comment">#创建2个副本</span></span><br><span class="line">--create                <span class="comment">#动作--创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#其它选项</span></span><br><span class="line">--delete                <span class="comment">#删除</span></span><br><span class="line">--alter                 <span class="comment">#修改</span></span><br><span class="line">--describe              <span class="comment">#输出详细信息</span></span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029180717295.png" alt="image-20241029180717295"></p><p><strong>3.修改分区数量【只能由小变大，不能由大变小】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --partitions 5 --alter</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029180957289.png" alt="image-20241029180957289"></p><p><strong>4.查看指定topic的详细信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --describe</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029181157071.png" alt="image-20241029181157071"></p><p><strong>5.删除topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#kafka数据目录里topic会被标记-delete，等待一会便会自动删除</span></span><br><span class="line">[root@elk01:1 ~]# ll /app/data/kafka/</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 29 18:15 luay-1.2baa4b610f314befbfbed58aaad84052-delete/</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 29 18:15 luay-2.0f44f4821a1849ccb7e0e37e1fe65ff4-delete/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="producer管理">producer管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt;999999</span><br><span class="line">[2024-10-29 20:49:30,357] WARN [Producer clientId=console-producer] Error <span class="keyword">while</span> fetching metadata with correlation <span class="built_in">id</span> 7 : &#123;<span class="built_in">test</span>=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class="line"></span><br><span class="line"><span class="comment">#首次写入时，若topic不存在，则kafka集群默认会自动创建。</span></span><br><span class="line">[root@elk02:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --list</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="kafka的consumer管理">kafka的consumer管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生产者发送消息</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt;12112112</span><br><span class="line">&gt;666666</span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者接收消息---接收现在开始的消息</span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">666666</span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者接收消息---从头接收消息    --from-beginning </span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span> --from-beginning </span><br><span class="line">999999</span><br><span class="line">12112112</span><br><span class="line">666666</span><br></pre></td></tr></table></figure><h2 id="消费者组理念">消费者组理念</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- kafka的消费者组概念</span><br><span class="line">1.kafka的offset存储位置</span><br><span class="line">kafka早期版本 0.9-版本，offset记录存储在zookeeper集群。</span><br><span class="line">从kafka 0.10+版本，默认的offset存储在kafka集群，存储在一个名为<span class="string">&quot;__consumer_offsets&quot;</span>内置的topic。(当消费者出现宕机，当前当前组里的其它消费者会从_consumer_offsets记录的偏移量里，找到已经取到哪里的数据，从此点继续往后取数据，而不是从新取所有数据，避免数据重复采集)</span><br><span class="line"></span><br><span class="line">2.相关术语</span><br><span class="line">consumer group：    消费者组，任意一个消费者都隶属于一个消费者组。</span><br><span class="line"></span><br><span class="line">1.而<span class="string">&quot;__consumer_offsets&quot;</span>内置的topic记录的偏移量并不属于某个消费者，而是基于消费者进行记录的。</span><br><span class="line">2.当消费者组的消费者数量发生变化时，会触发重平衡(Rebalance);</span><br><span class="line">  1.比如消费者组的消费者（C1/C2）新增或者下线，所谓的重平衡指的是该消费者组的消费者重新分配分区（0分区,1分区,2分区过程。</span><br><span class="line">  2.该消费者组若新增了消费者，也会触发重平衡;</span><br><span class="line">  3.当消费者组的数量多余partition数量时，则会导致该消费者组有空闲的消费者;（假设5个消费者，但是只有3个分区)</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/consumer_group.png" alt="consumer_group"></p><h2 id="kafka消费者组数据延迟分析">kafka消费者组数据延迟分析</h2><p>由图解，kafka的消费者是logstash，怎么会出现数据延迟呢？</p><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/ElasticStack_MQ.png" alt="ElasticStack_MQ"></p><blockquote><p>当生产者过多，logstash忙不过来时候收集，就会出现数据延迟可能</p></blockquote><p>理论存在，分析实践</p><p><strong>1. 查看现有的消费者组列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --list</span><br><span class="line">console-consumer-10558</span><br><span class="line">console-consumer-73547</span><br><span class="line">console-consumer-4558</span><br></pre></td></tr></table></figure><p><strong>2.创建topic指定分区和副本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03:0 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic new --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic new.</span><br></pre></td></tr></table></figure><p><strong>3.启动生产者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999</span><br></pre></td></tr></table></figure><p><strong>4.启动消费者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 启动第一个消费者，指定消费者组</span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic new --from-beginning --group dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看消费者列表</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --list</span><br><span class="line">dev</span><br><span class="line">console-consumer-10558</span><br><span class="line">console-consumer-73547</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看指定消费者的详细信息</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --group dev --describe</span><br><span class="line">GROUP           TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG</span><br><span class="line">dev             new             0          0               0               0  </span><br><span class="line">dev             new             1          0               0               0  </span><br><span class="line">dev             new             2          1               0               0  </span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029224849054.png" alt="image-20241029224849054"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.生产者继续写入测试数据</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999999</span><br><span class="line">&gt;aaaaaaaa</span><br><span class="line">&gt;vbbbbbb</span><br><span class="line">&gt;ccccc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 启动新的消费者</span></span><br><span class="line">[root@elk02:1 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic new --from-beginning --group dev</span><br><span class="line"></span><br><span class="line">此时没有新的数据，因为被同一个组（dev）的第一个消费者已经采集过了</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 写入测试数据</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999999</span><br><span class="line">&gt;aaaaaaaa</span><br><span class="line">&gt;vbbbbbb</span><br><span class="line">&gt;ccccc</span><br><span class="line">&gt;9999999999</span><br><span class="line">&gt;69696969696</span><br></pre></td></tr></table></figure><p><strong>停止所有消费者，只写入数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;h</span><br><span class="line">&gt;h</span><br><span class="line">&gt;asasasasasasas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看详细数据</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --group dev --describe</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029230457830.png" alt="image-20241029230457830"></p><h2 id="kafka数据丢失分析">kafka数据丢失分析</h2><blockquote><p>见图解</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kafka的ISR列表导致数据丢失的原因：</span><br><span class="line">ISR:</span><br><span class="line">和leader副本同步的所有副本集合。</span><br><span class="line">OSR:</span><br><span class="line">和leader副本不同步所有副本集合。</span><br><span class="line">AR:</span><br><span class="line">所有副本，指的是leader  + follower，即AR = ISR + OSR </span><br><span class="line">LEO:</span><br><span class="line">英文全称为: LOG-END-OFFSET，表示每个partition最后一个Offset。</span><br><span class="line">HW:</span><br><span class="line">表示在ISR列表中所有LEO中最小的LEO。</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/kafka-ISR.png" alt="kafka-ISR"></p>]]></content>
    
    
    <summary type="html">本章介绍了Kafka的生产者和消费者如何发起数据和收集数据，并且分析数据延迟</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
</feed>
