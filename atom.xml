<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风筝上的猫</title>
  
  
  <link href="https://lukme.top/atom.xml" rel="self"/>
  
  <link href="https://lukme.top/"/>
  <updated>2024-10-30T04:02:48.777Z</updated>
  <id>https://lukme.top/</id>
  
  <author>
    <name>Luay🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>14.基于kafka的日志收集</title>
    <link href="https://lukme.top/posts/b922fe1d.html"/>
    <id>https://lukme.top/posts/b922fe1d.html</id>
    <published>2024-10-30T02:46:01.000Z</published>
    <updated>2024-10-30T04:02:48.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="filebeat写入数据到kafka集群"><a href="#filebeat写入数据到kafka集群" class="headerlink" title="filebeat写入数据到kafka集群"></a>filebeat写入数据到kafka集群</h2><p><strong>1. 创建topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-topics.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic linux-study.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@elk01:5 ~]# kafka-topics.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --describe</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030003043850.png" alt="image-20241030003043850"></p><p><strong>2. filebeat写入数据到kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/20-filebeat-to-kafka.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">  - <span class="built_in">type</span>: filestream</span><br><span class="line">    paths:</span><br><span class="line">      - /opt/access.log*</span><br><span class="line">  </span><br><span class="line">output.kafka:</span><br><span class="line">  <span class="comment"># 指定kafka集群地址</span></span><br><span class="line">  hosts: [<span class="string">&quot;10.0.0.211:9092&quot;</span>, <span class="string">&quot;10.0.0.212:9092&quot;</span>, <span class="string">&quot;10.0.0.213:9092&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 指定写入的topic地址</span></span><br><span class="line">  topic: <span class="string">&#x27;linux-study&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动filebeat实例</span></span><br><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/20-filebeat-to-kafka.yaml</span><br></pre></td></tr></table></figure><p><strong>3. kafka节点测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]#  kafka-console-consumer.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --from-beginning --group filebeat01</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030004427518.png" alt="image-20241030004427518"></p><h2 id="logstash从kafka集群读取数据"><a href="#logstash从kafka集群读取数据" class="headerlink" title="logstash从kafka集群读取数据"></a>logstash从kafka集群读取数据</h2><p><strong>1.编写logstash实例 </strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># elasticsearch&#123;</span></span><br><span class="line"> <span class="comment">#    hosts =&gt; [&quot;10.0.0.91:9200&quot;,&quot;10.0.0.92:9200&quot;,&quot;10.0.0.93:9200&quot;]</span></span><br><span class="line"> <span class="comment">#    index =&gt; &quot;oldboyedu-kafka-elk-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"> <span class="comment">#    user =&gt; &quot;elastic&quot;</span></span><br><span class="line"> <span class="comment">#    password =&gt; &quot;123456&quot;</span></span><br><span class="line"> <span class="comment">#  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 启动logstash实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# logstash -rf /etc/logstash/conf.d/17-kafka-to-logstash.conf </span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T17:05:27.448Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;&#123;\&quot;@timestamp\&quot;:\&quot;2024-10-29T16:39:24.279Z\&quot;,\&quot;@metadata\&quot;:&#123;\&quot;beat\&quot;:\&quot;filebeat\&quot;,\&quot;type\&quot;:\&quot;_doc\&quot;,\&quot;version\&quot;:\&quot;7.17.23\&quot;&#125;,\&quot;log\&quot;:&#123;\&quot;offset\&quot;:20478,\&quot;file\&quot;:&#123;\&quot;path\&quot;:\&quot;/opt/access.log\&quot;&#125;&#125;,\&quot;message\&quot;:\&quot;109.110.162.51 - - [04/Oct/2024:10:00:41 +0800] \\\&quot;GET / HTTP/1.1\\\&quot; 304 0 \\\&quot;-\\\&quot; \\\&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1 Edg/129.0.0.0\\\&quot;\&quot;,\&quot;input\&quot;:&#123;\&quot;type\&quot;:\&quot;filestream\&quot;&#125;,\&quot;ecs\&quot;:&#123;\&quot;version\&quot;:\&quot;1.12.0\&quot;&#125;,\&quot;host\&quot;:&#123;\&quot;name\&quot;:\&quot;elk01\&quot;&#125;,\&quot;agent\&quot;:&#123;\&quot;id\&quot;:\&quot;0f020f85-7619-4e85-83ae-346d91b5ca57\&quot;,\&quot;name\&quot;:\&quot;elk01\&quot;,\&quot;type\&quot;:\&quot;filebeat\&quot;,\&quot;version\&quot;:\&quot;7.17.23\&quot;,\&quot;hostname\&quot;:\&quot;elk01\&quot;,\&quot;ephemeral_id\&quot;:\&quot;ed96638d-32ee-4ee0-afbb-504643c3d52a\&quot;&#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030010834508.png" alt="image-20241030010834508"></p><p><strong>3. 优化logstash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#对message字段进行json格式化</span></span><br><span class="line">filter &#123;</span><br><span class="line">  json &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;message&quot;</span></span><br><span class="line">    <span class="comment">#移除不需要的字段，不然像下面一样出现很多没有价值的字段</span></span><br><span class="line">   <span class="comment"># remove_field =&gt; [ &quot;input&quot;,&quot;host&quot;,&quot;agent&quot;,&quot;@version&quot;,&quot;log&quot;, &quot;ecs&quot; ]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果展示</span></span><br><span class="line"></span><br><span class="line">         <span class="string">&quot;agent&quot;</span> =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hostname&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">             <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ephemeral_id&quot;</span> =&gt; <span class="string">&quot;9a1e6795-8fe4-476b-ba6b-9d91b41f282c&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;1b86f9d4-c41a-4c30-8b3c-c921ed07d026&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">         <span class="string">&quot;input&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filestream&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T16:40:45.156Z,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">           <span class="string">&quot;ecs&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">           <span class="string">&quot;log&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;offset&quot;</span> =&gt; 27088,</span><br><span class="line">          <span class="string">&quot;file&quot;</span> =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/opt/access.log&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#移除字段后展示</span></span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T16:40:45.156Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;150.109.253.34 - - [04/Oct/2024:10:01:27 +0800] \&quot;GET /app HTTP/1.1\&quot; 404 197 \&quot;-\&quot; \&quot;Mozilla/5.0 (Linux; Android 8.0.0; SM-G955U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36 Edg/129.0.0.0\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>4. 正常操作优化,并输出到es集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#对message字段进行json格式化</span></span><br><span class="line">filter &#123;</span><br><span class="line">  json &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;message&quot;</span></span><br><span class="line">    <span class="comment">#移除不需要的字段</span></span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;input&quot;</span>,<span class="string">&quot;host&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;@version&quot;</span>,<span class="string">&quot;log&quot;</span>, <span class="string">&quot;ecs&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 基于正则匹配任意文本，grok内置了120种匹配模式</span></span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;HTTPD_COMBINEDLOG&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  useragent &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;agent&quot;</span></span><br><span class="line">    target =&gt; <span class="string">&quot;agent-kind&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  geoip &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;clientip&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">date</span> &#123;</span><br><span class="line">    match =&gt; [ <span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  elasticsearch&#123;</span><br><span class="line">     hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">     index =&gt; <span class="string">&quot;kafka-elk-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">     user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">     password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030013045764.png" alt="image-20241030013045764"></p>]]></content>
    
    
    <summary type="html">本章介绍了基于ELFK架构+kafka收集日志处理</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>13.使用supervisor管理服务</title>
    <link href="https://lukme.top/posts/1267bcfa.html"/>
    <id>https://lukme.top/posts/1267bcfa.html</id>
    <published>2024-10-30T02:45:01.000Z</published>
    <updated>2024-10-30T04:02:43.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用supervisor管理服务"><a href="#使用supervisor管理服务" class="headerlink" title="使用supervisor管理服务"></a>使用supervisor管理服务</h2><p><strong>1. 下载supervisor</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]#  apt -y install supervisor</span><br></pre></td></tr></table></figure><p><strong>2. 启动服务并设置开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]#  systemctl start supervisor</span><br><span class="line">[root@elk02:0 ~]#  systemctl <span class="built_in">enable</span> supervisor</span><br></pre></td></tr></table></figure><p><strong>3.修改supervisor配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# vim /etc/supervisor/supervisord.conf</span><br><span class="line">···</span><br><span class="line"><span class="comment"># 以后需要配置的服务只需要放在/etc/supervisor/下，以.ini结尾的都可被supervisor管理</span></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/*.ini</span><br></pre></td></tr></table></figure><p><strong>4.编辑ini配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/supervisor/zk.ini </span><br><span class="line">[program:zookeeper]</span><br><span class="line"><span class="built_in">command</span>=/app/zookeeper/bin/zkServer.sh start-foreground</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stderr_logfile=/var/log/zookeeper.err.log</span><br><span class="line">stdout_logfile=/var/log/zookeeper.out.log</span><br><span class="line">user=root</span><br><span class="line">priority=1</span><br><span class="line">environment=JAVA_HOME=<span class="string">&quot;/usr/share/elasticsearch/jdk/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意修改zookeeper的安装路径，以及javahome路径   （使用  echo $JAVA_HOME 查看java环境 ）</span></span><br><span class="line">[root@elk01:2 ~]# <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/usr/share/elasticsearch/jdk</span><br></pre></td></tr></table></figure><p><strong>5. 更新supervisor配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# supervisorctl update</span><br><span class="line"></span><br><span class="line">注意：每次跟新服务配置都需要update</span><br></pre></td></tr></table></figure><p><strong>6.supervisor管理命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl start zookeeper</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl stop zookeeper</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动或者停止所有服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl start/stop all</span><br><span class="line"></span><br><span class="line">友情提示：</span><br><span class="line">  如果你的zookeeper是使用zkServer.sh start 启动的，要先使用zkServer.sh stop关闭服务，不能使用zkServer启动服务，使用supervisor去关闭服务</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍了使用supervisor统一管理zookeeper和kafka，相比systemd管理更加方便</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>12.kafka的脚本管理及数据延迟、丢失分析</title>
    <link href="https://lukme.top/posts/70dc5443.html"/>
    <id>https://lukme.top/posts/70dc5443.html</id>
    <published>2024-10-30T02:44:01.000Z</published>
    <updated>2024-10-30T04:02:38.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka的脚本管理"><a href="#kafka的脚本管理" class="headerlink" title="kafka的脚本管理"></a>kafka的脚本管理</h2><h3 id="topic管理"><a href="#topic管理" class="headerlink" title="topic管理"></a>topic管理</h3><p><strong>1.查看topic列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --list </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.创建topic </strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic luay.</span><br><span class="line"></span><br><span class="line"><span class="comment">#注释：</span></span><br><span class="line">--topic  luay           <span class="comment">#指定topic为luay</span></span><br><span class="line">--partitions 3          <span class="comment">#创建3个分区</span></span><br><span class="line">--replication-factor 2  <span class="comment">#创建2个副本</span></span><br><span class="line">--create                <span class="comment">#动作--创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#其它选项</span></span><br><span class="line">--delete                <span class="comment">#删除</span></span><br><span class="line">--alter                 <span class="comment">#修改</span></span><br><span class="line">--describe              <span class="comment">#输出详细信息</span></span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029180717295.png" alt="image-20241029180717295"></p><p><strong>3.修改分区数量【只能由小变大，不能由大变小】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --partitions 5 --alter</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029180957289.png" alt="image-20241029180957289"></p><p><strong>4.查看指定topic的详细信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --describe</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029181157071.png" alt="image-20241029181157071"></p><p><strong>5.删除topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#kafka数据目录里topic会被标记-delete，等待一会便会自动删除</span></span><br><span class="line">[root@elk01:1 ~]# ll /app/data/kafka/</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 29 18:15 luay-1.2baa4b610f314befbfbed58aaad84052-delete/</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 29 18:15 luay-2.0f44f4821a1849ccb7e0e37e1fe65ff4-delete/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="producer管理"><a href="#producer管理" class="headerlink" title="producer管理"></a>producer管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt;999999</span><br><span class="line">[2024-10-29 20:49:30,357] WARN [Producer clientId=console-producer] Error <span class="keyword">while</span> fetching metadata with correlation <span class="built_in">id</span> 7 : &#123;<span class="built_in">test</span>=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class="line"></span><br><span class="line"><span class="comment">#首次写入时，若topic不存在，则kafka集群默认会自动创建。</span></span><br><span class="line">[root@elk02:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --list</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="kafka的consumer管理"><a href="#kafka的consumer管理" class="headerlink" title="kafka的consumer管理"></a>kafka的consumer管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生产者发送消息</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt;12112112</span><br><span class="line">&gt;666666</span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者接收消息---接收现在开始的消息</span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">666666</span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者接收消息---从头接收消息    --from-beginning </span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span> --from-beginning </span><br><span class="line">999999</span><br><span class="line">12112112</span><br><span class="line">666666</span><br></pre></td></tr></table></figure><h2 id="消费者组理念"><a href="#消费者组理念" class="headerlink" title="消费者组理念"></a>消费者组理念</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- kafka的消费者组概念</span><br><span class="line">1.kafka的offset存储位置</span><br><span class="line">kafka早期版本 0.9-版本，offset记录存储在zookeeper集群。</span><br><span class="line">从kafka 0.10+版本，默认的offset存储在kafka集群，存储在一个名为<span class="string">&quot;__consumer_offsets&quot;</span>内置的topic。(当消费者出现宕机，当前当前组里的其它消费者会从_consumer_offsets记录的偏移量里，找到已经取到哪里的数据，从此点继续往后取数据，而不是从新取所有数据，避免数据重复采集)</span><br><span class="line"></span><br><span class="line">2.相关术语</span><br><span class="line">consumer group：    消费者组，任意一个消费者都隶属于一个消费者组。</span><br><span class="line"></span><br><span class="line">1.而<span class="string">&quot;__consumer_offsets&quot;</span>内置的topic记录的偏移量并不属于某个消费者，而是基于消费者进行记录的。</span><br><span class="line">2.当消费者组的消费者数量发生变化时，会触发重平衡(Rebalance);</span><br><span class="line">  1.比如消费者组的消费者（C1/C2）新增或者下线，所谓的重平衡指的是该消费者组的消费者重新分配分区（0分区,1分区,2分区过程。</span><br><span class="line">  2.该消费者组若新增了消费者，也会触发重平衡;</span><br><span class="line">  3.当消费者组的数量多余partition数量时，则会导致该消费者组有空闲的消费者;（假设5个消费者，但是只有3个分区)</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/consumer_group.png" alt="consumer_group"></p><h2 id="kafka消费者组数据延迟分析"><a href="#kafka消费者组数据延迟分析" class="headerlink" title="kafka消费者组数据延迟分析"></a>kafka消费者组数据延迟分析</h2><p>由图解，kafka的消费者是logstash，怎么会出现数据延迟呢？</p><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/ElasticStack_MQ.png" alt="ElasticStack_MQ"></p><blockquote><p>当生产者过多，logstash忙不过来时候收集，就会出现数据延迟可能</p></blockquote><p>理论存在，分析实践</p><p><strong>1. 查看现有的消费者组列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --list</span><br><span class="line">console-consumer-10558</span><br><span class="line">console-consumer-73547</span><br><span class="line">console-consumer-4558</span><br></pre></td></tr></table></figure><p><strong>2.创建topic指定分区和副本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03:0 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic new --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic new.</span><br></pre></td></tr></table></figure><p><strong>3.启动生产者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999</span><br></pre></td></tr></table></figure><p><strong>4.启动消费者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 启动第一个消费者，指定消费者组</span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic new --from-beginning --group dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看消费者列表</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --list</span><br><span class="line">dev</span><br><span class="line">console-consumer-10558</span><br><span class="line">console-consumer-73547</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看指定消费者的详细信息</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --group dev --describe</span><br><span class="line">GROUP           TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG</span><br><span class="line">dev             new             0          0               0               0  </span><br><span class="line">dev             new             1          0               0               0  </span><br><span class="line">dev             new             2          1               0               0  </span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029224849054.png" alt="image-20241029224849054"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.生产者继续写入测试数据</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999999</span><br><span class="line">&gt;aaaaaaaa</span><br><span class="line">&gt;vbbbbbb</span><br><span class="line">&gt;ccccc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 启动新的消费者</span></span><br><span class="line">[root@elk02:1 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic new --from-beginning --group dev</span><br><span class="line"></span><br><span class="line">此时没有新的数据，因为被同一个组（dev）的第一个消费者已经采集过了</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 写入测试数据</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999999</span><br><span class="line">&gt;aaaaaaaa</span><br><span class="line">&gt;vbbbbbb</span><br><span class="line">&gt;ccccc</span><br><span class="line">&gt;9999999999</span><br><span class="line">&gt;69696969696</span><br></pre></td></tr></table></figure><p><strong>停止所有消费者，只写入数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;h</span><br><span class="line">&gt;h</span><br><span class="line">&gt;asasasasasasas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看详细数据</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --group dev --describe</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029230457830.png" alt="image-20241029230457830"></p><h2 id="kafka数据丢失分析"><a href="#kafka数据丢失分析" class="headerlink" title="kafka数据丢失分析"></a>kafka数据丢失分析</h2><blockquote><p>见图解</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kafka的ISR列表导致数据丢失的原因：</span><br><span class="line">ISR:</span><br><span class="line">和leader副本同步的所有副本集合。</span><br><span class="line">OSR:</span><br><span class="line">和leader副本不同步所有副本集合。</span><br><span class="line">AR:</span><br><span class="line">所有副本，指的是leader  + follower，即AR = ISR + OSR </span><br><span class="line">LEO:</span><br><span class="line">英文全称为: LOG-END-OFFSET，表示每个partition最后一个Offset。</span><br><span class="line">HW:</span><br><span class="line">表示在ISR列表中所有LEO中最小的LEO。</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/kafka-ISR.png" alt="kafka-ISR"></p>]]></content>
    
    
    <summary type="html">本章介绍了Kafka的生产者和消费者如何发起数据和收集数据，并且分析数据延迟</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>11.kafka介绍及部署</title>
    <link href="https://lukme.top/posts/35ea5361.html"/>
    <id>https://lukme.top/posts/35ea5361.html</id>
    <published>2024-10-30T02:43:01.000Z</published>
    <updated>2024-11-17T16:05:52.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka介绍"><a href="#kafka介绍" class="headerlink" title="kafka介绍"></a>kafka介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Kafka 被称为下一代分布式消息系统，由 Scala 和 Java编写，是非营利性组织ASF(Apache Software Foundation)基金会中的一个开源项目，比如:HTTP Server、Tomcat、Hadoop、ActiveMQ等开源软件都属于 Apache基金会的开源软件，类似的消息系统还有RabbitMQ、ActiveMQ、ZeroMQ。</span><br><span class="line">Kafka用于构建实时数据管道和流应用程序。 它具有水平可伸缩性，容错性，快速性，可在数千家组织中同时投入生产协同工作。</span><br></pre></td></tr></table></figure><h2 id="kafka常见术语"><a href="#kafka常见术语" class="headerlink" title="kafka常见术语"></a>kafka常见术语</h2><p>:dango:  <strong>1.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- topic:</span><br><span class="line">表示是主题，对应是逻辑存储单元，一般用于区分业务类型。可以和ES的索引对应。</span><br><span class="line">- partition</span><br><span class="line">分区，一个topic对应一个或多个partition。</span><br><span class="line">- replica:</span><br><span class="line">是数据的实际载体，真正存储数据的资源，分为leader和follower，其中leader对外提供读写，而follower负责数据的同步。</span><br><span class="line">- producer:</span><br><span class="line">生产者，往kafka集群写数据的一方。</span><br><span class="line">- consumer:</span><br><span class="line">消费者，从kafka读取数据的一方。</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/topic.png" alt="topic"></p><blockquote><p>读取数据只能去leader读取，follow值负责同步数据</p></blockquote><p>:dango:<strong>2. 角色介绍</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">（1）Producer：Producer即生产者，消息的产生者，是消息的入口。负责发布消息到Kafka broker</span><br><span class="line">（2）Consumer：消费者，用于消费消息，即处理消息</span><br><span class="line"></span><br><span class="line">Broker：Broker是kafka实例，每个服务器上可以有一个或多个kafka的实例，假设每个broker对应一台服务器。每个kafka集群内的broker都有一个不重复的编号，如: broker-0、broker-1等……</span><br><span class="line"></span><br><span class="line">（3）Topic ：消息的主题，可以理解为消息的分类，一个Topic相当于数据库中的一张表,一条消息相当于关系数据库的一条记录，一个Topic或者相当于Redis中列表类型的一个Key，一条消息即为列表中的一个元素。kafka的数据就保存在topic。在每个broker上都可以创建多个topic。物理上不同 topic 的消息分开存储在不同的文件夹，逻辑上一个 topic的消息虽然保存于一个或多个broker 上, 但用户只需指定消息的topic即可生产或消费数据而不必关心数据存于何处，topic 在逻辑上对record(记录、日志)进行分组保存，消费者需要订阅相应的topic 才能消费topic中的消息</span><br><span class="line"></span><br><span class="line">（4）Consumer group: 每个consumer 属于一个特定的consumer group（可为每个consumer 指定 group name，若不指定 group name 则属于默认的group），同一topic的一条消息只能被同一个consumer group 内的一个consumer 消费，类似于一对一的单播机制，但多个consumer group 可同时消费这一消息，类似于一对多的多播机制</span><br><span class="line"></span><br><span class="line">（5）Partition ：是物理上的概念，每个topic 分割为一个或多个partition，即一个topic切分为多份.创建 topic时可指定 partition 数量，partition的表现形式就是一个一个的文件夹,该文件夹下存储该partition的数据和索引文件，分区的作用还可以实现负载均衡，提高kafka的吞吐量。同一个topic在不同的分区的数据是不重复的,一般Partition数不要超过节点数，注意同一个partition数据是有顺序的，但不同的partition则是无序的</span><br><span class="line"></span><br><span class="line">（6）Replication: 同样数据的副本，包括leader和follower的副本数,基本于数据安全,建议至少2个,是Kafka的高可靠性的保障，和ES的副本有所不同，Kafka中的副本数包括主分片数,而ES中的副本数不包括主分片数</span><br><span class="line"></span><br><span class="line">为了实现数据的高可用，比如将分区 0 的数据分散到不同的kafka 节点，每一个分区都有一个 broker 作为 Leader 和一个 broker 作为Follower，类似于ES中的主分片和副本分片。</span><br><span class="line"></span><br><span class="line">假设分区为 3, 即分三个分区0-2，副本为3，即每个分区都有一个 leader，再加两个follower，分区 0 的leader为服务器A，则服务器 B 和服务器 C 为 A 的follower，而分区 1 的leader为服务器B，则服务器 A 和C 为服务器B 的follower，而分区 2 的leader 为C，则服务器A 和 B 为C 的follower。</span><br><span class="line"></span><br><span class="line">AR： Assigned Replicas，分区中的所有副本的统称，包括leader和 follower，AR= lSR+ OSR</span><br><span class="line">lSR：<span class="built_in">ln</span> Sync Replicas，所有与leader副本保持同步的副本 follower和leader本身组成的集合，包括leader和 follower，是AR的子集</span><br><span class="line">OSR：out-of-Sync Replied，所有与leader副本同步不能同步的 follower的集合，是AR的子集</span><br></pre></td></tr></table></figure><p>:dango: 3. 分区和副本的优势</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实现存储空间的横向扩容，即将多个kafka服务器的空间组合利用</span><br><span class="line">提升性能，多服务器并行读写</span><br><span class="line">实现高可用，每个分区都有一个主分区即 leader 分布在不同的kafka 服务器，并且有对应follower 分布在和leader不同的服务器上</span><br></pre></td></tr></table></figure><p>:dango: <strong>4. kafka写入消息流程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">生产者（producter）先从kafka集群获取分区的leader</span><br><span class="line">生产者（producter）将消息发送给leader</span><br><span class="line">leader将消息写入本地文件</span><br><span class="line">followers从leader pull消息</span><br><span class="line">followers将消息写入本地后向leader发送ACK</span><br><span class="line">leader收到所有副本的ACK后向producter发送ACK</span><br></pre></td></tr></table></figure><p>:dango:  <strong>5. kafka特点和优势</strong></p><blockquote><p><code>特点：</code><br>分布式: 多机实现,不允许单机<br>分区: 一个消息.可以拆分出多个，分别存储在多个位置<br>多副本: 防止信息丢失，可以多来几个备份<br>多订阅者: 可以有很多应用连接kafka<br>Zookeeper: 早期版本的Kafka依赖于zookeeper， 2021年4月19日Kafka 2.8.0正式发布，此版本包括了很多重要改动，最主要的是kafka通过自我管理的仲裁来替代ZooKeeper，即Kafka将不再需要ZooKeeper！！！</p><p><code>优势：</code><br>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。支持通过Kafka 服务器分区消息。<br>分布式： Kafka 基于分布式集群实现高可用的容错机制，可以实现自动的故障转移。<br>顺序保证：在大多数使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。 Kafka保证一个Partiton内的消息的有序性（分区间数据是无序的，如果对数据的顺序有要求，应将在创建主题时将分区数partitions设置为1）。<br>支持 Hadoop 并行数据加载。<br>通常用于大数据场合,传递单条消息比较大，而Rabbitmq 消息主要是传输业务的指令数据,单条数据较小。</p></blockquote><h2 id="单点部署kafka"><a href="#单点部署kafka" class="headerlink" title="单点部署kafka"></a>单点部署kafka</h2><p><strong>1.下载kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]#wget https://downloads.apache.org/kafka/3.8.0/kafka_2.13-3.8.0.tgz</span><br></pre></td></tr></table></figure><p><strong>2.解压kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# tar xf kafka_2.13-3.8.0.tgz -C /app/</span><br></pre></td></tr></table></figure><p><strong>3.修改kafka的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# vim /app/kafka_2.13-3.8.0/config/server.properties </span><br><span class="line">···</span><br><span class="line"><span class="comment"># 修改kafka的broker的ID信息</span></span><br><span class="line">broker.id=211</span><br><span class="line"><span class="comment"># 修改数据目录</span></span><br><span class="line">log.dirs=/app/data/kafka</span><br><span class="line"><span class="comment"># 修改元数据存储zookeeper集群地址</span></span><br><span class="line">zookeeper.connect=10.0.0.211:2181,10.0.0.212:2181,10.0.0.213:2181/kafka380</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;注释：&#x27;</span></span><br><span class="line">/kafka380   是将以后的znode都放在kafka380下，不指定则默认都在zookeeper的 / 下</span><br></pre></td></tr></table></figure><p><strong>4.配置环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# <span class="built_in">cat</span>  /etc/profile.d/kafka.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/app/kafka_2.13-3.8.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$KAFKA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载环境变量</span></span><br><span class="line">[root@elk01:4 ~]# <span class="built_in">source</span> /etc/profile.d/kafka.sh </span><br></pre></td></tr></table></figure><p><strong>5.启动kafka节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:4 ~]# kafka-server-start.sh -daemon <span class="variable">$KAFKA_HOME</span>/config/server.properties</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241029000747486.png" alt="image-20241029000747486"></p><h2 id="kafka配置文件详解"><a href="#kafka配置文件详解" class="headerlink" title="kafka配置文件详解"></a>kafka配置文件详解</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This configuration file is intended for use in ZK-based mode, where Apache ZooKeeper is required.</span></span><br><span class="line"><span class="comment"># See kafka.server.KafkaConfig for additional details and defaults</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Server Basics #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># broker 的全局唯一编号，不能重复，只能是数字。</span></span><br><span class="line">broker.id=0</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Socket Server Settings #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 套接字服务器侦听的地址。如果未配置，主机名将等于的值</span></span><br><span class="line"><span class="comment"># java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.</span></span><br><span class="line"><span class="comment">#   FORMAT:</span></span><br><span class="line"><span class="comment">#     listeners = listener_name://host_name:port</span></span><br><span class="line"><span class="comment">#   EXAMPLE:</span></span><br><span class="line"><span class="comment">#     listeners = PLAINTEXT://your.host.name:9092</span></span><br><span class="line"><span class="comment">#listeners=PLAINTEXT://:9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侦听器名称、主机名和代理将向客户端公布的端口。</span></span><br><span class="line"><span class="comment"># 如果未设置，则使用“listeners”的值。</span></span><br><span class="line"><span class="comment">#advertised.listeners=PLAINTEXT://your.host.name:9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将侦听器名称映射到安全协议，默认情况下它们是相同的。有关更多详细信息，请参阅配置文档</span></span><br><span class="line"><span class="comment">#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理网络请求的线程数量(服务器用于从网络接收请求并向网络发送响应的线程数)</span></span><br><span class="line">num.network.threads=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来处理磁盘 IO 的线程数量</span></span><br><span class="line">num.io.threads=8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送套接字的缓冲区大小</span></span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收套接字的缓冲区大小</span></span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求套接字的缓冲区最大大小</span></span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Basics #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kafka 运行日志(数据)存放的路径,路径不需要提前创建,kafka 自动帮你创建,可以配置多个磁盘路径,路径与路径之间可以用&quot;,&quot;分隔</span></span><br><span class="line">log.dirs=/usr/kafka/kafka_2.13-3.6.1/datas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个topic在当前 broker上的默认分区数。更多的分区允许更大的并行性以供使用，但这也会导致代理之间有更多的文件。</span></span><br><span class="line">num.partitions=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动时用于日志恢复和关闭时用于刷新的每个数据目录的线程数。(用来恢复和清理 data 下数据的线程数量)对于数据目录位于RAID阵列中的安装，建议增加此值。</span></span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Internal Topic Settings  #############################</span></span><br><span class="line"><span class="comment"># 每个 topic 创建时的副本数，默认时 1 个副本,对于开发测试以外的环境，建议使用大于1的值以确保可用性，如3</span></span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Flush Policy #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Messages are immediately written to the filesystem but by default we only fsync() to sync</span></span><br><span class="line"><span class="comment"># the OS cache lazily. The following configurations control the flush of data to disk.</span></span><br><span class="line"><span class="comment"># There are a few important trade-offs here:</span></span><br><span class="line"><span class="comment">#    1. Durability: Unflushed data may be lost if you are not using replication.</span></span><br><span class="line"><span class="comment">#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.</span></span><br><span class="line"><span class="comment">#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.</span></span><br><span class="line"><span class="comment"># The settings below allow one to configure the flush policy to flush data after a period of time or</span></span><br><span class="line"><span class="comment"># every N messages (or both). This can be done globally and overridden on a per-topic basis.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制将数据刷新到磁盘之前要接受的消息数</span></span><br><span class="line"><span class="comment">#log.flush.interval.messages=10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在强制刷新之前，消息可以在日志中停留的最长时间</span></span><br><span class="line"><span class="comment">#log.flush.interval.ms=1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Retention Policy #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following configurations control the disposal of log segments. The policy can</span></span><br><span class="line"><span class="comment"># be set to delete segments after a period of time, or after a given size has accumulated.</span></span><br><span class="line"><span class="comment"># A segment will be deleted whenever *either* of these criteria are met. Deletion always happens</span></span><br><span class="line"><span class="comment"># from the end of the log.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># segment 文件保留的最长时间，超时将被删除</span></span><br><span class="line">log.retention.hours=168</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于大小的日志保留策略。除非剩余的</span></span><br><span class="line"><span class="comment"># segments下降到 log.retention.bytes 以下。独立于log.retention.hours的函数.</span></span><br><span class="line"><span class="comment">#log.retention.bytes=1073741824</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个 segment 文件的最大大小，默认最大 1G ，当达到此大小时，将创建一个新的segment。</span></span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查日志段以查看是否可以根据保留策略删除它们的间隔(检查过期数据的时间，默认 5 分钟检查一次是否数据过期)</span></span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Zookeeper #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Zookeeper集群连接字符串,一个以逗号分隔的&#x27;主机:端口&#x27;对，每个对对应一个zk服务器。可以在url中附加一个可选的chroot字符串，以指定所有kafka-znode的根目录。</span></span><br><span class="line">zookeeper.connect=10.0.0.211:2181,10.0.0.212:2181,10.0.0.213:2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到zookeeper 的超时时间（毫秒）</span></span><br><span class="line">zookeeper.connection.timeout.ms=18000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Group Coordinator Settings #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下配置指定GroupCoordinator将延迟初始使用者重新平衡的时间（以毫秒为单位）。</span></span><br><span class="line"><span class="comment"># 随着新成员加入组，再平衡将进一步延迟group.initial.rebalance.delay.ms的值，最大值为max.poll.interval.ms。</span></span><br><span class="line"><span class="comment"># 默认值为3秒。</span></span><br><span class="line"><span class="comment"># 我们在这里将其覆盖为0，因为它为开发和测试提供了更好的开箱即用体验。</span></span><br><span class="line"><span class="comment"># 但是，在生产环境中，默认值3秒更合适，因为这将有助于避免在应用程序启动期间进行不必要的、可能代价高昂的重新平衡。</span></span><br><span class="line">group.initial.rebalance.delay.ms=3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署kafka集群"><a href="#部署kafka集群" class="headerlink" title="部署kafka集群"></a>部署kafka集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重复单点部署的1-6步骤，不过需要注意的是，配置文件的broker.id=211/212/213  根据你的ip后尾自行修改(三个节点不相同，且为正整数就行)</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示：三个  节点做hosts解析,将主机名解析到你的ip上，巨坑，一开始忘记反向解析这个问题了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk211 ~]# <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">10.0.0.211 elk01</span></span><br><span class="line"><span class="string">10.0.0.212 elk02</span></span><br><span class="line"><span class="string">10.0.0.213 elk03</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241029185857776.png" alt="image-20241029185857776"></p><p>以此为戒。。。。。。巨坑</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241029002841827.png" alt="image-20241029002841827"></p><blockquote><p>我们配置文件里没有指定每个kafka的地址，那它们是如何找到彼此的呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:4 ~]# grep -Ev <span class="string">&#x27;^#|^$&#x27;</span> /app/kafka_2.13-3.8.0/config/server.properties </span><br><span class="line">broker.id=211</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/app/data/kafka</span><br><span class="line">num.partitions=1</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=10.0.0.211:2181,10.0.0.212:2181,10.0.0.213:2181/kafka380</span><br><span class="line">zookeeper.connection.timeout.ms=18000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><font color=red>kafka通过连接zookeeper，去找到各个kafka</font></blockquote>]]></content>
    
    
    <summary type="html">本章介绍了Kafka的作用,优势,角色以及如何部署kafka集群</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>10.zookeeper的图形化管理</title>
    <link href="https://lukme.top/posts/da2b0f43.html"/>
    <id>https://lukme.top/posts/da2b0f43.html</id>
    <published>2024-10-30T02:42:01.000Z</published>
    <updated>2024-10-30T04:02:29.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zookeeper的类型"><a href="#zookeeper的类型" class="headerlink" title="zookeeper的类型"></a>zookeeper的类型</h2><ol><li>临时znode类型</li></ol><p>当客户端会话断开连接，若在规定时间(默认是30s)内没有重新连接则该客户端创建的所有znode都会被删除。</p><ol><li>永久znode</li></ol><p>当客户端会话断开连接，znode不会被删除。</p><blockquote><p>默认创建的znode都是永久的，如果想要创建临时znode，则需要指定”-e”参数。</p></blockquote><p><strong>验证测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看znode状态信息</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] <span class="built_in">stat</span> /luay</span><br><span class="line">cZxid = 0x400000002</span><br><span class="line">ctime = Mon Oct 28 13:09:07 UTC 2024</span><br><span class="line">mZxid = 0x40000000e</span><br><span class="line">mtime = Mon Oct 28 13:11:34 UTC 2024</span><br><span class="line">pZxid = 0x40000000b</span><br><span class="line">cversion = 5</span><br><span class="line">dataVersion = 3</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#临时创建znode</span></span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create -e /abc</span><br><span class="line">Created /abc</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] <span class="built_in">stat</span> /abc</span><br><span class="line">cZxid = 0xf00000002</span><br><span class="line">ctime = Mon Oct 28 14:23:04 UTC 2024</span><br><span class="line">mZxid = 0xf00000002</span><br><span class="line">mtime = Mon Oct 28 14:23:04 UTC 2024</span><br><span class="line">pZxid = 0xf00000002</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0xd500028c8caa0000</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line">`注意：ephemeralOwner这一行，不是和上面永久znode状态一样，上面永久的是0x0`</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出连接等待30s再次连接查看--没了</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;重新建立链接，默认30s后数据就自动删除！&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="zookeeper的JVM调优"><a href="#zookeeper的JVM调优" class="headerlink" title="zookeeper的JVM调优"></a>zookeeper的JVM调优</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.zookeeper的堆内存调优思路（这里调试128m测试）</span><br><span class="line">生成环境中，建议配置2GB-4GB即可。默认是1GB。</span><br><span class="line"></span><br><span class="line">2.查看默认的堆内存大小</span><br><span class="line">[root@elk03:1 ~]#  ps -ef | grep zookeeper | grep -i xmx</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241028223011825.png" alt="image-20241028223011825"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">3.修改官方的环境变量脚本</span><br><span class="line">[root@elk03:1 ~]# <span class="built_in">cat</span> /app/zookeeper/bin/zkEnv.sh </span><br><span class="line">···</span><br><span class="line"><span class="comment"># default heap for zookeeper server</span></span><br><span class="line">ZK_SERVER_HEAP=<span class="string">&quot;<span class="variable">$&#123;ZK_SERVER_HEAP:-128&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default heap for zookeeper client</span></span><br><span class="line">ZK_CLIENT_HEAP=<span class="string">&quot;<span class="variable">$&#123;ZK_CLIENT_HEAP:-128&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">4. 同步到其它节点</span><br><span class="line">[root@elk03 ~]# scp /app/zookeeper/bin/zkEnv.sh 10.0.0.211:/app/zookeeper/bin/  </span><br><span class="line">[root@elk03 ~]# scp /app/zookeeper/bin/zkEnv.sh 10.0.0.212:/app/zookeeper/bin/</span><br><span class="line"></span><br><span class="line">5.重启zookeeper集群（所有节点）</span><br><span class="line">[root@elk03:1 ~]# zkServer.sh restart</span><br><span class="line"></span><br><span class="line">6.再次查看占用内存大小</span><br><span class="line">[root@elk03 ~]# ps -ef | grep zookeeper | grep -i xmx</span><br></pre></td></tr></table></figure><h2 id="zookeeper的图形化管理"><a href="#zookeeper的图形化管理" class="headerlink" title="zookeeper的图形化管理"></a>zookeeper的图形化管理</h2><p><strong>了解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#依赖1.8版本jdk</span></span><br><span class="line">https://github.com/zhitom/zkweb/releases/download/zkWeb-v1.2.1/zkWeb-v1.2.1.jar</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.解压jdk</span><br><span class="line">[root@elk01 ~]#tar xf jdk-8u291-linux-x64.tar.gz -C /app/</span><br><span class="line"></span><br><span class="line">2.前台启动zkweb</span><br><span class="line">[root@elk01 ~]# /app/jdk1.8.0_291/bin/java -jar /app/zkWeb-v1.2.1.jar </span><br><span class="line"></span><br><span class="line">后台启动：</span><br><span class="line">[root@elk01 ~]# <span class="built_in">nohup</span> /app/jdk1.8.0_291/bin/java -jar /app/zkWeb-v1.2.1.jar &amp;&gt; /tmp/zkweb.log</span><br><span class="line"></span><br><span class="line">3.浏览器访问</span><br><span class="line">10.0.0.211:8099/</span><br></pre></td></tr></table></figure><blockquote><p>注：多个节点直接以   ,  分开  10.0.0.211:2181,10.0.0.212:2181,10.0.0.213:2181</p></blockquote><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241028231813958.png" alt="image-20241028231813958"></p><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241028232321533.png" alt="image-20241028232321533"></p>]]></content>
    
    
    <summary type="html">本章介绍了zookeeper使用图形化管理以及JVM内存调优</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>09.zookeeper集群部署</title>
    <link href="https://lukme.top/posts/1c1f467f.html"/>
    <id>https://lukme.top/posts/1c1f467f.html</id>
    <published>2024-10-30T02:41:01.000Z</published>
    <updated>2024-10-30T04:02:23.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zookeeper作用和应用场景"><a href="#zookeeper作用和应用场景" class="headerlink" title="zookeeper作用和应用场景"></a>zookeeper作用和应用场景</h2><p><strong>1.zookeeper存储什么数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">存储的主要是一些配置信息，可以用于服务注册，服务发现等常见。</span><br><span class="line">zookeeper的存储结构和Linux文件系统很相似，有多级目录。</span><br><span class="line"></span><br><span class="line">和Linux的根文件系统和类似，分为目录和文件，zookeeper也类似，只不过没有文件和目录的区别，而是都称之为zookeeper node，简称znode。</span><br><span class="line"></span><br><span class="line">znode不适合存储大量数据，一个znode默认最大存储2MB的数据。</span><br></pre></td></tr></table></figure><p><strong>2.zookeeper的应用场景</strong></p><p>和kafka，hbase，HDFS，YARN，Dubbo，Solr等服务，提供了配置信息，注册中心等辅助功能。</p><p><strong>ElasticStack架构升级—MQ</strong></p><blockquote><p>filebeat数据采集交给Kafka消息队列，logstash去拉取Kafka里的数据处理交给ES集群</p></blockquote><p><img src="https://cos.lukme.top/Pic/ElasticStack_MQ.png" alt="ElasticStack_MQ"></p><p>消息队列产品</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rocket MQ</span><br><span class="line">Active MQ</span><br><span class="line">Kafka</span><br><span class="line">Rebbit MQ</span><br></pre></td></tr></table></figure><h2 id="zookeeper单点部署"><a href="#zookeeper单点部署" class="headerlink" title="zookeeper单点部署"></a>zookeeper单点部署</h2><p><code>这里仅为测试，可跳过步骤 4,5 直接部署集群，避免单点故障</code></p><blockquote><p>官方版本选择：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><p>zookeeper集群的节点数量选择</p><p>当每秒请求量低于6w/s，读取数据占据70%，大多数是读的场景，官方测试数据建议选择3台集群。</p></blockquote><p><strong>1.下载zookeeper</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# wget https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz</span><br></pre></td></tr></table></figure><p><strong>2.解压软件包 </strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# tar xf apache-zookeeper-3.8.4-bin.tar.gz -C /app/</span><br><span class="line"></span><br><span class="line"><span class="comment">#做软链接</span></span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">ln</span> -s /app/apache-zookeeper-3.8.4-bin/ /app/zookeeper</span><br></pre></td></tr></table></figure><p><strong>3.配置环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# <span class="built_in">cat</span> /etc/profile.d/zk.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/share/elasticsearch/jdk</span><br><span class="line"><span class="built_in">export</span> ZK_HOME=/app/zookeeper</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZK_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载环境变量</span></span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">source</span> /etc/profile.d/zk.sh</span><br></pre></td></tr></table></figure><p><strong>4.准备配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]#  <span class="built_in">cp</span> /app/zookeeper/conf/zoo&#123;_sample,&#125;.cfg </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里只是对配置文件的解读，未修改配置文件，复制出来默认即可</span></span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">cat</span> /app/zookeeper/conf/zoo.cfg </span><br><span class="line"><span class="comment"># 指定最小的时间单位tick，默认单位是毫秒，此处最小单位是1  tick=2s</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># 在集群初始化时的时间默认是10 tick，则表示20s</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># 数据同步时间5 tick，则表示10s</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># 数据的存储目录</span></span><br><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line"><span class="comment"># 服务监听的端口</span></span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure><p><strong>5.启动测试</strong></p><blockquote><p>注意，zookeeper启动会监听8080端口，启动失败注意查看端口冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#排错看日志</span></span><br><span class="line">[root@elk01:3 ~]# ll /app/zookeeper/logs/</span><br><span class="line">-rw-r--r-- 1 root root 16469 Oct 28 17:12 zookeeper-root-server-elk01.out</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">[root@elk01:3 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: standalone</span><br><span class="line"></span><br><span class="line"><span class="comment">#standalone  单点状态</span></span><br></pre></td></tr></table></figure><p><strong>连接测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# zkCli.sh      或者</span><br><span class="line">[root@elk01:3 ~]# zkCli.sh -server 10.0.0.211</span><br><span class="line"></span><br><span class="line">2024-10-28 17:06:31,811 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):o.a.z.ClientCnxn<span class="variable">$SendThread</span>@1453] - Session establishment complete on server localhost/127.0.0.1:2181, session <span class="built_in">id</span> = 0x10001704a360000, negotiated <span class="built_in">timeout</span> = 30000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] <span class="built_in">ls</span> /      <span class="comment">#ls命令测试下</span></span><br><span class="line">[zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#出现它的session id  即为部署成功</span></span><br></pre></td></tr></table></figure><h2 id="zookeeper集群部署"><a href="#zookeeper集群部署" class="headerlink" title="zookeeper集群部署"></a>zookeeper集群部署</h2><blockquote><p>如果zookeeper单点未做，步骤1,3可跳过</p></blockquote><p><strong>1. 停止服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# zkServer.sh stop</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure><p><strong>2.修改配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# <span class="built_in">cat</span> /app/zookeeper/conf/zoo.cfg </span><br><span class="line"><span class="comment"># 定义最小单元的时间范围tick。</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># 启动时最长等待tick数量。</span></span><br><span class="line">initLimit=5</span><br><span class="line"><span class="comment"># 数据同步时最长等待的tick时间进行响应ACK</span></span><br><span class="line">syncLimit=2</span><br><span class="line"><span class="comment"># 指定数据目录</span></span><br><span class="line">dataDir=/app/data/zk</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment"># 开启四字命令允许所有的节点访问。</span></span><br><span class="line">4lw.commands.whitelist=*</span><br><span class="line"><span class="comment"># server.ID=A:B:C[:D]</span></span><br><span class="line"><span class="comment"># ID:</span></span><br><span class="line"><span class="comment">#    zk的唯一编号。</span></span><br><span class="line"><span class="comment"># A:</span></span><br><span class="line"><span class="comment">#    zk的主机地址。</span></span><br><span class="line"><span class="comment"># B:</span></span><br><span class="line"><span class="comment">#    leader的选举端口，是谁leader角色，就会监听该端口。</span></span><br><span class="line"><span class="comment"># C: </span></span><br><span class="line"><span class="comment">#    数据通信端口。</span></span><br><span class="line"><span class="comment"># D:</span></span><br><span class="line"><span class="comment">#    可选配置，指定角色。</span></span><br><span class="line">server.91=10.0.0.211:2888:3888</span><br><span class="line">server.92=10.0.0.212:2888:3888</span><br><span class="line">server.93=10.0.0.213:2888:3888</span><br><span class="line"></span><br><span class="line"><span class="comment">## Metrics Providers</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://prometheus.io Metrics Exporter</span></span><br><span class="line"><span class="comment">#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span></span><br><span class="line"><span class="comment">#metricsProvider.httpHost=0.0.0.0</span></span><br><span class="line"><span class="comment">#metricsProvider.httpPort=7000</span></span><br><span class="line"><span class="comment">#metricsProvider.exportJvmInfo=true</span></span><br></pre></td></tr></table></figure><p><strong>3.恢复原环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# <span class="built_in">rm</span> -fr /app/zookeeper/logs/*</span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">rm</span> -fr tmp/zookeeper/*</span><br></pre></td></tr></table></figure><p><strong>4. 同步数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拷贝环境变量文件</span></span><br><span class="line">[root@elk01 ~]# scp /etc/profile.d/zk.sh 10.0.0.212:/etc/profile.d/</span><br><span class="line">[root@elk01 ~]# scp /etc/profile.d/zk.sh 10.0.0.213:/etc/profile.d/</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝zookeeper文件</span></span><br><span class="line">[root@elk01 ~]# scp apache-zookeeper-3.8.4-bin.tar.gz 10.0.0.212:/root</span><br><span class="line">[root@elk01 ~]# scp apache-zookeeper-3.8.4-bin.tar.gz 10.0.0.213:/root</span><br><span class="line"></span><br><span class="line"><span class="comment">#在对端解压zookeeper，做软链接（两个节点同步操做）</span></span><br><span class="line">[root@elk02 ~]# tar xf apache-zookeeper-3.8.4-bin.tar.gz -C /app/</span><br><span class="line"></span><br><span class="line">[root@elk02 ~]# <span class="built_in">ln</span> -s /app/apache-zookeeper-3.8.4-bin/ /app/zookeeper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝zookeeper配置文件</span></span><br><span class="line">[root@elk01 ~]# scp /app/zookeeper/conf/zoo.cfg 10.0.0.212:/app/zookeeper/conf/</span><br><span class="line">[root@elk01 ~]# scp /app/zookeeper/conf/zoo.cfg 10.0.0.213:/app/zookeeper/conf/</span><br></pre></td></tr></table></figure><p><strong>5.生成myid文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建数据目录（配置文件里声明的目录）  </span></span><br><span class="line">`这里使用循环是因为三台机器我已两两做了免密,另外两个节点也可使用命令  <span class="built_in">mkdir</span> /app/data/zk -p`</span><br><span class="line">[root@elk01:3 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 211 213` ;<span class="keyword">do</span> ssh 10.0.0.<span class="variable">$i</span> <span class="built_in">mkdir</span> /app/data/zk -p ;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成myid文件</span></span><br><span class="line">[root@elk01:3 ~]# <span class="keyword">for</span> n <span class="keyword">in</span> `<span class="built_in">seq</span> 211 213` ;<span class="keyword">do</span> ssh 10.0.0.<span class="variable">$n</span> <span class="string">&quot;echo <span class="variable">$n</span> &gt; /app/data/zk/myid&quot;</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#myid文件作用</span></span><br><span class="line">如果首次启动时候没有事务文件，则会比较myid文件里，谁最大谁就是master</span><br></pre></td></tr></table></figure><p><strong>6.启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# zkServer.sh start</span><br><span class="line">[root@elk02 ~]# zkServer.sh start</span><br><span class="line">[root@elk03 ~]# zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果报错找不到命令，可能是配置的环境变量没有生效，执行如下</span></span><br><span class="line">[root@elk03 ~]# <span class="built_in">source</span> /etc/profile.d/zk.sh </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">[root@elk03:1 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><p><strong>7.避坑指南</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我所遇到的坑：</span><br><span class="line"> 1.如果做集群，三个节点的配置文件一样，否则会有zookeeper起不来情况</span><br><span class="line"> 2.删除如果你想清空环境重新启动zookeeper，记得日志和数据目录一起清除，否则服务起不来</span><br></pre></td></tr></table></figure><h2 id="验证zookeeper集群高可用"><a href="#验证zookeeper集群高可用" class="headerlink" title="验证zookeeper集群高可用"></a>验证zookeeper集群高可用</h2><p><strong>1.连接测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# zkCli.sh -server 10.0.0.212:2181</span><br><span class="line">[root@elk01 ~]# zkCli.sh -server 10.0.0.213:2181</span><br><span class="line">···</span><br><span class="line">ablishment complete on server elk03/10.0.0.213:2181, session <span class="built_in">id</span> = 0xd40001f2a52b0000, negotiated <span class="built_in">timeout</span> = 30000</span><br></pre></td></tr></table></figure><p><strong>2. 将leader节点挂掉，集群会自动选举出新的leader，集群正常对外提供服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前leader节点是elk03</span></span><br><span class="line">[root@elk03 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止elk03的zookeeper</span></span><br><span class="line">[root@elk03 ~]# zkServer.sh stop</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br><span class="line"></span><br><span class="line"><span class="comment">#经查看leader在elk02节点上</span></span><br><span class="line">[root@elk02 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果此时再次停止leader节点，那还会不会再选举？</span></span><br><span class="line">`经测试，停掉elk02节点的zookeeper时候，elk01节点不会选举为leader，而是会停止zookeeper服务`</span><br><span class="line">这也是我前面猜的坑，只有一台zookeeper时候是起不来服务的</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复  两个节点停止的服务重新启用即可</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><pre><code>1.zookeeper分布式集群的特点，半数以上节点存活才能对外提供服务;2.zookeeper一个集群中仅有一个leader和多个follower;3.如果一个zookeeper集群想要容忍N台故障，该集群最少要有2N+1个节点</code></pre></blockquote><h2 id="zookeeper基础命令"><a href="#zookeeper基础命令" class="headerlink" title="zookeeper基础命令"></a>zookeeper基础命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接zookeeper</span></span><br><span class="line">[root@elk02:1 ~]# zkCli.sh</span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 查看znode列表</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] <span class="built_in">ls</span> /</span><br><span class="line">[zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 创建znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create /luay</span><br><span class="line">Created /luay</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 创建znode时指定数据</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] create /test abc</span><br><span class="line">Created /test</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 查看znode的数据</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] get /test</span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 修改znode的值</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 7] get /luay</span><br><span class="line">null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 8] <span class="built_in">set</span> /luay new</span><br><span class="line">[zk: localhost:2181(CONNECTED) 9] get /luay</span><br><span class="line">new</span><br><span class="line"></span><br><span class="line"><span class="comment">#6. 创建子znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 10] <span class="built_in">ls</span> /luay </span><br><span class="line">[]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] create /luay/happy xixi</span><br><span class="line">Created /luay/happy</span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] get /luay/happy</span><br><span class="line">xixi</span><br><span class="line"></span><br><span class="line"><span class="comment">#7. 删除znode，前提是该znode没有子节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] <span class="built_in">ls</span> /test</span><br><span class="line">[] </span><br><span class="line">[zk: localhost:2181(CONNECTED) 14] delete /test</span><br><span class="line">[zk: localhost:2181(CONNECTED) 15] <span class="built_in">ls</span> /test</span><br><span class="line">Node does not exist: /test</span><br><span class="line">[zk: localhost:2181(CONNECTED) 16] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#8. 删除非空znode，该znode有子节点，会报错</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] delete /luay</span><br><span class="line">Node not empty: /luay</span><br><span class="line">[zk: localhost:2181(CONNECTED) 18] </span><br></pre></td></tr></table></figure><blockquote><p>你会发现我连接zookeeper时候是还有本地连接方式，当我使用远程方式连接elk01时候也会有数据，因为zookeeper做了集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03 ~]# zkCli.sh -server 10.0.0.211:2181</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br></pre></td></tr></table></figure></blockquote><h2 id="zookeeper的watch机制（了解）"><a href="#zookeeper的watch机制（了解）" class="headerlink" title="zookeeper的watch机制（了解）"></a>zookeeper的watch机制（了解）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">开两个终端，其中一个终端使用watch，另一个终端创建子znode</span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 监控一个znode下子节点的变化</span></span><br><span class="line">[zk: 10.0.0.211:2181(CONNECTED) 0] <span class="built_in">ls</span> -w /luay</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#发起创建动作</span></span><br><span class="line">[zk: 10.0.0.211:2181(CONNECTED) 11] create /luay/abc</span><br><span class="line">Created /luay/abc</span><br><span class="line"></span><br><span class="line"><span class="comment">#监控终端则输出</span></span><br><span class="line">[zk: 10.0.0.211:2181(CONNECTED) 1] </span><br><span class="line">WATCHER::</span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeChildrenChanged path:/luay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 监控znode的数据是否发生变化 （另一个终端只需要修改znode值即可监控到）</span></span><br><span class="line">[zk: 10.0.0.211:2181(CONNECTED) 0] get -w /luay</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line">- 1.watch事件是一次性的，只记录第一次创建或者修改动作;</span><br><span class="line">- 2.watch事件一旦触发，就会通知监控者程序，由该程序去负责相应的逻辑处理;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍了zookeeper集群的部署及基于kafka架构图</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>08.文档读写流程</title>
    <link href="https://lukme.top/posts/cfedfcaa.html"/>
    <id>https://lukme.top/posts/cfedfcaa.html</id>
    <published>2024-10-30T02:40:01.000Z</published>
    <updated>2024-10-30T04:02:17.234Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3d22dfc375f9b9913df28f3cec8f8b567c74caa9748ae5afc2a0b158dc13c682"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本篇介绍了ES读写文档流程以及底层分片原理</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>07.Elasticsearch参数调优</title>
    <link href="https://lukme.top/posts/793b821e.html"/>
    <id>https://lukme.top/posts/793b821e.html</id>
    <published>2024-10-30T02:39:01.000Z</published>
    <updated>2024-10-30T04:02:11.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch参数调优"><a href="#Elasticsearch参数调优" class="headerlink" title="Elasticsearch参数调优"></a>Elasticsearch参数调优</h2><h3 id="1-系统层面的调优"><a href="#1-系统层面的调优" class="headerlink" title="1. 系统层面的调优"></a>1. 系统层面的调优</h3><p>系统层面的调优主要是<code>内存的设定</code>与<code>避免交换内存</code>。</p><p>ES 安装后默认设置的堆内存是 <code>1GB</code>，这很明显是不够的，那么接下来就会有一个问题出现：我们要设置多少内存给 ES 呢？</p><p>其实这是要看我们集群节点的内存大小，还取决于我们是否在服务器节点上还是否要部署其他服务。</p><ul><li>如果内存相对很大，如 64G 及以上，并且我们不在 ES 集群上部署其他服务，那么我建议 ES 内存可以设置为 31G-32G，因为这里有一个 32G 性能瓶颈问题，直白的说就是即使你给了 ES 集群大于 32G 的内存，其性能也不一定会更加优良，甚至会不如设置为 31G-32G 时候的性能。<br>以我调优的集群为例，我所调优的服务器节点内存为 64G，服务器节点上也基本不跑其他服务，所以我把 ES 集群内存大小设置为了 31G，以充分发挥集群性能。</li><li>设置 ES 集群内存的时候，还有一点就是确保堆内存最小值（Xms）与最大值（Xmx）的大小是相同的，防止程序在运行时改变堆内存大小，这是一个很耗系统资源的过程。</li><li>还有一点就是避免交换内存，可以在配置文件中对内存进行锁定，以避免交换内存（也可以在操作系统层面进行关闭内存交换）。对应的参数：<code>bootstrap.mlockall: true</code></li></ul><h3 id="2-分片与副本"><a href="#2-分片与副本" class="headerlink" title="2. 分片与副本"></a>2. 分片与副本</h3><ul><li><code>分片 (shard)</code>：ES 是一个分布式的搜索引擎, 索引通常都会分解成不同部分, 分布在不同节点的部分数据就是分片。ES 自动管理和组织分片, 并在必要的时候对分片数据进行再平衡分配, 所以用户基本上不用担心分片的处理细节。创建索引时默认的分片数为 5 个，并且一旦创建不能更改。</li><li><code>副本 (replica)</code>：ES 默认创建一份副本，就是说在 5 个主分片的基础上，每个主分片都相应的有一个副本分片。额外的副本有利有弊，有副本可以有更强的故障恢复能力，但也占了相应副本倍数的磁盘空间。</li></ul><p>那我们在创建索引的时候，应该创建多少个分片与副本数呢？</p><ul><li>对于副本数，比较好确定，可以根据我们集群节点的多少与我们的存储空间决定，我们的集群服务器多，并且有足够大多存储空间，可以多设置副本数，一般是 1-3 个副本数，如果集群服务器相对较少并且存储空间没有那么宽松，则可以只设定一份副本以保证容灾（副本数可以动态调整）。</li><li>对于分片数，是比较难确定的。因为一个索引分片数一旦确定，就不能更改，所以我们在创建索引前，要充分的考虑到，以后我们创建的索引所存储的数据量，否则创建了不合适的分片数，会对我们的性能造成很大的影响。</li></ul><h3 id="3-参数调优"><a href="#3-参数调优" class="headerlink" title="3. 参数调优"></a>3. 参数调优</h3><p>下面我会介绍一些 ES 关键参数的调优。</p><p>有很多场景是，我们的 ES 集群占用了多大的 cpu 使用率，该如何调节呢。cpu 使用率高，有可能是写入导致的，也有可能是查询导致的，那要怎么查看呢？</p><p>可以先通过 <code>GET _nodes/&#123;node&#125;/hot_threads</code> 查看线程栈，查看是哪个线程占用 <code>cpu</code> 高，如果是 <code>elasticsearch[&#123;node&#125;][search][T#10]</code> 则是查询导致的，如果是 <code>elasticsearch[&#123;node&#125;][bulk][T#1]</code> 则是数据写入导致的。</p><p>在实际调优中，cpu 使用率很高，如果不是 SSD，建议把 <code>index.merge.scheduler.max_thread_count: 1</code> 索引 merge 最大线程数设置为 1 个，该参数可以有效调节写入的性能。因为在存储介质上并发写，由于寻址的原因，写入性能不会提升，只会降低。</p><p>还有几个重要参数可以进行设置，各位同学可以视自己的集群情况与数据情况而定。</p><ul><li><code>index.refresh_interval</code>：这个参数的意思是数据写入后几秒可以被搜索到，默认是 1s。每次索引的 refresh 会产生一个新的 lucene 段, 这会导致频繁的合并行为，如果业务需求对实时性要求没那么高，可以将此参数调大，实际调优告诉我，该参数确实很给力，cpu 使用率直线下降。</li><li><code>indices.memory.index_buffer_size</code>：如果我们要进行非常重的高并发写入操作，那么最好将 <code>indices.memory.index_buffer_size</code> 调大一些，index buffer 的大小是所有的 shard 公用的，一般建议（看的大牛博客），对于每个 shard 来说，最多给 <code>512mb</code>，因为再大性能就没什么提升了。ES 会将这个设置作为每个 shard 共享的 index buffer，那些特别活跃的 shard 会更多的使用这个 buffer。默认这个参数的值是 10%，也就是 jvm heap 的 10%。</li><li><code>translog</code>：ES 为了保证数据不丢失，每次 index、bulk、delete、update 完成的时候，一定会触发刷新 translog 到磁盘上。在提高数据安全性的同时当然也降低了一点性能。如果你不在意这点可能性，还是希望性能优先，可以设置如下参数：</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;index.translog&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sync_interval&quot;</span>: <span class="string">&quot;120s&quot;</span>,     <span class="comment">--sync间隔调高</span></span><br><span class="line">        <span class="string">&quot;durability&quot;</span>: <span class="string">&quot;async&quot;</span>,       -– 异步更新</span><br><span class="line">        <span class="string">&quot;flush_threshold_size&quot;</span>:<span class="string">&quot;1g&quot;</span>  <span class="comment">--log文件大小</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>这样设定的意思是开启异步写入磁盘，并设定写入的时间间隔与大小，有助于写入性能的提升。</li></ul><p><strong>还有一些超时参数的设置：</strong></p><ul><li><code>discovery.zen.ping_timeout</code> 判断 master 选举过程中，发现其他 node 存活的超时设置</li><li><code>discovery.zen.fd.ping_interval</code> 节点被 ping 的频率，检测节点是否存活</li><li><code>discovery.zen.fd.ping_timeout</code> 节点存活响应的时间，默认为 30s，如果网络可能存在隐患，可以适当调大</li><li><code>discovery.zen.fd.ping_retries ping</code> 失败/超时多少导致节点被视为失败，默认为 3</li></ul><h3 id="4-其他建议"><a href="#4-其他建议" class="headerlink" title="4. 其他建议"></a>4. 其他建议</h3><p>还有一些零碎的优化建议喔。</p><ul><li><code>插入索引自动生成 id</code>：当写入端使用特定的 id 将数据写入 ES 时，ES 会检查对应的索引下是否存在相同的 id，这个操作会随着文档数量的增加使消耗越来越大，所以如果业务上没有硬性需求建议使用 ES 自动生成的 id，加快写入速率。</li><li><code>避免稀疏索引</code>：索引稀疏之后，会导致索引文件增大。ES 的 keyword，数组类型采用 doc_values 结构，即使字段是空值，每个文档也会占用一定的空间，所以稀疏索引会造成磁盘增大，导致查询和写入效率降低。</li></ul><h2 id="jvm调优"><a href="#jvm调优" class="headerlink" title="jvm调优"></a>jvm调优</h2><blockquote><p>仅提供思路，生产环境建议给到物理机内存一半，上限32G即可</p></blockquote><p>1.JVM调优策略</p><p>推荐设置是物理机的一半内存，但是当物理机的内存大于32GB的时候，若内存是64GB，则就是32GB内存。默认就是物理机内存的一半。</p><p>但是当大于64GB时，比如物理机是256GB内存，此时不应该设置内存为宿主机的一半，应该最大上限设置为32GB。</p><p>2.修改堆内存大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前内存使用状态</span></span><br><span class="line">[root@elk01:0 ~]# free -h</span><br><span class="line">               total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.8Gi       2.2Gi       1.2Gi       0.0Ki       388Mi       1.4Gi</span><br><span class="line">Swap:          2.7Gi       736Mi       2.0Gi</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看java程序已占用内存</span></span><br><span class="line">[root@elk92 ~]# ps -ef | grep java | grep -i xms</span><br><span class="line"></span><br><span class="line"><span class="comment">#我给的是4G内存，占用一半内存</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027215156903.png" alt="image-20241027215156903"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改内存大小</span></span><br><span class="line">[root@elk01:0 ~]# vim /etc/elasticsearch/jvm.options</span><br><span class="line">···</span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx256m</span><br></pre></td></tr></table></figure><p><strong>拷贝文件到其他2个节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# scp /etc/elasticsearch/jvm.options 10.0.0.212:/etc/elasticsearch/</span><br><span class="line">[root@elk01:0 ~]# scp /etc/elasticsearch/jvm.options 10.0.0.213:/etc/elasticsearch/</span><br></pre></td></tr></table></figure><p><strong>重启ES集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]#  systemctl restart elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：生产环境最好滚动重启，当前重启完毕后再重启其它节点（防止所有集群宕机）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看集群状态是否OK</span></span><br><span class="line">[root@elk01:2 ~]# curl 10.0.0.211:9200/_cat/nodes</span><br><span class="line">10.0.0.213 42 97 0 0.25 0.30 0.28 cdfhilmrstw * elk03</span><br><span class="line">10.0.0.211 75 48 3 1.38 0.81 0.64 cdfhilmrstw - elk01</span><br><span class="line">10.0.0.212 52 97 0 0.34 0.31 0.28 cdfhilmrstw - elk02</span><br></pre></td></tr></table></figure><p><strong>再次查看内存占用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# free -h</span><br><span class="line">               total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.8Gi       1.1Gi       2.0Gi       0.0Ki       771Mi       2.5Gi</span><br><span class="line">Swap:          2.7Gi        60Mi       2.7Gi</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">针对Elasticsearch参数调优，从系统，分片上分析</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>06.ES集群加密</title>
    <link href="https://lukme.top/posts/de7fd46f.html"/>
    <id>https://lukme.top/posts/de7fd46f.html</id>
    <published>2024-10-30T02:38:01.000Z</published>
    <updated>2024-10-30T04:02:06.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES集群加密"><a href="#ES集群加密" class="headerlink" title="ES集群加密"></a>ES集群加密</h2><p><strong>未加密前</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@elk91 ~]# curl 10.0.0.211:9200/_cat/nodes?v</span><br><span class="line">ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name</span><br><span class="line">10.0.0.92           78          66   0    0.01    0.02     0.03 cdfhilmrstw -      elk01</span><br><span class="line">10.0.0.93           44          47   1    0.02    0.02     0.01 cdfhilmrstw -      elk02</span><br><span class="line">10.0.0.91           54          68   1    0.22    0.17     0.12 cdfhilmrstw *      elk03</span><br></pre></td></tr></table></figure><p><strong>1. 生成证书文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@elk91 ~]# /usr/share/elasticsearch/bin/elasticsearch-certutil cert --days 3650 -out /etc/elasticsearch/elastic-certificates.p12 -pass <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改证书权限（否则es没有权限读取证书）</span></span><br><span class="line">[root@elk91 ~]# <span class="built_in">chown</span> elasticsearch:elasticsearch /etc/elasticsearch/elastic-certificates.p12</span><br><span class="line"></span><br><span class="line">`注释:`</span><br><span class="line">[root@elk01:1 ~]# /usr/share/elasticsearch/bin/elasticsearch-certutil cert -h 查看帮助</span><br><span class="line">--days   指定证书有效期多久</span><br><span class="line">--out    指定证书存放路径</span><br><span class="line">--pass   指定证书密码（为空即可）</span><br></pre></td></tr></table></figure><p><strong>2. 同步证书文件到其他节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# scp /etc/elasticsearch/elastic-certificates.p12 10.0.0.212:/etc/elasticsearch/</span><br><span class="line">[root@elk01:1 ~]# scp /etc/elasticsearch/elastic-certificates.p12 10.0.0.213:/etc/elasticsearch/</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：注意检查其它节点的证书权限是否是elasticsearch，若不是则修改（见上一步）</span></span><br></pre></td></tr></table></figure><p><strong>4. 修改ES配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# vim /etc/elasticsearch/elasticsearch.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#同步配置文件到其它节点</span></span><br><span class="line">[root@elk01:1 ~]# scp /etc/elasticsearch/elasticsearch.yml 10.0.0.212:/etc/elasticsearch/</span><br><span class="line">[root@elk01:1 ~]# scp /etc/elasticsearch/elasticsearch.yml 10.0.0.213:/etc/elasticsearch/</span><br></pre></td></tr></table></figure><p><strong>5. 所有节点重启elasticsearch</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]#  systemctl restart elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：生产环境最好滚动重启，当前重启完毕后再重启其它节点（防止所有集群宕机）</span></span><br></pre></td></tr></table></figure><p><strong>6. 测试访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# curl 10.0.0.211:9200/_cat/nodes</span><br><span class="line">&#123;<span class="string">&quot;error&quot;</span>:&#123;<span class="string">&quot;root_cause&quot;</span>:[&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;security_exception&quot;</span>,<span class="string">&quot;reason&quot;</span>:<span class="string">&quot;missing authentication credentials for REST request [/_cat/nodes]&quot;</span>,<span class="string">&quot;header&quot;</span>:&#123;<span class="string">&quot;WWW-Authenticate&quot;</span>:<span class="string">&quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;</span>&#125;&#125;],<span class="string">&quot;type&quot;</span>:<span class="string">&quot;security_exception&quot;</span>,<span class="string">&quot;reason&quot;</span>:<span class="string">&quot;missing authentication credentials for REST request [/_cat/nodes]&quot;</span>,<span class="string">&quot;header&quot;</span>:&#123;<span class="string">&quot;WWW-Authenticate&quot;</span>:<span class="string">&quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;</span>&#125;&#125;,<span class="string">&quot;status&quot;</span>:401&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#没有权限访问即为成功</span></span><br></pre></td></tr></table></figure><h2 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h2><p><strong>注意保存密码</strong></p><blockquote><p>auto  非交互式，自动生成随机密码</p><p>interactive 交互式，自己输入密码（有7项）</p><p><code>注意保存密码</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto</span><br><span class="line">Initiating the setup of passwords <span class="keyword">for</span> reserved <span class="built_in">users</span> elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.</span><br><span class="line">The passwords will be randomly generated and printed to the console.</span><br><span class="line">Please confirm that you would like to <span class="built_in">continue</span> [y/N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user apm_system</span><br><span class="line">PASSWORD apm_system = ZY6QTWFDqGv64uVzB2PR</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user kibana_system</span><br><span class="line">PASSWORD kibana_system = BtaZLprbzzF1tYXSaCld</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user kibana</span><br><span class="line">PASSWORD kibana = BtaZLprbzzF1tYXSaCld</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user logstash_system</span><br><span class="line">PASSWORD logstash_system = ykztlETUjj9bu7zDF9Fw</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user beats_system</span><br><span class="line">PASSWORD beats_system = Fe075On7ZgmleYNkS9in</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user remote_monitoring_user</span><br><span class="line">PASSWORD remote_monitoring_user = J7bkmxKsrhUKhLJyksMD</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user elastic</span><br><span class="line">PASSWORD elastic = pNcoJpSv0j1Qp9ZZ4N5G</span><br></pre></td></tr></table></figure><p><strong>测试连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加上用户和密码测试</span></span><br><span class="line">[root@elk01:1 ~]# curl -u elastic:pNcoJpSv0j1Qp9ZZ4N5G 10.0.0.211:9200/_cat/nodes</span><br><span class="line">10.0.0.212 19 97 3 0.23 0.50 0.71 cdfhilmrstw * elk02</span><br><span class="line">10.0.0.211 12 91 3 0.31 0.46 0.53 cdfhilmrstw - elk01</span><br><span class="line">10.0.0.213 43 90 3 0.27 0.61 0.89 cdfhilmrstw - elk03</span><br></pre></td></tr></table></figure><h2 id="kibana集成ES加密集群"><a href="#kibana集成ES加密集群" class="headerlink" title="kibana集成ES加密集群"></a>kibana集成ES加密集群</h2><p><strong>1. 修改配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# vim /etc/kibana/kibana.yml </span><br><span class="line">···</span><br><span class="line">elasticsearch.username: <span class="string">&quot;kibana_system&quot;</span></span><br><span class="line">elasticsearch.password: <span class="string">&quot;BtaZLprbzzF1tYXSaCld&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#密码见上面生成的</span></span><br></pre></td></tr></table></figure><p><strong>2. 重启kibana服务 </strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]#  systemctl restart kibana</span><br></pre></td></tr></table></figure><p><strong>3. 访问kibana的webUI登录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.211:5601</span><br><span class="line"></span><br><span class="line">使用elastic用户登录</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027222304410.png" alt="image-20241027222304410"></p><p><img src="https://cos.lukme.top/Pic/image-20241027222417898.png" alt="image-20241027222417898"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录后如果没有出现右上角e标志，尝试清除缓存，或者使用无痕模式登录</span></span><br><span class="line">这里修改密码为   123456</span><br></pre></td></tr></table></figure><h2 id="filebeat写入ES加密集群"><a href="#filebeat写入ES加密集群" class="headerlink" title="filebeat写入ES加密集群"></a>filebeat写入ES加密集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/filebeat/19-tcp_es_secret.yaml </span><br><span class="line"><span class="comment"># 数据从监听的指定tcp端口来</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: tcp</span><br><span class="line">  host: <span class="string">&quot;0.0.0.0:9000&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#数据到终点</span></span><br><span class="line">output:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    hosts:</span><br><span class="line">    - <span class="string">&quot;http://10.0.0.211:9200&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.0.0.212:9200&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.0.0.213:9200&quot;</span></span><br><span class="line">    index: <span class="string">&quot;linux-tcp-secret-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">    username: elastic</span><br><span class="line">    password: <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.name: <span class="string">&quot;linux-tcp-secret&quot;</span></span><br><span class="line">setup.template.pattern: <span class="string">&quot;linux-tcp-secret*&quot;</span></span><br><span class="line">setup.template.overwrite: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 5</span><br><span class="line">  index.number_of_replicas: 0</span><br><span class="line">  </span><br><span class="line"><span class="comment">#启动实例</span></span><br><span class="line">[root@elk01:2 ~]# filebeat -e -c /etc/filebeat/19-tcp_es_secret.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment">#测试实例</span></span><br><span class="line">[root@elk01:2 ~]#  <span class="built_in">echo</span> 7890 |nc 10.0.0.211 9000</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027224350997.png" alt="image-20241027224350997"></p><p><strong>使用开发工具简单查看数据</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027224929276.png" alt="image-20241027224929276"></p><h2 id="logstash写入ES加密集群"><a href="#logstash写入ES加密集群" class="headerlink" title="logstash写入ES加密集群"></a>logstash写入ES加密集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/16-tcp-es-secret.conf</span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 8888</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">   elasticsearch&#123;</span><br><span class="line">      hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;logstach-tcp-secret-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">      user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动实例</span></span><br><span class="line">[root@elk01:0 ~]# logstash -rf /etc/logstash/conf.d/16-tcp-es-secret.conf </span><br><span class="line"></span><br><span class="line"><span class="comment">#写入数据测试</span></span><br><span class="line">[root@elk02:0 ~]# <span class="built_in">echo</span> 666666 |nc 10.0.0.211 8888</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027225729785.png" alt="image-20241027225729785"></p><h2 id="角色访问"><a href="#角色访问" class="headerlink" title="角色访问"></a>角色访问</h2><p><strong>创建角色，给开发或者运维不同权限</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027231430903.png" alt="image-20241027231430903"></p><p><img src="https://cos.lukme.top/Pic/image-20241027232332394.png" alt="image-20241027232332394"></p><p><img src="https://cos.lukme.top/Pic/image-20241027232500498.png" alt="image-20241027232500498"></p><p><strong>创建运维角色</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027232645991.png" alt="image-20241027232645991"></p><p><strong>还有kibana的权限选择all完事</strong>  <strong><em>图略</em></strong></p><p><strong>创建用户</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027232837646.png" alt="image-20241027232837646"></p><p><strong>登录李星星用户   权限确实少</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027233121133.png" alt="image-20241027233121133"></p>]]></content>
    
    
    <summary type="html">针对ES集群加密，设置权限访问</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>05.logstash对接filebeat</title>
    <link href="https://lukme.top/posts/4a11ec3f.html"/>
    <id>https://lukme.top/posts/4a11ec3f.html</id>
    <published>2024-10-30T02:37:01.000Z</published>
    <updated>2024-10-30T04:01:54.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="logstash对接filebeat"><a href="#logstash对接filebeat" class="headerlink" title="logstash对接filebeat"></a>logstash对接filebeat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.编写logstash实例</span></span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/03_filebeat_input.conf</span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 9999</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动logstash实例</span></span><br><span class="line">[root@elk01:4 ~]# logstash -rf /etc/logstash/conf.d/03_filebeat_input.conf </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否有9999端口</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:4 ~]# <span class="built_in">cat</span> /etc/filebeat/14-logstash.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: filestream</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.conf</span><br><span class="line">  parsers:</span><br><span class="line">  - ndjson:</span><br><span class="line">      target: <span class="string">&quot;&quot;</span></span><br><span class="line">      message_key: message</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">&quot;10.0.0.211:9999&quot;</span>]</span><br><span class="line">  </span><br><span class="line"><span class="comment">#2.启动filebeat实例</span></span><br><span class="line">[root@elk01:4 ~]# filebeat -e -c /etc/filebeat/14-logstash.yaml </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查logstash是否有标准输出  （message字段里输出new是/tmp/test.conf里的内容,证明对接filebeat成功）</span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">         <span class="string">&quot;agent&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;ephemeral_id&quot;</span> =&gt; <span class="string">&quot;b923603a-d451-4c18-b9d4-f7aa0e034000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hostname&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">             <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;4f19d0b0-5ed5-4c21-82ef-6f001fb850b3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filebeat&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-05T05:29:42.250Z,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">           <span class="string">&quot;ecs&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;tags&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;beats_input_codec_plain_applied&quot;</span></span><br><span class="line">    ],</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;new&quot;</span>,</span><br><span class="line">         <span class="string">&quot;input&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filestream&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">           <span class="string">&quot;log&quot;</span> =&gt; &#123;</span><br><span class="line">          <span class="string">&quot;file&quot;</span> =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/tmp/test.conf&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;offset&quot;</span> =&gt; 14</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter处理字段"><a href="#filter处理字段" class="headerlink" title="filter处理字段"></a>filter处理字段</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">#remove_field可以过滤不需要的顶级字段</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/04_filebeat_input.conf</span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 9999</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#效果如下  （如果想要message里每个字段加入到顶级字段里，详情见上一篇修改nginx配置文件）</span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="string">&quot;timestamp&quot;</span> =&gt; <span class="string">&quot;2024-10-05T16:16:29+08:00&quot;</span>,</span><br><span class="line">                <span class="string">&quot;uri&quot;</span> =&gt; <span class="string">&quot;/index.nginx-debian.html&quot;</span>,</span><br><span class="line">             <span class="string">&quot;status&quot;</span> =&gt; <span class="string">&quot;304&quot;</span>,</span><br><span class="line">          <span class="string">&quot;SendBytes&quot;</span> =&gt; 0,</span><br><span class="line">            <span class="string">&quot;referer&quot;</span> =&gt; <span class="string">&quot;-&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tcp_xff&quot;</span> =&gt; <span class="string">&quot;-&quot;</span>,</span><br><span class="line">         <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-05T08:16:30.048Z,</span><br><span class="line">              <span class="string">&quot;vhost&quot;</span> =&gt; <span class="string">&quot;10.0.0.211&quot;</span>,</span><br><span class="line">       <span class="string">&quot;responsetime&quot;</span> =&gt; 0,</span><br><span class="line">             <span class="string">&quot;domain&quot;</span> =&gt; <span class="string">&quot;10.0.0.211&quot;</span>,</span><br><span class="line">       <span class="string">&quot;upstreamtime&quot;</span> =&gt; <span class="string">&quot;-&quot;</span>,</span><br><span class="line">          <span class="string">&quot;http_host&quot;</span> =&gt; <span class="string">&quot;10.0.0.211&quot;</span>,</span><br><span class="line">           <span class="string">&quot;clientip&quot;</span> =&gt; <span class="string">&quot;10.0.0.1&quot;</span>,</span><br><span class="line">       <span class="string">&quot;upstreamhost&quot;</span> =&gt; <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http_user_agent&quot;</span> =&gt; <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/129.0.0.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xff&quot;</span> =&gt; <span class="string">&quot;-&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useragent-filter插件"><a href="#useragent-filter插件" class="headerlink" title="useragent filter插件"></a>useragent filter插件</h3><blockquote><p>分析分析设备的类型及操作系统</p></blockquote><p><strong>编写logstash实例文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/05_filebeat_filter_es.yaml </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; <span class="string">&quot;9999&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 分析用户的设备类型</span></span><br><span class="line">  useragent &#123;</span><br><span class="line">  <span class="comment"># 对哪个字段进行分析</span></span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;http_user_agent&quot;</span></span><br><span class="line">    <span class="comment"># 指定解析的设备信息放在哪个字段中，若不指定则默认放在顶级字段中</span></span><br><span class="line">    target =&gt; <span class="string">&quot;agent-kind&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#写入es集群（可以先只用上面的标准输出，测试输出无误在使用下面的写入集群）</span></span><br><span class="line">  elasticsearch&#123;</span><br><span class="line">    hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">    index =&gt; <span class="string">&quot;logstash-nginx-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动logstash实例</span></span><br><span class="line">[root@elk01:4 ~]# logstash -rf /etc/logstash/conf.d/05_filebeat_filter_es.yaml</span><br></pre></td></tr></table></figure><p><strong>filebeat实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:4 ~]# <span class="built_in">cat</span> /etc/filebeat/15-nginx_logstash.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: filestream</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/nginx/access.log</span><br><span class="line">  parsers:</span><br><span class="line">  - ndjson:</span><br><span class="line">      target: <span class="string">&quot;&quot;</span></span><br><span class="line">      message_key: message</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">&quot;10.0.0.211:9999&quot;</span>]</span><br><span class="line">  </span><br><span class="line"><span class="comment">#启动filebeat实例</span></span><br><span class="line">[root@elk01:4 ~]# filebeat -e -c /etc/filebeat/15-nginx_logstash.yaml </span><br></pre></td></tr></table></figure><p><strong>浏览器访问：10.0.0.211:5601</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241005170328290.png" alt="image-20241005170328290"></p><blockquote><p>在创建索引模板时候发现多出一个时间戳字段</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241005170803108.png" alt="image-20241005170803108"></p><h3 id="时间格式处理"><a href="#时间格式处理" class="headerlink" title="时间格式处理"></a>时间格式处理</h3><p><a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-date.html#plugins-filters-date-match">官方</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 分析用户的设备类型</span></span><br><span class="line">  useragent &#123;</span><br><span class="line">    <span class="comment"># 对哪个字段进行分析</span></span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;http_user_agent&quot;</span></span><br><span class="line">    <span class="comment"># 指定解析的设备信息放在哪个字段中，若不指定则默认放在顶级字段中</span></span><br><span class="line">    target =&gt; <span class="string">&quot;linux_agent&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 处理日期的插件 #AccessTime是用户实际访问时间</span></span><br><span class="line">  <span class="built_in">date</span> &#123;</span><br><span class="line">    <span class="comment"># &quot;[29/Aug/2024:08:46:59 +0000]&quot;</span></span><br><span class="line">    match =&gt; [ <span class="string">&quot;AccessTime&quot;</span>, <span class="string">&quot;[dd/MMM/yyyy:HH:mm:ss Z]&quot;</span> ]</span><br><span class="line">    <span class="comment"># 将解析的字符串存储到指定字段，若不指定则默认覆盖&quot;@timestamp&quot;</span></span><br><span class="line">    target =&gt; <span class="string">&quot;accesstime&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="geoip-filter插件"><a href="#geoip-filter插件" class="headerlink" title="geoip filter插件"></a>geoip filter插件</h3><blockquote><p>分析用户的地理位置,前提是日志里的ip需要是公网地址，可以手动更改模拟</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.获取自己的公网地址</span><br><span class="line">[root@elk01:1 ~]# curl ifconfig.io</span><br><span class="line">101.82.161.6</span><br><span class="line"></span><br><span class="line">2.修改nginx日志文件模拟公网地址访问  （替换后里面ip数字随便改改）  （10.0.0.1是日志里客户端访问的ip）</span><br><span class="line">[root@elk01:1 ~]# sed -i s#10.0.0.1#101.82.161.6#g /var/log/nginx/access.log</span><br><span class="line"></span><br><span class="line">3.重启nginx</span><br><span class="line">[root@elk01:1 ~]# systemctl restart nginx</span><br><span class="line"></span><br><span class="line">4.删除filebeat采集缓存</span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">rm</span> -fr /var/lib/filebeat/*</span><br><span class="line"></span><br><span class="line">5.重新启动logstash实例和filebeat实例</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241005181444001.png" alt="image-20241005181444001"></p><blockquote><p>添加map数据提示不包含任何字段？    logstash创建的索引的地理坐标点类型默认是float，修改为geoip.location</p><p>做一个模板映射location的type类型</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241005181708936.png" alt="image-20241005181708936"></p><p><img src="https://cos.lukme.top/Pic/image-20241005181759172.png" alt="image-20241005181759172"></p><h2 id="grok插件"><a href="#grok插件" class="headerlink" title="grok插件"></a>grok插件</h2><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-grok.html">官方grok指导—点击直达</a></p><p><a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/main/patterns/ecs-v1">grok匹配支持项—github</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找内置的匹配模式（以httpd为例）</span></span><br><span class="line">[root@elk01:0 conf.d]# find / -name httpd</span><br><span class="line">/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-patterns-core-4.3.4/patterns/legacy/httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#在httpd这个匹配规则里尝试搜索clientip字段，即可找到  HTTPD_COMMONLOG  这个匹配项</span></span><br><span class="line">[root@elk01:0 conf.d]# grep clientip /usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-patterns-core-4.3.4/patterns/legacy/httpd</span><br><span class="line">HTTPD_COMMONLOG %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;HTTPDUSER:auth&#125; \[%&#123;HTTPDATE:timestamp&#125;\] <span class="string">&quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot;</span> (?:-|%&#123;NUMBER:response&#125;) (?:-|%&#123;NUMBER:bytes&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面就以clientip为例，展示grok匹配</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.编辑logstash实例</span></span><br><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/07_filter_grok.conf </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; <span class="string">&quot;7777&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 基于正则匹配任意文本，grok内置了120种匹配模式</span></span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;HTTPD_COMBINEDLOG&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#分析设备类型</span></span><br><span class="line">  useragent &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;agent&quot;</span></span><br><span class="line">    target =&gt; <span class="string">&quot;agent-kind&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#分析用户的经纬度，位置信息（ip要为公网ip才有效）</span></span><br><span class="line">  geoip &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; [<span class="string">&quot;clientip&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">  elasticsearch&#123;</span><br><span class="line">    hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">    index =&gt; <span class="string">&quot;logstash-nginx-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动实例</span></span><br><span class="line">[root@elk01:0 conf.d]# logstash -rf /etc/logstash/conf.d/07_filter_grok.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.编辑filebeat实例</span></span><br><span class="line"><span class="built_in">cat</span> /etc/filebeat/16-nginx_logstash_grok.yaml</span><br><span class="line">filebeat:</span><br><span class="line">  inputs:</span><br><span class="line">  - <span class="built_in">type</span>: filestream</span><br><span class="line">    paths:</span><br><span class="line">      - /var/log/nginx/access.log*</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">&quot;10.0.0.93:7777&quot;</span>]</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 启动实例</span></span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/16-nginx_logstash_grok.yaml </span><br></pre></td></tr></table></figure><p><strong>输出展示</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#展示结果可以看出，用户ip以clientip字段作为顶级字段，展示出ip</span></span><br><span class="line"><span class="string">&quot;timestamp&quot;</span> =&gt; <span class="string">&quot;20/Oct/2024:16:36:12 +0800&quot;</span>,</span><br><span class="line">      <span class="string">&quot;clientip&quot;</span> =&gt; <span class="string">&quot;87.120.127.103&quot;</span>,</span><br><span class="line">          <span class="string">&quot;verb&quot;</span> =&gt; <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">         <span class="string">&quot;geoip&quot;</span> =&gt; &#123;</span><br><span class="line">             <span class="string">&quot;timezone&quot;</span> =&gt; <span class="string">&quot;Europe/Sofia&quot;</span>,</span><br><span class="line">            <span class="string">&quot;longitude&quot;</span> =&gt; 23.332,</span><br><span class="line">       <span class="string">&quot;continent_code&quot;</span> =&gt; <span class="string">&quot;EU&quot;</span>,</span><br><span class="line">             <span class="string">&quot;latitude&quot;</span> =&gt; 42.696,</span><br><span class="line">                   <span class="string">&quot;ip&quot;</span> =&gt; <span class="string">&quot;87.120.127.103&quot;</span>,</span><br><span class="line">         <span class="string">&quot;country_name&quot;</span> =&gt; <span class="string">&quot;Bulgaria&quot;</span>,</span><br><span class="line">        <span class="string">&quot;country_code3&quot;</span> =&gt; <span class="string">&quot;BG&quot;</span>,</span><br><span class="line">             <span class="string">&quot;location&quot;</span> =&gt; &#123;</span><br><span class="line">           <span class="string">&quot;lon&quot;</span> =&gt; 23.332,</span><br><span class="line">           <span class="string">&quot;lat&quot;</span> =&gt; 42.696</span><br><span class="line">           </span><br><span class="line"> <span class="comment">#分析用户的经纬度，位置信息，同时也展示出用户ip的一些信息包括时区，城市名字等</span></span><br><span class="line"> geoip &#123;</span><br><span class="line">   <span class="built_in">source</span> =&gt; [<span class="string">&quot;clientip&quot;</span>]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="自定义正则提取字段"><a href="#自定义正则提取字段" class="headerlink" title="自定义正则提取字段"></a>自定义正则提取字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义正则</span></span><br><span class="line">[root@elk93 ~]# <span class="built_in">cat</span> /tmp/parttern/xixi.re</span><br><span class="line">YEAR \d&#123;4&#125;</span><br><span class="line">school [A-z]&#123;5&#125;</span><br><span class="line">Class [A-z]&#123;5&#125;\d&#123;2&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#编写logstash实例</span></span><br><span class="line">[root@elk93 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/05-tcp-grok-stdout.conf</span><br><span class="line">[root@elk01:1 ~]# vim /etc/logstash/conf.d/08_pattern.conf </span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 6666</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    <span class="comment"># 加载自定义正则（存放自定义正则目录）</span></span><br><span class="line">    patterns_dir =&gt; [<span class="string">&quot;/tmp/pattern/&quot;</span>]</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;xixi %&#123;YEAR:year&#125;-%&#123;school:school&#125;-%&#123;Class:class&#125; haha&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line"> stdout &#123;</span><br><span class="line">  codec =&gt; rubydebug</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Class [A-z]&#123;5&#125;\d&#123;2&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果匹配规则未达到则如下（规则是Class [A-z]&#123;5&#125;\d&#123;2&#125;   字母后应该是2数字）</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-20T12:33:19.642Z,</span><br><span class="line">          <span class="string">&quot;port&quot;</span> =&gt; 49454,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;tags&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;_grokparsefailure&quot;</span></span><br><span class="line">    ],</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;xixi 2024-BJedu-Linux666 haha&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#达到匹配规则    xixi %&#123;YEAR:year&#125;-%&#123;school:school&#125;-%&#123;Class:class&#125; haha  才能如此</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-20T12:31:16.265Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;xixi 2024-BJedu-Linux01 haha&quot;</span>,</span><br><span class="line">        <span class="string">&quot;school&quot;</span> =&gt; <span class="string">&quot;BJedu&quot;</span>,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">          <span class="string">&quot;year&quot;</span> =&gt; <span class="string">&quot;2024&quot;</span>,</span><br><span class="line">          <span class="string">&quot;port&quot;</span> =&gt; 34950,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">         <span class="string">&quot;class&quot;</span> =&gt; <span class="string">&quot;Linux01&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出年份是2024-2030</span></span><br><span class="line">[root@elk01:2 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 2024 2030`; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;xixi <span class="variable">$i</span>-BJedu-Linux01 haha&quot;</span> | nc 10.0.0.211 6666 &amp; <span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mutate插件"><a href="#mutate插件" class="headerlink" title="mutate插件"></a>mutate插件</h2><h3 id="自定义日志格式提取"><a href="#自定义日志格式提取" class="headerlink" title="自定义日志格式提取"></a>自定义日志格式提取</h3><p><strong>1. 使用python脚本创建自定义日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> generate_log.py </span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># @author : Jason Yin</span></span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">import random</span><br><span class="line">import logging</span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">LOG_FORMAT = <span class="string">&quot;%(levelname)s %(asctime)s [com.linux.%(module)s] - %(message)s &quot;</span></span><br><span class="line">DATE_FORMAT = <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置root的logging.Logger实例的基本配置</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=LOG_FORMAT, datefmt=DATE_FORMAT, filename=sys.argv[1]</span><br><span class="line">, filemode=<span class="string">&#x27;a&#x27;</span>,)</span><br><span class="line">actions = [<span class="string">&quot;浏览页面&quot;</span>, <span class="string">&quot;评论商品&quot;</span>, <span class="string">&quot;加入收藏&quot;</span>, <span class="string">&quot;加入购物车&quot;</span>, <span class="string">&quot;提交订单&quot;</span>, <span class="string">&quot;使用优惠券&quot;</span>, <span class="string">&quot;领取优惠券&quot;</span>,</span><br><span class="line"> <span class="string">&quot;搜索&quot;</span>, <span class="string">&quot;查看订单&quot;</span>, <span class="string">&quot;付款&quot;</span>, <span class="string">&quot;清空购物车&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    time.sleep(random.randint(1, 5))</span><br><span class="line">    user_id = random.randint(1, 10000)</span><br><span class="line">    <span class="comment"># 对生成的浮点数保留2位有效数字.</span></span><br><span class="line">    price = round(random.uniform(15000, 30000),2)</span><br><span class="line">    action = random.choice(actions)</span><br><span class="line">    svip = random.choice([0,1,2])</span><br><span class="line">    logging.info(<span class="string">&quot;DAU|&#123;0&#125;|&#123;1&#125;|&#123;2&#125;|&#123;3&#125;&quot;</span>.format(user_id, action,svip,price))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>2. 启动脚本-生成日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@elk91 ~]# python3 generate_log.py /tmp/apps.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成类似格式的日志文件</span></span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">tail</span> -f /tmp/apps.log </span><br><span class="line">INFO 2024-10-27 09:23:50 [com.linux.generate_log] - DAU|5164|领取优惠券|2|18464.33 </span><br><span class="line">INFO 2024-10-27 09:23:51 [com.linux.generate_log] - DAU|2615|搜索|1|21874.88 </span><br><span class="line">INFO 2024-10-27 09:23:56 [com.linux.generate_log] - DAU|8097|查看订单|1|23759.47 </span><br><span class="line">INFO 2024-10-27 09:23:57 [com.linux.generate_log] - DAU|795|加入购物车|2|21097.98 </span><br><span class="line">INFO 2024-10-27 09:24:00 [com.linux.generate_log] - DAU|1577|清空购物车|0|16636.14</span><br></pre></td></tr></table></figure><p><strong>3. 编写logstash实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/10.beats-mutate.conf </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5555</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="comment">#分割字段</span></span><br><span class="line">    <span class="built_in">split</span> =&gt; &#123; <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;|&quot;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动logstash实例</span></span><br><span class="line">[root@elk01:2 ~]# logstash -rf /etc/logstash/conf.d/10.beats-mutate.conf </span><br></pre></td></tr></table></figure><p><strong>4. 编写filebeat实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/filebeat/18-apps-to-logstash.yaml</span><br><span class="line">filebeat:</span><br><span class="line">  inputs:</span><br><span class="line">  - <span class="built_in">type</span>: filestream</span><br><span class="line">    paths:</span><br><span class="line">      - /tmp/apps.log </span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">&quot;10.0.0.211:7777&quot;</span>]</span><br><span class="line">  </span><br><span class="line"><span class="comment">#启动实例</span></span><br><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/18-apps-to-logstash.yaml</span><br></pre></td></tr></table></figure><p><strong>5. 输出展示</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;INFO 2024-10-27 09:46:03 [com.linux.generate_log] - DAU&quot;</span>,</span><br><span class="line">        [1] <span class="string">&quot;3013&quot;</span>,</span><br><span class="line">        [2] <span class="string">&quot;评论商品&quot;</span>,</span><br><span class="line">        [3] <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        [4] <span class="string">&quot;25853.85 &quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T01:58:28.229Z</span><br></pre></td></tr></table></figure><h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为[0-4]添加顶级字段</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;INFO 2024-10-27 09:46:03 [com.linux.generate_log] - DAU&quot;</span>,</span><br><span class="line">        [1] <span class="string">&quot;3013&quot;</span>,</span><br><span class="line">        [2] <span class="string">&quot;评论商品&quot;</span>,</span><br><span class="line">        [3] <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        [4] <span class="string">&quot;25853.85 &quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T01:58:28.229Z</span><br></pre></td></tr></table></figure><p><strong>修改logstash实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/10.beats-mutate.conf </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5555</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">      <span class="comment">#分割message字段，以 | 为分隔符</span></span><br><span class="line">      <span class="built_in">split</span> =&gt; &#123; <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;|&quot;</span> &#125;</span><br><span class="line">      <span class="comment">#添加字段</span></span><br><span class="line">      add_field =&gt; &#123;</span><br><span class="line">       <span class="string">&quot;other&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][0]&#125;&quot;</span></span><br><span class="line">       <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][1]&#125;&quot;</span></span><br><span class="line">       <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][2]&#125;&quot;</span></span><br><span class="line">       <span class="string">&quot;svip&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][3]&#125;&quot;</span></span><br><span class="line">       <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][4]&#125;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出展示</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      <span class="string">&quot;svip&quot;</span> =&gt; <span class="string">&quot;2&quot;</span>,</span><br><span class="line">     <span class="string">&quot;other&quot;</span> =&gt; <span class="string">&quot;INFO 2024-10-27 09:46:03 [com.linux.generate_log] - DAU&quot;</span>,</span><br><span class="line"><span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T02:17:55.199Z,</span><br><span class="line">    <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;3013&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;评论商品&quot;</span></span><br></pre></td></tr></table></figure><h3 id="多次切割"><a href="#多次切割" class="headerlink" title="多次切割"></a>多次切割</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">我们发现某个字段内容多（例如本案例的other字段），可实现多次切割输出我们需要的字段</span><br><span class="line">          <span class="string">&quot;svip&quot;</span> =&gt; <span class="string">&quot;2&quot;</span>,</span><br><span class="line">         <span class="string">&quot;other&quot;</span> =&gt; <span class="string">&quot;INFO 2024-10-27 09:46:03 [com.linux.generate_log] - DAU&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T02:17:55.199Z,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;3013&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;评论商品&quot;</span></span><br><span class="line"></span><br><span class="line">对other字段切割，以空格为分隔符，输出如下</span><br><span class="line">         <span class="string">&quot;other&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">        [1] <span class="string">&quot;2024-10-27&quot;</span>,</span><br><span class="line">        [2] <span class="string">&quot;10:46:33&quot;</span>,</span><br><span class="line">        [3] <span class="string">&quot;[com.linux.generate_log]&quot;</span>,</span><br><span class="line">        [4] <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        [5] <span class="string">&quot;DAU&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改logstash实例，在filter里再次分割，将时间和网站信息都放在顶级字段里</span></span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="comment">#分割other字段，空格为分隔符</span></span><br><span class="line">    <span class="built_in">split</span> =&gt; &#123; <span class="string">&quot;other&quot;</span> =&gt; <span class="string">&quot; &quot;</span> &#125;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      <span class="comment">#将日期和时间添加到datetime字段中</span></span><br><span class="line">      <span class="string">&quot;datetime&quot;</span> =&gt; <span class="string">&quot;%&#123;[other][1]&#125; %&#123;[other][2]&#125;&quot;</span></span><br><span class="line">      <span class="comment">#将访问的网站添加到www字段中</span></span><br><span class="line">      <span class="string">&quot;www&quot;</span> =&gt; <span class="string">&quot;%&#123;[other][3]&#125;&quot;</span>              </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>输出展示</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">        <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;9928&quot;</span>,</span><br><span class="line">           <span class="string">&quot;www&quot;</span> =&gt; <span class="string">&quot;[com.linux.generate_log]&quot;</span>,</span><br><span class="line">      <span class="string">&quot;datetime&quot;</span> =&gt; <span class="string">&quot;2024-10-27 10:58:19&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;领取优惠券&quot;</span>,</span><br><span class="line">          <span class="string">&quot;svip&quot;</span> =&gt; <span class="string">&quot;2&quot;</span>,</span><br><span class="line">         <span class="string">&quot;other&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">        [1] <span class="string">&quot;2024-10-27&quot;</span>,</span><br><span class="line">        [2] <span class="string">&quot;10:58:19&quot;</span>,</span><br><span class="line">        [3] <span class="string">&quot;[com.linux.generate_log]&quot;</span>,</span><br><span class="line">        [4] <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        [5] <span class="string">&quot;DAU&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再次多次切割实现网页字段没有 [ ]</span></span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="built_in">split</span> =&gt; &#123;<span class="string">&quot;www&quot;</span> =&gt; <span class="string">&quot;[&quot;</span>&#125;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;www2&quot;</span> =&gt; <span class="string">&quot;%&#123;[www][1]&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="built_in">split</span> =&gt; &#123;<span class="string">&quot;www2&quot;</span> =&gt;<span class="string">&quot;]&quot;</span>&#125;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      website =&gt; <span class="string">&quot;%&#123;[www2][0]&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#输出展示</span></span><br><span class="line">        <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;3837&quot;</span>,</span><br><span class="line">          <span class="string">&quot;www2&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;com.linux.generate_log&quot;</span></span><br><span class="line">    ],</span><br><span class="line">        <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;浏览页面&quot;</span>,</span><br><span class="line">          <span class="string">&quot;svip&quot;</span> =&gt; <span class="string">&quot;0&quot;</span>,</span><br><span class="line">       <span class="string">&quot;website&quot;</span> =&gt; <span class="string">&quot;com.linux.generate_log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T03:03:39.620Z</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">           <span class="string">&quot;www&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;&quot;</span>,</span><br><span class="line">        [1] <span class="string">&quot;com.linux.generate_log]&quot;</span></span><br><span class="line">    ],</span><br><span class="line">      <span class="string">&quot;datetime&quot;</span> =&gt; <span class="string">&quot;2024-10-27 11:03:40&quot;</span>,</span><br><span class="line">         <span class="string">&quot;other&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">        [1] <span class="string">&quot;2024-10-27&quot;</span>,</span><br><span class="line">        [2] <span class="string">&quot;11:03:40&quot;</span>,</span><br><span class="line">        [3] <span class="string">&quot;[com.linux.generate_log]&quot;</span>,</span><br><span class="line">        [4] <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        [5] <span class="string">&quot;DAU&quot;</span></span><br><span class="line">    ],</span><br><span class="line">         <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;16570.26 &quot;</span>,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;INFO 2024-10-27 11:03:40 [com.linux.generate_log] - DAU&quot;</span>,</span><br><span class="line">        [1] <span class="string">&quot;8129&quot;</span>,</span><br><span class="line">        [2] <span class="string">&quot;使用优惠券&quot;</span>,</span><br><span class="line">        [3] <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        [4] <span class="string">&quot;16570.26 &quot;</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><h3 id="删除多余字段"><a href="#删除多余字段" class="headerlink" title="删除多余字段"></a>删除多余字段</h3><blockquote><p>移除如message，other，www等字段（已经都做了提取切割，所有不需要再展示了）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改logstash实例</span></span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;message&quot;</span>,<span class="string">&quot;other&quot;</span>,<span class="string">&quot;www&quot;</span>,<span class="string">&quot;www2&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#最终效果</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;datetime&quot;</span> =&gt; <span class="string">&quot;2024-10-27 11:09:12&quot;</span>,</span><br><span class="line">         <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;18005.57 &quot;</span>,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;5897&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;提交订单&quot;</span>,</span><br><span class="line">          <span class="string">&quot;svip&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">       <span class="string">&quot;website&quot;</span> =&gt; <span class="string">&quot;com.linux.generate_log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T03:09:13.875Z</span><br></pre></td></tr></table></figure><h3 id="最终logstash实例-并输出到ES集群"><a href="#最终logstash实例-并输出到ES集群" class="headerlink" title="最终logstash实例,并输出到ES集群"></a>最终logstash实例,并输出到ES集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/10.beats-mutate.conf </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5555</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">      <span class="comment">#分割message字段（以|为分隔符）</span></span><br><span class="line">      <span class="built_in">split</span> =&gt; &#123; <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;|&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#添加字段</span></span><br><span class="line">      add_field =&gt; &#123; </span><br><span class="line">       <span class="string">&quot;other&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][0]&#125;&quot;</span></span><br><span class="line">       <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][1]&#125;&quot;</span></span><br><span class="line">       <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][2]&#125;&quot;</span></span><br><span class="line">       <span class="string">&quot;svip&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][3]&#125;&quot;</span></span><br><span class="line">       <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][4]&#125;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="comment">#分割other字段，空格为分隔符</span></span><br><span class="line">    <span class="built_in">split</span> =&gt; &#123; <span class="string">&quot;other&quot;</span> =&gt; <span class="string">&quot; &quot;</span> &#125;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;datetime&quot;</span> =&gt; <span class="string">&quot;%&#123;[other][1]&#125; %&#123;[other][2]&#125;&quot;</span></span><br><span class="line">      <span class="string">&quot;www&quot;</span> =&gt; <span class="string">&quot;%&#123;[other][3]&#125;&quot;</span> </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="built_in">split</span> =&gt; &#123;<span class="string">&quot;www&quot;</span> =&gt; <span class="string">&quot;[&quot;</span>&#125;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;www2&quot;</span> =&gt; <span class="string">&quot;%&#123;[www][1]&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="built_in">split</span> =&gt; &#123;<span class="string">&quot;www2&quot;</span> =&gt;<span class="string">&quot;]&quot;</span>&#125;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      website =&gt; <span class="string">&quot;%&#123;[www2][0]&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="comment">#转换类型</span></span><br><span class="line">    convert =&gt; &#123;</span><br><span class="line">       <span class="comment">#将字段price类型转为浮点型（默认是字符串，在ES集群里kibana出图无法做到求和等操作）</span></span><br><span class="line">      <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;float&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#移除多余字段</span></span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;message&quot;</span>,<span class="string">&quot;other&quot;</span>,<span class="string">&quot;www&quot;</span>,<span class="string">&quot;www2&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line"> elasticsearch&#123;</span><br><span class="line">   hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">   index =&gt; <span class="string">&quot;auto_logs-apps-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="logstash多分支语句"><a href="#logstash多分支语句" class="headerlink" title="logstash多分支语句"></a>logstash多分支语句</h2><p><strong>1. 多分枝语句     —基础类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/11-multiple_input.conf </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5555</span><br><span class="line">    <span class="built_in">type</span> =&gt; beats</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 6666</span><br><span class="line">    <span class="built_in">type</span> =&gt; tcp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [<span class="string">&quot;/tmp/luay.log&quot;</span>]</span><br><span class="line">    start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; file</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> 999 |nc 10.0.0.211 6666</span><br><span class="line">[root@elk01:2 ~]# <span class="built_in">echo</span> 7989 &gt;/tmp/luay.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;tcp&quot;</span>,</span><br><span class="line">          <span class="string">&quot;port&quot;</span> =&gt; 56998,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T08:53:35.394Z,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;999&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;file&quot;</span>,</span><br><span class="line">          <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/tmp/luay.log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T08:54:44.088Z,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;7989&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 多分枝语句   —复杂类形</strong></p><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-outputs-elasticsearch.html">官方案例</a></p><p>添加  if  判断</p></blockquote><h3 id="input多分支"><a href="#input多分支" class="headerlink" title="input多分支"></a>input多分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;要求&#x27;</span>：</span><br><span class="line">1.删除tcp类型的version和port字段</span><br><span class="line">2.删除file类型的version和host字段，将path字段改为filepath字段</span><br><span class="line">3.beat类型同案例10.beats-mutate.conf（往上翻）</span><br><span class="line"></span><br><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/11-multiple_input.conf </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5555</span><br><span class="line">    <span class="built_in">type</span> =&gt; beats</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 6666</span><br><span class="line">    <span class="built_in">type</span> =&gt; tcp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [<span class="string">&quot;/tmp/luay.log&quot;</span>]</span><br><span class="line">    start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; file</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;tcp&quot;</span> &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;port&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;file&quot;</span> &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      rename =&gt; &#123; <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;filepath&quot;</span> &#125;</span><br><span class="line">      remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;host&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">     mutate &#123;</span><br><span class="line">       <span class="built_in">split</span> =&gt; &#123;<span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;|&quot;</span>&#125;</span><br><span class="line">       add_field =&gt; &#123;</span><br><span class="line">         <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][1]&#125;&quot;</span></span><br><span class="line">         <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][2]&#125;&quot;</span></span><br><span class="line">         <span class="string">&quot;svip&quot;</span>  =&gt; <span class="string">&quot;%&#123;[message][3]&#125;&quot;</span></span><br><span class="line">         <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][4]&#125;&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125; </span><br><span class="line">   &#125;</span><br><span class="line">   mutate &#123;</span><br><span class="line">     remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>,<span class="string">&quot;message&quot;</span>]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> 999999999 &gt;&gt;/tmp/luay.log </span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> 11111111 |nc 10.0.0.211 6666</span><br><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/18-apps-to-logstash.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment">#输出展示</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;filepath&quot;</span> =&gt; <span class="string">&quot;/tmp/luay.log&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T09:22:11.843Z</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;tcp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T09:22:28.519Z</span><br><span class="line">    &#123;</span><br><span class="line">          <span class="string">&quot;svip&quot;</span> =&gt; <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;加入收藏&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;beats&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-27T09:23:57.599Z,</span><br><span class="line">         <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;27975.99 &quot;</span>,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;6505&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="output-多分支"><a href="#output-多分支" class="headerlink" title="output 多分支"></a>output 多分支</h3><blockquote><p>输出es集群，多分支索引</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/11-multiple_input.conf </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5555</span><br><span class="line">    <span class="built_in">type</span> =&gt; beats</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 6666</span><br><span class="line">    <span class="built_in">type</span> =&gt; tcp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [<span class="string">&quot;/tmp/luay.log&quot;</span>]</span><br><span class="line">    start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; file</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;tcp&quot;</span> &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;port&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;file&quot;</span> &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      rename =&gt; &#123; <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;filepath&quot;</span> &#125;</span><br><span class="line">      remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;host&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">     mutate &#123;</span><br><span class="line">       <span class="built_in">split</span> =&gt; &#123;<span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;|&quot;</span>&#125;</span><br><span class="line">       add_field =&gt; &#123;</span><br><span class="line">         <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][1]&#125;&quot;</span></span><br><span class="line">         <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][2]&#125;&quot;</span></span><br><span class="line">         <span class="string">&quot;svip&quot;</span>  =&gt; <span class="string">&quot;%&#123;[message][3]&#125;&quot;</span></span><br><span class="line">         <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][4]&#125;&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125; </span><br><span class="line">   &#125;</span><br><span class="line">   mutate &#123;</span><br><span class="line">     remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>,<span class="string">&quot;message&quot;</span>]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="comment">#stdout &#123;</span></span><br><span class="line">  <span class="comment"># codec =&gt; rubydebug</span></span><br><span class="line">  <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;tcp&quot;</span> &#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">      hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;logstash-if-tcp-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;file&quot;</span> &#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">      hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;logstash-if-file-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">      hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;logstash-if-apps-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027174748739.png" alt="image-20241027174748739"></p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><blockquote><p>将/var/log/syslog，/var/log/auth.log，/var/log/vmware-vmsvc*.log这三文件写入ES不同的索引，要求使用if多分支语句完成。</p><ol><li>要求写入ES索引分别带有syslog,auth,vmware等关键词</li><li>含syslog关键词索引要求分片数量为3，副本数量为0</li><li>含auth关键词索引要求分片数量为5，副本数量为0</li><li>含vmware关键词索引要求分片数量为8，副本数量为0</li></ol></blockquote><p><strong>1. 编写logstash实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/12-if_test.conf</span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [<span class="string">&quot;/var/log/syslog&quot;</span>]</span><br><span class="line">    start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; syslog</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [<span class="string">&quot;/var/log/auth.log&quot;</span>]</span><br><span class="line">    start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; auth</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [<span class="string">&quot;/var/log/vmware-vmsvc*.log&quot;</span>]</span><br><span class="line">    start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; vmware</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;syslog&quot;</span> &#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">      hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;linux-syslog-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;auth&quot;</span> &#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">      hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;linux-auth-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">      hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;linux-vmware-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 设置单独副本</strong></p><blockquote><p>索引管理—&gt;索引模板—&gt;创建索引模板</p></blockquote><p><strong>3分片0副本</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027180916483.png" alt="image-20241027180916483"></p><p><img src="https://cos.lukme.top/Pic/image-20241027181113679.png" alt="image-20241027181113679"></p><p>“number_of_replicas”:0,<br>“number_of_shards”:3</p><p><strong>其它两个同理如上操作</strong></p><p><strong>3. 启动logstash实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# logstash -rf /etc/logstash/conf.d/12-if_test.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：logstash采集文件也是有缓存的，重新采集记得删除缓存</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027181807970.png" alt="image-20241027181807970"></p><h2 id="logstash的pipeline语句"><a href="#logstash的pipeline语句" class="headerlink" title="logstash的pipeline语句"></a>logstash的pipeline语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Logstash的pipeline，多实例和多分支语句对比&#x27;</span></span><br><span class="line">1.多分支语句的优缺点</span><br><span class="line">优点:</span><br><span class="line">可以将多个input写入到同一个配置文件，运行一个Logstash实例，更加轻量级。</span><br><span class="line">缺点:</span><br><span class="line">修改一个配置就算是热加载配置，如果修改配置出错，则导致整个Logstash无法继续运行，会影响到其他input。</span><br><span class="line">2.logstash的多实例</span><br><span class="line">优点:</span><br><span class="line">每个实例互不影响，没有太强的逻辑性，理解简单。</span><br><span class="line">缺点:</span><br><span class="line">需要管理多个数据目录，相对而言更加重量级。</span><br><span class="line">3.pipeline</span><br><span class="line">优点:</span><br><span class="line">轻量级，一个Logstash实例，轻量级，相对而言配置没有那么复杂，而是将配置文件拆分成多个文件的思路。</span><br><span class="line">每个文件都有独立的input，filter和output，我们将其分为多个不同的pipeline。</span><br><span class="line">无需使用-f选项指定配置文件，而是直接启动Logstash，Logstash会自动加载pipeline文件。</span><br><span class="line">缺点:</span><br><span class="line">几乎完美，当Logstash挂掉，会影响到所有的配置。</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/logstash-pipeline.png" alt="logstash-pipeline.drawio"></p><h3 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h3><p><strong>1. tcp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/13-pipeline_tcp.conf</span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 6666</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;address&quot;</span> =&gt; <span class="string">&quot;%&#123;host&#125;:%&#123;port&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>, <span class="string">&quot;host&quot;</span>,<span class="string">&quot;port&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch&#123;</span><br><span class="line">    hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">    index =&gt; <span class="string">&quot;logstash-pipeline-tcp-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. file</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/14-pipeline_file.conf</span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [<span class="string">&quot;/tmp/luay.log&quot;</span>]</span><br><span class="line">    start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    rename =&gt; &#123; <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;filepath&quot;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch&#123;</span><br><span class="line">    hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">    index =&gt; <span class="string">&quot;logstash-pipeline-file-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. beats</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/15-pipeline_beat.conf</span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5555</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    <span class="built_in">split</span> =&gt; &#123;<span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;|&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][1]&#125;&quot;</span></span><br><span class="line">      <span class="string">&quot;action&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][2]&#125;&quot;</span></span><br><span class="line">      <span class="string">&quot;svip&quot;</span>  =&gt; <span class="string">&quot;%&#123;[message][3]&#125;&quot;</span></span><br><span class="line">      <span class="string">&quot;price&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][4]&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;@version&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;tags&quot;</span>, <span class="string">&quot;log&quot;</span> , <span class="string">&quot;host&quot;</span>,<span class="string">&quot;ecs&quot;</span>,<span class="string">&quot;message&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch&#123;</span><br><span class="line">    hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">    index =&gt; <span class="string">&quot;logstash-pipeline-apps-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#filebeat实例（log文件自备）</span></span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/18-apps-to-logstash.yaml </span><br><span class="line">filebeat:</span><br><span class="line">  inputs:</span><br><span class="line">  - <span class="built_in">type</span>: filestream</span><br><span class="line">    paths:</span><br><span class="line">      - /tmp/apps.log </span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">&quot;10.0.0.211:5555&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="修改pipeline文件"><a href="#修改pipeline文件" class="headerlink" title="修改pipeline文件"></a>修改pipeline文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/pipelines.yml </span><br><span class="line">···</span><br><span class="line">- pipeline.id: tcp-pipeline</span><br><span class="line">  path.config: <span class="string">&quot;/etc/logstash/conf.d/13-pipeline_tcp.conf&quot;</span></span><br><span class="line">- pipeline.id: file-pipeline</span><br><span class="line">  path.config: <span class="string">&quot;/etc/logstash/conf.d/14-pipeline_file.conf&quot;</span></span><br><span class="line">- pipeline.id: beat-pipeline</span><br><span class="line">  path.config: <span class="string">&quot;/etc/logstash/conf.d/15-pipeline_beat.conf&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#  pipeline.id  名字可自定义</span></span><br></pre></td></tr></table></figure><h3 id="创建软链接文件"><a href="#创建软链接文件" class="headerlink" title="创建软链接文件"></a>创建软链接文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">mkdir</span> /usr/share/logstash/config</span><br><span class="line"></span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">ln</span> -svf /etc/logstash/pipelines.yml /usr/share/logstash/config/pipelines.yml</span><br><span class="line"><span class="string">&#x27;/usr/share/logstash/config/pipelines.yml&#x27;</span> -&gt; <span class="string">&#x27;/etc/logstash/pipelines.yml&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>启动logstash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# logstash -r</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：pipeline语法 启动时候不需要指定文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#写入数据</span></span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> 898989 |nc 10.0.0.211 6666</span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> 9900 &gt;/tmp/luay.log</span><br><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/18-apps-to-logstash.yaml</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027185825270.png" alt="image-20241027185825270"></p><p><img src="https://cos.lukme.top/Pic/logstash-pipeline.png" alt="logstash-pipeline.drawio"></p>]]></content>
    
    
    <summary type="html">使用logstash拿取filebeat采集的数据，并作筛选过滤</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>04.logstash部署及实操</title>
    <link href="https://lukme.top/posts/9a6613a9.html"/>
    <id>https://lukme.top/posts/9a6613a9.html</id>
    <published>2024-10-30T02:36:01.000Z</published>
    <updated>2024-10-30T03:23:51.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署logstash"><a href="#部署logstash" class="headerlink" title="部署logstash"></a>部署logstash</h2><p>Logstash是免费且开放的服务器端数据处理管道，能够从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中，Logstash的作用就是在于日志处理，转换操作。</p><p><strong>1.下载logstash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]#   wget https://artifacts.elastic.co/downloads/logstash/logstash-7.17.23-amd64.deb</span><br></pre></td></tr></table></figure><p><strong>2.安装logstash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# dpkg -i logstash-7.17.23-amd64.deb</span><br></pre></td></tr></table></figure><p><strong>3.添加软链接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">ln</span> -svf /usr/share/logstash/bin/logstash /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看帮助</span></span><br><span class="line">[root@elk01:1 ~]# logstash -h</span><br></pre></td></tr></table></figure><p><strong>4.启动测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]#  logstash -e <span class="string">&quot;input &#123; stdin &#123; type =&gt; stdin &#125; &#125; output &#123; stdout &#123; codec =&gt; rubydebug &#125; &#125;&quot;</span></span><br><span class="line">···</span><br><span class="line">The stdin plugin is now waiting <span class="keyword">for</span> input:</span><br><span class="line">111111</span><br><span class="line">&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;stdin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-05T01:48:28.131Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;111111&quot;</span>,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示：如果你出现了和我一样报错如下</p><p>[ERROR] 2024-10-05 01:25:25.226 [pool-3-thread-1] jvm - Unknown garbage collector name {:name=&gt;”G1 Concurrent GC”}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">表示 Logstash 不识别 <span class="string">&quot;G1 Concurrent GC&quot;</span> 作为垃圾回收器的名称。这可能是因为在 `jvm.options` 配置文件中指定了错误的垃圾回收器名称。</span><br><span class="line"></span><br><span class="line">解决：编辑 jvm.options 文件：</span><br><span class="line">[root@elk01:1 ~]# vim /etc/logstash/jvm.options </span><br><span class="line"></span><br><span class="line"><span class="comment">#修改或添加 JVM 参数：</span></span><br><span class="line">在 jvm.options 文件中，应该设置 -XX:+UseG1GC 来启用 G1 垃圾回收器，而不是使用 <span class="string">&quot;G1 Concurrent GC&quot;</span> 这样的名称。找到任何提及垃圾回收器的行，没有就添加，之后重启logstash</span><br><span class="line"></span><br><span class="line">-XX:+UseG1GC</span><br></pre></td></tr></table></figure></blockquote><h2 id="logstash组件"><a href="#logstash组件" class="headerlink" title="logstash组件"></a>logstash组件</h2><p>logstash有三个核心组件，分别为input，filter和output。其中，filter组件是可选组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">logstash多实例及pipeline概念</span><br><span class="line">input：</span><br><span class="line">数据从哪里来，可以是stdin,tcp,file,kafka,redis,...</span><br><span class="line">推荐阅读:</span><br><span class="line">https://www.elastic.co/guide/en/logstash/7.17/input-plugins.html</span><br><span class="line"></span><br><span class="line">filter:</span><br><span class="line">对数据进行过滤操作，常用的插件有: grok,<span class="built_in">date</span>,mutate,user_agent,geoip,json,...</span><br><span class="line">推荐阅读:</span><br><span class="line">https://www.elastic.co/guide/en/logstash/7.17/filter-plugins.html</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">数据到哪去，一般情况下都是写入elasticsearch或者stdout(测试)</span><br><span class="line">推荐阅读：</span><br><span class="line">https://www.elastic.co/guide/en/logstash/7.17/output-plugins.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一个节点可以部署多个Logstash实例，每个Logstash实例可以有多个pipeline，每个pipeline可以有input，filter和output插件。</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/logstash.png" alt="logstash"></p><h2 id="logstash类型案例"><a href="#logstash类型案例" class="headerlink" title="logstash类型案例"></a>logstash类型案例</h2><blockquote><p>yes的为必选参数</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241005110046458.png" alt="image-20241005110046458"></p><h3 id="input-tcp类型"><a href="#input-tcp类型" class="headerlink" title="input-tcp类型"></a>input-tcp类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.编写logstash实例，标准输出stdout</span></span><br><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/01_tcp_stdout.conf</span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; <span class="string">&quot;8888&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.启动logstash实例   （  -r   热加载，-f  后要跟实例）</span></span><br><span class="line">[root@elk01:2 ~]# logstash -rf /etc/logstash/conf.d/01_tcp_stdout.conf </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.别的节点发送测试数据</span></span><br><span class="line">[root@elk02:1 ~]# <span class="built_in">echo</span> 999|nc 10.0.0.211 8888</span><br><span class="line"></span><br><span class="line"><span class="comment">#终端输出</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;999&quot;</span>,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;10.0.0.212&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-05T03:22:38.582Z,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;port&quot;</span> =&gt; 46720</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#标准输出的#，若不指定codec属性，则默认的解码器为rubydebug。</span></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">   <span class="comment"># codec =&gt; rubydebug</span></span><br><span class="line">   <span class="comment"># 此处指定的codec的解码器为json格式</span></span><br><span class="line">   codec =&gt; json </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#终端输出则为</span></span><br><span class="line">&#123;<span class="string">&quot;@timestamp&quot;</span>:<span class="string">&quot;2024-08-29T07:10:55.639Z&quot;</span>,<span class="string">&quot;@version&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;host&quot;</span>:<span class="string">&quot;10.0.0.91&quot;</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;9999&quot;</span>,<span class="string">&quot;port&quot;</span>:58096&#125;</span><br></pre></td></tr></table></figure><h3 id="input-file类型"><a href="#input-file类型" class="headerlink" title="input-file类型"></a>input-file类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.编写logstash实例，标准输出stdout（注意path类型是数组，详细看官网） </span></span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/02_file_stdout.yaml </span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [<span class="string">&quot;/tmp/test.conf&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.启动logstash实例</span></span><br><span class="line">[root@elk01:2 ~]# logstash -rf /etc/logstash/conf.d/02_file_stdout.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.发送测试数据</span></span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">echo</span> <span class="string">&#x27;666&#x27;</span> &gt;&gt;/tmp/test.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#logstash的标准输出</span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-05T03:34:23.489Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;666&quot;</span>,</span><br><span class="line">          <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/tmp/test.conf&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="logstash的采集缓存"><a href="#logstash的采集缓存" class="headerlink" title="logstash的采集缓存"></a>logstash的采集缓存</h3><blockquote><p>​     当我们停掉实例2时候，再次往test.conf里写入新数据  7890 ，重新执行实例2时候，发现数据并不会重新采集，而是只采集新数据，这种现象同filebeat一样，将采集过的记录放在缓存文件里，下次采集前先读取这个文件，看看采集的偏移量，那这个文件在哪呢？</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动实例时候发现读取文件--&gt;/usr/share/logstash/data/plugins/inputs/file/.sincedb_387337cd9c394c04fb5a33c176cf8715<span class="string">&quot;, :path=&gt;[&quot;</span>/tmp/test.conf<span class="string">&quot;]&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看这个文件，里面记录了这个文件已经被采集的信息</span></span><br><span class="line"><span class="string">[root@elk01:3 ~]# cat /usr/share/logstash/data/plugins/inputs/file/.sincedb_387337cd9c394c04fb5a33c176cf8715 </span></span><br><span class="line"><span class="string">788369 0 64768 14 1728099475.853982 /tmp/test.conf</span></span><br></pre></td></tr></table></figure><blockquote><p>如何实现文件重新采集？</p><p>1.清空这个文件喽，直接清空这一级目录所有文件即可</p><p><code>rm -f /usr/share/logstash/data/plugins/inputs/file/.sincedb*</code></p><p>2.设置文件采集为从头采集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# vim /etc/logstash/conf.d/02_file_stdout.yaml </span><br><span class="line">input &#123;</span><br><span class="line">file &#123;</span><br><span class="line"> path =&gt; [<span class="string">&quot;/tmp/test.conf&quot;</span>,<span class="string">&quot;/tmp/test2.log&quot;</span>]  <span class="comment">#path数组，支持采集多个文件</span></span><br><span class="line"> start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line"> stdout &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>start_position  默认值end  从文件最后位置采集，有效值为 beginning  end</p></blockquote><h3 id="logstash的多实例"><a href="#logstash的多实例" class="headerlink" title="logstash的多实例"></a>logstash的多实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同filebeat一样，启动时候指定不同数据目录    --path.data</span><br><span class="line">logstash -rf /etc/logstash/conf.d/02-file-to-stdout.conf --path.data /tmp/logstash-data</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">带你部署logstash并且简单使用logstash插件</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人云盘</title>
    <link href="https://lukme.top/posts/aca79867.html"/>
    <id>https://lukme.top/posts/aca79867.html</id>
    <published>2024-10-15T11:30:07.000Z</published>
    <updated>2024-10-15T11:37:58.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h2><p>ownCloud是一个基于云计算的开源文件共享和协作平台，它允许用户在多个设备上同步、共享和协作文件。</p><p><strong>主要特点</strong></p><ul><li>用户可以将ownCloud私有云盘与其他设备同步，随时随地访问和管理文件。</li><li>支持跨平台访问，包括Windows、Mac、Android、iOS、Linux等。</li><li>提供公共链接分享功能，可以设置密码和过期日期，确保文件分享的安全性。</li><li>团队成员可以在同一个ownCloud私有云盘中共享和协作文件，提高团队效率。</li><li>支持实时协作，如同时编辑文档、创建演示文稿等。</li><li>ownCloud可以作为一个备份解决方案，将用户的重要数据备份到私有云盘中。</li><li>提供版本控制功能，可以恢复之前的文件版本，防止数据丢失。</li><li>ownCloud可以与多种应用程序集成，如OnlyOffice、Microsoft 365、Collabora Online等，满足用户的个性化需求。</li><li>支持HTTPS和SSL加密，确保数据在传输过程中的安全性。</li><li>提供多因素认证、文件生命周期管理等安全功能。</li></ul><p><strong>使用场景</strong></p><ul><li>用于个人文件同步、备份和分享。跨平台访问，方便在不同设备之间切换。</li><li>用于团队协作、文件共享和版本控制。提高团队效率，降低IT成本。</li><li>用于学生作业提交、教师资源共享等。提供安全、可靠的文件存储和分享环境</li></ul><p><strong>技术架构</strong></p><p>ownCloud采用三层架构，将存储、后端和前端组件分离，通过安全、明确的API进行通信。这种架构使得ownCloud具有高可扩展性和灵活性。</p><p>如需了解更多信息，可以访问其官方网站或查阅相关的技术文档。</p><blockquote><p>官方网站</p><p><a href="https://owncloud.com/">https://owncloud.com/</a></p><p>Docker镜像</p><p><a href="https://hub.docker.com/_/owncloud">https://hub.docker.com/_/owncloud</a></p><p>GitHub地址</p><p><a href="https://github.com/owncloud/core">https://github.com/owncloud/core</a></p></blockquote><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>Docker部署操作步骤：安装Docker、拉取镜像、启动容器。本篇基于Centos7系统操作安装</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.添加官方docker源</span></span><br><span class="line">[root@docker01 ~]# vim /etc/yum.repos.d/docker-ce.repo </span><br><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.替换华为源（docker官方众所周原因不能访问以及下载慢，这里使用华为镜像源）</span></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s+download.docker.com+mirrors.huaweicloud.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.安装docker</span></span><br><span class="line">[root@docker01 ~]# yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.更改镜像加速（如果失效，也可往上找其他加速地址）</span></span><br><span class="line">[root@docker01 ~]# <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dns&quot;</span>: [<span class="string">&quot;8.8.8.8&quot;</span>, <span class="string">&quot;8.8.4.4&quot;</span>],</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://dockerproxy.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.nju.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl daemon-reload</span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取数据库镜像</span></span><br><span class="line">[root@docker01 ~]# docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取owncloud镜像</span></span><br><span class="line">[root@docker01 ~]# docker pull owncloud</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建mysql服务（这里的数据库密码也是你访问云盘的密码）</span></span><br><span class="line">[root@docker01 ~]# docker run --name db --<span class="built_in">env</span> MYSQL_ROOT_PASSWORD=luay123 -d --restart=always mysql</span><br><span class="line"></span><br><span class="line">-name  db         给容器起个名字，可自定义</span><br><span class="line">--restart=always  docker每次重启都会启动这个容器</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建一个软件目录，方便管理owncloud的数据，包括但不限于你上传的图片，文件等</span></span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> /app/owncloud/ -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建owncloud服务</span></span><br><span class="line"><span class="comment"># --link mydb:mydb表示连接的另外一个容器mydb</span></span><br><span class="line">[root@docker01 ~]# docker run --name mycloud -p 8081:80 --<span class="built_in">link</span> mydb:mydb -d -v /app/owncloud/:/var/www/html --restart=always owncloud</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看运行状态  （是否都是up状态，不要有端口冲突）</span></span><br><span class="line">[root@web01 ~]# docker ps -a </span><br><span class="line">CONTAINER ID   IMAGE         CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">273ee893d887   owncloud    6 seconds ago    Up 4 seconds    0.0.0.0:8081-&gt;80/tcp, :::8081-&gt;80/tcp   mycloud</span><br><span class="line">a614a95ec067   mysql       33 minutes ago   Up 33 minutes   3306/tcp, 33060/tcp                     mydb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.浏览器访问   你的ip:8081   例如我的ip是10.0.0.7     那就访问10.0.0.7:8081    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建管理员账号</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241015190649471.png" alt="image-20241015190649471"></p><p><strong>使用创建的管理员账号登录</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241015191024034.png" alt="image-20241015191024034"></p><p><img src="https://cos.lukme.top/Pic/image-20241015191332027.png" alt="image-20241015191332027"></p><h3 id="管理文件"><a href="#管理文件" class="headerlink" title="管理文件"></a>管理文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">还记得我们创建的数据文件目录吗？  看看我们上传的图片是不是就在这😎</span><br><span class="line"></span><br><span class="line">[root@web01 ~]# ll /app/owncloud/data/admin/files/</span><br><span class="line">-rw-r--r-- 1 33 tape  529735 May  6 14:09 8CE7E8A4D305671B267848D4E720CAE3.jpg</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">如何搭建一个属于自己的云盘呢，这里带你使用docker来搭建属于自己的云盘吧。</summary>
    
    
    
    <category term="爱调研" scheme="https://lukme.top/categories/%E7%88%B1%E8%B0%83%E7%A0%94/"/>
    
    
    <category term="个人云盘" scheme="https://lukme.top/tags/%E4%B8%AA%E4%BA%BA%E4%BA%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>将hexo部署到博客上</title>
    <link href="https://lukme.top/posts/7a77547d.html"/>
    <id>https://lukme.top/posts/7a77547d.html</id>
    <published>2024-10-10T03:17:04.000Z</published>
    <updated>2024-10-15T13:47:21.293Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇是以windows本地已经部署好hexo之后操作，windows本地已经安装好git</p></blockquote><p><a href="https://blog.csdn.net/weixin_42242910/article/details/136297201">windows安装git</a></p><h4 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h4><p>打开Git Bash，依次输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;     # xxx@xxx.com改为邮箱</span><br><span class="line">git config --global user.name &quot;xxx&quot;              # xxx为用户名</span><br></pre></td></tr></table></figure><p>此处的邮箱和用户名用于标识是哪位用户提交的代码，起个自己喜欢的名称即可，邮箱最好是真实的邮箱</p><h4 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h4><blockquote><p>使用Xshell或者其他软件连接服务器，我使用的是WindTerm，开源免费，在此放个链接<a href="https://winterm.org/">WindTerm官网 (winterm.org)</a>。</p></blockquote><h5 id="查看是否安装了Git"><a href="#查看是否安装了Git" class="headerlink" title="查看是否安装了Git"></a>查看是否安装了Git</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>若显示如下则无需再次安装GIt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure><h5 id="若未安装则进行安装"><a href="#若未安装则进行安装" class="headerlink" title="若未安装则进行安装"></a>若未安装则进行安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git   # CentOS使用yum安装，Debian使用apt-get安装 请自行查找命令</span><br><span class="line">git --vesion         #显示git版本号，说明安装成功</span><br></pre></td></tr></table></figure><h5 id="添加git用户"><a href="#添加git用户" class="headerlink" title="添加git用户"></a>添加git用户</h5><ol><li><p>root用户默认的权限过大，出于安全考虑，我们为服务器添加一个名为git的用户，用于将博客自动部署至服务器上（不需要主动切换到git用户，我们所有的操作都用root用户即可）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd git     #添加名为git的用户</span><br><span class="line">passwd git      #修改git用户的密码  </span><br></pre></td></tr></table></figure></li><li><p>为git用户授予sudo权限，用WindTerm打开 /etc 目录下的 sudoers 文件，在 root ALL=(ALL) ALL 语句下添加 git ALL=(ALL) ALL ，如图所示。</p><p><img src="https://cos.lukme.top/Pic/image-20241013170104029.png" alt="image-20241013170104029"></p></li></ol><p>   或者在/etc/sudoers.d目录下，新建usergit文件，添加<code>git ALL=(ALL) NOPASSWD:ALL</code>并保存,效果一样</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers.d/usergit</span><br><span class="line">git ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure><h5 id="为git用户添加SSH密钥"><a href="#为git用户添加SSH密钥" class="headerlink" title="为git用户添加SSH密钥"></a>为git用户添加SSH密钥</h5><blockquote><p>若不添加SSH密钥，那么本地计算机对服务器的git仓库进行的所有操作都需要输入密码，我们可以通过为git用户添加SSH密钥的方式来实现免密登录。</p></blockquote><ol><li><p>本地计算机在任意位置打开<code>Git Bash</code>，输入以下命令生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>按三次Enter即可生成密钥</p></li><li><p>进入<code>C:\Users\用户名</code>里面有.ssh目录，里面的id_rsa.pub就是我们需要的文件，例如我的如下</p></li></ol><p><img src="https://cos.lukme.top/Pic/image-20241013170251887.png" alt="image-20241013170251887"></p><ol><li><p>服务器中进入<code>/home/git</code>目录，创建.ssh目录，并新建名为authorized_keys的文件，将id_rsa.pub的内容复制进去并保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">mkdir .ssh</span><br><span class="line">vim authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>为公钥文件和文件夹设置读写权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure></li><li><p>将.ssh文件夹及其内的文件所有权移交给git用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /home/git/.ssh</span><br></pre></td></tr></table></figure></li><li><p>在本地计算机测试是否可以用ssh免密登录服务器。打开Git Bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@xxx.xxx.xxx.xxx     #git@后填写服务器的公网ip</span><br></pre></td></tr></table></figure><p>第一次免密登录会提示让你输入yes/no，输入yes即可，之后就不需要输入yes了，显示以下内容即免密登录成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last login: Tue Jun 18 15:21:51 2024 from 111.194.209.107</span><br></pre></td></tr></table></figure></li></ol><h4 id="服务器创建Git仓库并配置自动部署"><a href="#服务器创建Git仓库并配置自动部署" class="headerlink" title="服务器创建Git仓库并配置自动部署"></a>服务器创建Git仓库并配置自动部署</h4><blockquote><p>这里的Git仓库（repository）可以理解为一个存放着不同版本代码的代码库，包含了项目所有的源文件和版本控制信息。但我们在这里需要用到的是裸库，即仅包含版本控制信息的仓库。后者不保存文件，常用作服务器仓库，实现数据共享和同步。</p><p>自动部署的核心在于git-hooks（钩子），可以理解为一种脚本，在特定条件下触发时会调用钩子并执行钩子文件中的内容。</p></blockquote><ol><li><p>创建进入自己想初始化git仓库的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/repo</span><br><span class="line">cd /home/repo</span><br><span class="line">git init --bare hexo-blog.git    #创建一个名为blog的仓库，--bare参数为创建裸库</span><br></pre></td></tr></table></figure></li><li><p>进入<code>/home/repo/hexo-blog.git/hooks</code>目录，找到<code>post-receive</code>文件（若无则创建），在里面输入<code>git --work-tree=/home/blog/hexo --git-dir=/home/repo/hexo-blog.git checkout -f</code>（work-tree为hexo的部署目录，git-dir为Git仓库的目录）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/repo/hexo-blog.git/hooks</span><br><span class="line">vim post-receive</span><br><span class="line">mkdir -p /home/blog/hexo</span><br></pre></td></tr></table></figure></li><li><p>这里我们使用的是 <code>post-receive</code>钩子，当Git收到push请求的时候就会调用这个钩子。这个钩子中添加的语句执行的操作为：删除hexo部署目录中原有的文件，然后将Git仓库中的内容clone至hexo部署目录下。这样我们在本地更新博客并且执行部署命令后，网页文件会被push至服务器的Git仓库内，钩子文件则会将Git仓库内的网页文件复制到hexo部署目录下，从而实现自动部署功能。</p></li><li><p>为钩子文件及Git仓库目录配置权限。这里需要将我们创建的仓库及部署目录的所有权移交给git用户，因为linux下创建文件时默认只有拥有者（即创建者）才具有读写权限，而Git进行push操作时登录的用户为git用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/repo/hexo-blog.git/hooks/post-receive     #为钩子文件授予可执行权限（+x）</span><br><span class="line">chown -R git:git /home/repo     #将仓库目录的所有权移交给git用户</span><br><span class="line">chown -R git:git /home/blog/hexo     #将hexo部署目录的所有权移交给git用户</span><br></pre></td></tr></table></figure></li><li><p>修改本地Hexo的配置文件_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@你的公网ip:/home/repo/hexo-blog.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1.Centos7使用yum安装</span><br><span class="line">[root@luay ~]# yum -y install nginx</span><br><span class="line"></span><br><span class="line">2.编写hexo的配置文件</span><br><span class="line">[root@luay ~]# vim /etc/nginx/conf.d/hexo.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    <span class="comment"># 服务器公网IP</span></span><br><span class="line">    server_name 123.123.123.123;</span><br><span class="line">    <span class="comment"># 项目的部署地址</span></span><br><span class="line">    root /home/blog/hexo;</span><br><span class="line">    location /&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下配置是绑定SSL证书时使用的，若域名没备案就先不填，使用上面的就行了</span></span><br><span class="line"><span class="comment"># listen 443 ssl;</span></span><br><span class="line">    <span class="comment"># 请填写绑定证书的域名</span></span><br><span class="line">    <span class="comment"># server_name huochairener-blog.cn;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 部署ssl使用的参数</span></span><br><span class="line">    <span class="comment"># if ($server_port !~ 443)&#123;</span></span><br><span class="line">    <span class="comment"># rewrite ^(/.*)$ https://$host$1 permanent;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请填写证书文件的相对路径或绝对路径</span></span><br><span class="line">    <span class="comment"># ssl_certificate /xx/xx/xxxx.crt;</span></span><br><span class="line">    <span class="comment"># 请填写私钥文件的相对路径或绝对路径</span></span><br><span class="line">    <span class="comment"># ssl_certificate_key /xx/xx/xxx.key;</span></span><br><span class="line">    <span class="comment"># ssl_session_timeout 10m;</span></span><br><span class="line">    <span class="comment"># 请按照以下协议配置</span></span><br><span class="line">    <span class="comment"># ssl_protocols TLSv1.2 TLSv1.3;</span></span><br><span class="line">    <span class="comment"># 请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span></span><br><span class="line">    <span class="comment"># ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span></span><br><span class="line">    <span class="comment"># ssl_prefer_server_ciphers on;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.检查nginx语法</span><br><span class="line">nginx -t  <span class="comment"># 一般报错信息很明确，翻译一下就行。若不知道就查查，或者看看文件里有没有多余的空格</span></span><br><span class="line"></span><br><span class="line">4.启动nginx</span><br><span class="line">[root@luay ~]# systemctl start nginx</span><br><span class="line"></span><br><span class="line">5.访问网站</span><br><span class="line">使用http://你的公网ip        </span><br><span class="line">默认情况下输入你的公网ip地址</span><br></pre></td></tr></table></figure><p>nginx常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop    # 停止nginx</span><br><span class="line">nginx -s reload  # 重载nginx，修改配置文件后使用</span><br><span class="line">nginx -t  # 检查配置文件语法是否有错误，常用于修改配置文件后的检查</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这里以腾讯云服务器为例</summary>
    
    
    
    <category term="hexo" scheme="https://lukme.top/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://lukme.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>zabbix微信告警</title>
    <link href="https://lukme.top/posts/96fcc157.html"/>
    <id>https://lukme.top/posts/96fcc157.html</id>
    <published>2024-10-06T13:55:29.000Z</published>
    <updated>2024-10-06T14:17:32.936Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档：<a href="https://developer.work.weixin.qq.com/document/path/99110">https://developer.work.weixin.qq.com/document/path/99110</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在终端某个群组添加机器人之后，创建者可以在机器人详情页看到该机器人特有的webhookurl。开发者可以按以下说明向这个地址发起HTTP POST 请求，即可实现给该群组发送消息</span><br><span class="line"><span class="comment">#假设webhook是   https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用curl命令发消息</span></span><br><span class="line">curl <span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693axxx6-7aoc-4bc4-97a0-0ec2sifa5aaa&#x27;</span> \</span><br><span class="line">   -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">   -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">   &#123;</span></span><br><span class="line"><span class="string">    &quot;msgtype&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">    &quot;text&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;content&quot;: &quot;hello world&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">   &#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>文本类型</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;msgtype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;广州今日天气：29度，大部分多云，降雨概率：60%&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;mentioned_list&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;wangqing&quot;</span><span class="punctuation">,</span><span class="string">&quot;@all&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;mentioned_mobile_list&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;13800001111&quot;</span><span class="punctuation">,</span><span class="string">&quot;@all&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>msgtype</td><td>是</td><td>消息类型，此时固定为text</td></tr><tr><td>content</td><td>是</td><td>文本内容，最长不超过2048个字节，必须是utf8编码</td></tr><tr><td>mentioned_list</td><td>否</td><td>userid的列表，提醒群中的指定成员(@某个成员)，@all表示提醒所有人，如果开发者获取不到userid，可以使用mentioned_mobile_list</td></tr><tr><td>mentioned_mobile_list</td><td>否</td><td>手机号列表，提醒手机号对应的群成员(@某个成员)，@all表示提醒所有人</td></tr></tbody></table></div><h3 id="使用python调用接口"><a href="#使用python调用接口" class="headerlink" title="使用python调用接口"></a>使用python调用接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装python环境</span></span><br><span class="line">[root@zabbix5-server alertscripts]# yum install -y python36-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装Python的requests模块</span></span><br><span class="line">[root@zabbix5-server alertscripts]# pip3 install requests -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编写python脚本</span></span><br><span class="line">[root@web01 ~]# vim wechat.py</span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>&#125;</span><br><span class="line">api_url = <span class="string">&quot;webhook地址&quot;</span></span><br><span class="line">def msg(text):</span><br><span class="line">json_text= &#123;</span><br><span class="line"><span class="string">&quot;msgtype&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line"><span class="string">&quot;text&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;content&quot;</span>: text</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(requests.post(api_url,json.dumps(json_text),headers=headers).content)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">text = sys.argv[1]</span><br><span class="line">msg(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.将脚本放在/usr/lib/zabbix/alertscripts</span></span><br><span class="line">[root@zabbix5-server ~]# vim /usr/lib/zabbix/alertscripts/wechat.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.授权执行权限</span></span><br><span class="line">[root@zabbix5-server ~]# <span class="built_in">chmod</span> +x /usr/lib/zabbix/alertscripts/wechat.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>添加报警媒介</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#web端配置</span></span><br><span class="line">管理&gt;报警媒介类型&gt;创建媒体类型</span><br><span class="line"></span><br><span class="line">脚本参数：&#123;ALERT.MESSAGE&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/QQ_1722843581583.png" alt="QQ_1722843581583"></p><p><img src="https://cos.lukme.top/Pic/QQ_1722843667085.png" alt="QQ_1722843667085"></p><p><strong>添加动作</strong></p><p><img src="https://cos.lukme.top/Pic/QQ_1722843783104.png" alt="QQ_1722843783104"></p><p><img src="https://cos.lukme.top/Pic/QQ_1722843908351.png" alt="QQ_1722843908351"></p><p><img src="https://cos.lukme.top/Pic/QQ_1722844043228.png" alt="QQ_1722844043228"></p><p><img src="https://cos.lukme.top/Pic/QQ_1722844217316.png" alt="QQ_1722844217316"></p><p><strong>添加收件人</strong></p><p><img src="https://cos.lukme.top/Pic/QQ_1722844455876.png" alt="QQ_1722844455876"></p><h3 id="使用shell脚本调用接口"><a href="#使用shell脚本调用接口" class="headerlink" title="使用shell脚本调用接口"></a>使用shell脚本调用接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.编写shell脚本在指定目录下</span></span><br><span class="line">[root@zabbix5-server alertscripts]# vim /usr/lib/zabbix/alertscripts/wechat.sh</span><br><span class="line">[root@zabbix5-server alertscripts]# <span class="built_in">cat</span> wechat.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">web_hook=<span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=96462ac7-122d-4f51-946e-694a4c11d2ed&quot;</span></span><br><span class="line">headers=<span class="string">&quot;Content-Type: application/json&quot;</span></span><br><span class="line">json_file=<span class="string">&quot;/usr/lib/zabbix/alertscripts/msg.json&quot;</span></span><br><span class="line">/bin/cat &gt; <span class="variable">$&#123;json_file&#125;</span> &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;msgtype&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">&quot;text&quot;: &#123;</span></span><br><span class="line"><span class="string">&quot;content&quot;: &quot;$1&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">/usr/bin/curl <span class="string">&quot;<span class="variable">$&#123;web_hook&#125;</span>&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;<span class="variable">$&#123;headers&#125;</span>&quot;</span> \</span><br><span class="line">-d <span class="string">&quot;<span class="subst">$(cat $&#123;json_file&#125;)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建一个json文件</span></span><br><span class="line">[root@zabbix5 ~]#vim /usr/lib/zabbix/alertscripts/msg.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;msgtype&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line"><span class="string">&quot;text&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;content&quot;</span>: <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.授权执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/lib/zabbix/alertscripts/wechat.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.更改属主属组（zabbix启动用户是zabbix，不改则没有权限调用）</span></span><br><span class="line"><span class="built_in">chown</span> zabbix.zabbix /usr/lib/zabbix/alertscripts/wechat.sh</span><br><span class="line"><span class="built_in">chown</span> zabbix.zabbix /usr/lib/zabbix/alertscripts/msg.json</span><br></pre></td></tr></table></figure><p><strong>web界面添加报警类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">管理&gt;报警媒介类型&gt;创建媒介类型</span><br><span class="line"></span><br><span class="line">脚本参数：&#123;ALERT.MESSAGE&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/QQ_1722845658579.png" alt="QQ_1722845658579"></p><p><img src="https://cos.lukme.top/Pic/QQ_1722845826346.png" alt="QQ_1722845826346"></p><p><strong>添加动作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">配置&gt;动作&gt;创建动作</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/QQ_1722845872056.png" alt="QQ_1722845872056"></p><p><img src="https://cos.lukme.top/Pic/QQ_1722846012723.png" alt="QQ_1722846012723"></p><p><strong>添加保存</strong></p><p><img src="https://cos.lukme.top/Pic/QQ_1722846086534.png" alt="QQ_1722846086534"></p><p><strong>添加接收人</strong></p><p><code>添加完记得点更新</code></p><p><img src="https://cos.lukme.top/Pic/QQ_1722846168458.png" alt="QQ_1722846168458"></p>]]></content>
    
    
    <summary type="html">教你实现zabbix监控机器，微信机器人告警通知</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="zabbix" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/zabbix/"/>
    
    
    <category term="zabbix" scheme="https://lukme.top/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>filebeat模块化分析日志</title>
    <link href="https://lukme.top/posts/907ae385.html"/>
    <id>https://lukme.top/posts/907ae385.html</id>
    <published>2024-10-04T17:19:53.000Z</published>
    <updated>2024-10-20T01:43:33.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="filebeat采集docker日志"><a href="#filebeat采集docker日志" class="headerlink" title="filebeat采集docker日志"></a>filebeat采集docker日志</h2><p><strong>1.运行一个nginx的docker容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# docker run --name nginx -d -p 88:80 nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：docker的安装不再赘述</span></span><br></pre></td></tr></table></figure><p><strong>2.访问测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# curl 10.0.0.211:88</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否返回nginx界面，注意端口是否有冲突</span></span><br></pre></td></tr></table></figure><p><strong>3.编写filebeat实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/08-docker-log.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: docker</span><br><span class="line">  tags: <span class="string">&#x27;docker&#x27;</span></span><br><span class="line">  <span class="comment">#下面写容器的id号，写*代表收集所有容器日志</span></span><br><span class="line">  containers.ids:   </span><br><span class="line">  - <span class="string">&quot;*&quot;</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">&quot;http://10.0.0.211:9200&quot;</span>,<span class="string">&quot;http://10.0.0.212:9200&quot;</span>,<span class="string">&quot;http://10.0.0.213:9200&quot;</span>]</span><br><span class="line">  indices:</span><br><span class="line">    - index: <span class="string">&quot;filebeat-docker-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">      when.contains:</span><br><span class="line">        tags: <span class="string">&quot;docker&quot;</span></span><br><span class="line"></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.name: <span class="string">&quot;filebeat&quot;</span></span><br><span class="line">setup.template.pattern: <span class="string">&quot;filebeat*&quot;</span></span><br><span class="line">setup.template.overwrite: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 5</span><br><span class="line">  index.number_of_replicas: 0</span><br><span class="line">  </span><br><span class="line"><span class="comment">#启动filebeat实例</span></span><br><span class="line">[root@elk01:2 ~]# filebeat -e -c /etc/filebeat/08-docker-log.yaml</span><br></pre></td></tr></table></figure><p><strong>3.访问nginx使之产生日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# curl 10.0.0.211:88</span><br><span class="line"><span class="comment">#docker已经映射本地88端口</span></span><br></pre></td></tr></table></figure><h2 id="filebeat模块"><a href="#filebeat模块" class="headerlink" title="filebeat模块"></a>filebeat模块</h2><p>模块是filebeat内置的一些中间件日志监控方案，比如常见的nginx，tomcat，mysql，zookeeper等日志监控。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filebeat内置模块在 /etc/filebeat/modules.d/下。</span><br><span class="line">被禁用的模块后缀带.disabled</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看模块列表</span></span><br><span class="line">[root@elk01:2 ~]#  filebeat modules list</span><br></pre></td></tr></table></figure><p><strong>启禁用模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# filebeat modules <span class="built_in">enable</span> nginx tomcat</span><br><span class="line"></span><br><span class="line">[root@elk01:2 ~]# filebeat modules <span class="built_in">disable</span> tomcat</span><br></pre></td></tr></table></figure><h2 id="模块分析nginx访问日志"><a href="#模块分析nginx访问日志" class="headerlink" title="模块分析nginx访问日志"></a>模块分析nginx访问日志</h2><h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.防止索引冲突，删除所有索引和索引模式</span><br><span class="line">2.还原nginx日志格式（如果之前你做过nginx输出格式为json格式的话就将nginx配置文件还原为原格式）</span><br><span class="line">3.检查nginx是否启用，配置文件是否OK（nginx -t），启用nginx模块（filebeat modules <span class="built_in">enable</span> nginx）</span><br><span class="line">4.如果你的nginx日志文件不在默认的目录则修改实例nginx文件，如果默认目录则跳过</span><br><span class="line">[root@elk01:2 ~]#  vim /etc/filebeat/modules.d/nginx.yml </span><br><span class="line">···#修改你的日志文件目录</span><br><span class="line">var.paths: [<span class="string">&quot;/yourpath/nginx/access.log*&quot;</span>]</span><br><span class="line">···</span><br></pre></td></tr></table></figure><h3 id="编写filebeat的配置文件"><a href="#编写filebeat的配置文件" class="headerlink" title="编写filebeat的配置文件"></a>编写filebeat的配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/10-nginx-modules.yaml </span><br><span class="line"><span class="comment"># 配置filebeat的启用模块</span></span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  <span class="comment"># 默认会去找filebeat安装目录下的&quot;modules.d&quot;所有以&quot;.yml&quot;结尾的文件</span></span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  <span class="comment"># 是否支持热加载</span></span><br><span class="line">  reload.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">&quot;http://10.0.0.211:9200&quot;</span>,<span class="string">&quot;http://10.0.0.212:9200&quot;</span>,<span class="string">&quot;http://10.0.0.213:9200&quot;</span>] </span><br><span class="line">  index: <span class="string">&quot;filebeat-nginx-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.name: <span class="string">&quot;filebeat-nginx&quot;</span></span><br><span class="line">setup.template.pattern: <span class="string">&quot;filebeat-nginx*&quot;</span></span><br><span class="line">setup.template.overwrite: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 5</span><br><span class="line">  index.number_of_replicas: 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动filebeat实例</span></span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/10-nginx-modules.yaml</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241004102923489.png" alt="image-20241004102923489"></p><blockquote><p>日后便可以在  菜单栏—&gt;Discover里查询分析nginx日志  如下图</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241004103225591.png" alt="image-20241004103225591"></p><h3 id="统计网站日PV量"><a href="#统计网站日PV量" class="headerlink" title="统计网站日PV量"></a>统计网站日PV量</h3><blockquote><p>可以理解为  一个页面就是一条PV，filebeat是按行统计，nginx的每个访问记录都为一行，以计数方式统计为日PV</p><p>点击保存即可保存可视化库</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241004103908465.png" alt="image-20241004103908465"></p><h3 id="统计网站日UV"><a href="#统计网站日UV" class="headerlink" title="统计网站日UV"></a>统计网站日UV</h3><blockquote><p>这个统计不太准确，获取的ip是日志里每行第一个的ip，这个ip其实是负载均衡的ip，如果想要获取每个用户真实ip，nginx配置文件需要设置获取用户真实ip才算是日UV量，保存uv库</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241004111335927.png" alt="image-20241004111335927"></p><h3 id="统计带宽"><a href="#统计带宽" class="headerlink" title="统计带宽"></a>统计带宽</h3><p><img src="https://cos.lukme.top/Pic/image-20241004112012078.png" alt="image-20241004112012078"></p><p><img src="https://cos.lukme.top/Pic/image-20241004112552478.png" alt="image-20241004112552478"></p><h3 id="统计设备类型"><a href="#统计设备类型" class="headerlink" title="统计设备类型"></a>统计设备类型</h3><p><img src="https://cos.lukme.top/Pic/image-20241004112842696.png" alt="image-20241004112842696"></p><h3 id="统计设备操作系统"><a href="#统计设备操作系统" class="headerlink" title="统计设备操作系统"></a>统计设备操作系统</h3><p><img src="https://cos.lukme.top/Pic/image-20241004120352348.png" alt="image-20241004120352348"></p><h3 id="全球流量统计"><a href="#全球流量统计" class="headerlink" title="全球流量统计"></a>全球流量统计</h3><p><img src="https://cos.lukme.top/Pic/image-20241004115735265.png" alt="image-20241004115735265"></p><p><img src="https://cos.lukme.top/Pic/global-traffic.gif" alt="recording"></p><h3 id="创建仪表板"><a href="#创建仪表板" class="headerlink" title="创建仪表板"></a>创建仪表板</h3><blockquote><p>菜单栏—&gt;Dashboard   新建仪表板，数据从前面保存的库中添加</p><p>刷新可显示在线实时数据</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241004121524063.png" alt="image-20241004121524063"></p><h2 id="filebeat的多行处理"><a href="#filebeat的多行处理" class="headerlink" title="filebeat的多行处理"></a>filebeat的多行处理</h2><blockquote><p>filestream文件流也是采集文件的，log的替代</p></blockquote><p><a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/multiline-examples.html">官网</a></p><p><strong>multiline的count类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/11-filestream_multiline.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: filestream</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/student.info</span><br><span class="line">  parsers:</span><br><span class="line">  - multiline:</span><br><span class="line">      <span class="built_in">type</span>: count</span><br><span class="line">      count_lines: 4</span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注释</span></span><br><span class="line">      <span class="comment"># type指定类型，有效值为: pattern和count</span></span><br><span class="line">      <span class="comment">#  pattern:      基于正则匹配事件。</span></span><br><span class="line">      <span class="comment">#  count:         将几行数据作为一个事件</span></span><br><span class="line">      <span class="comment">#count_lines:  将指定的行数合并为一个事件</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#提示 ：count类型这种，需要被收集的信息格式是有规律的</span></span><br><span class="line">例如：   count: 2  （数据都是4行4行的或N行N行的）</span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /tmp/student.info </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hobby&quot;</span>: [<span class="string">&quot;学习&quot;</span>,<span class="string">&quot;跑步&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hobby&quot;</span>: [<span class="string">&quot;学习&quot;</span>,<span class="string">&quot;看书&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> [root@elk01:0 ~]# filebeat -e -c /etc/filebeat/11-filestream_multiline-.yaml</span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: 384,</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/tmp/student.info&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;flags&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;multiline&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;&#123;\n  \&quot;name\&quot;: \&quot;张三\&quot;,\n  \&quot;hobby\&quot;: [\&quot;学习\&quot;,\&quot;跑步\&quot;]\n&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;filestream&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#将多行数据采集为一行，但必须是有规律的，采集的是上面文件每4行为一组数据</span></span><br></pre></td></tr></table></figure><p><strong>multiline的pattern类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/12-filestream_multiline_pattern.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: filestream</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/student.info</span><br><span class="line">  parsers:</span><br><span class="line">  - multiline:</span><br><span class="line">      <span class="built_in">type</span>: pattern</span><br><span class="line">      pattern: <span class="string">&#x27;^\&#123;&#x27;</span></span><br><span class="line">      negate: <span class="literal">true</span></span><br><span class="line">      match: after</span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注释</span></span><br><span class="line">pattern： <span class="string">&#x27;^\&#123;&#x27;</span> 匹配以&#123;开头的</span><br><span class="line">negate: 匹配规则</span><br><span class="line">match: 匹配规则   见下图</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241004212526358.png" alt="image-20241004212526358"></p><h2 id="filebeat采集tomcat日志"><a href="#filebeat采集tomcat日志" class="headerlink" title="filebeat采集tomcat日志"></a>filebeat采集tomcat日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.部署tomcat</span><br><span class="line">[root@elk01:0 app]# wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.30/bin/apache-tomcat-10.1.30.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压安装tomcat(提前创建安装目录)</span><br><span class="line">[root@elk01:0 app]# tar xf apache-tomcat-10.1.30.tar.gz -C /app</span><br><span class="line">[root@elk01:0 app]# <span class="built_in">ln</span> -s /app/apache-tomcat-10.1.30/ /app/tomcat</span><br><span class="line"></span><br><span class="line">3.配置tomato的jdk环境，使用elasticsearch的jdk即可，查看java版本</span><br><span class="line">[root@elk01:0 app]#  /usr/share/elasticsearch/jdk/bin/java --version</span><br><span class="line">openjdk 22.0.1 2024-04-16</span><br><span class="line">OpenJDK Runtime Environment (build 22.0.1+8-16)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置环境变量</span></span><br><span class="line">[root@elk01:0 app]# <span class="built_in">cat</span> /etc/profile.d/jdk.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/share/elasticsearch/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新加载环境变量</span></span><br><span class="line">[root@elk01:0 app]# <span class="built_in">source</span> /etc/profile.d/jdk.sh </span><br><span class="line">[root@elk01:0 app]# java --version</span><br><span class="line">openjdk 22.0.1 2024-04-16</span><br><span class="line">OpenJDK Runtime Environment (build 22.0.1+8-16)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)</span><br><span class="line"></span><br><span class="line">4.启动tomcat</span><br><span class="line">[root@elk01:0 app]# /app/tomcat/bin/startup.sh </span><br></pre></td></tr></table></figure><p><strong>编写filebeat实例</strong>   使用tomcat采集日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.启用tomcat模块</span><br><span class="line">[root@elk01:0 app]# filebeat modules <span class="built_in">enable</span> tomcat</span><br><span class="line"></span><br><span class="line">2.修改tomcat模块里日志路径</span><br><span class="line">[root@elk01:0 app]# vim /etc/filebeat/modules.d/tomcat.yml </span><br><span class="line">···</span><br><span class="line">    <span class="comment">## 默认是udp类型，有效值: udp,tcp,file</span></span><br><span class="line">    <span class="comment"># 当类型为file时，下面定义的路径才会生效</span></span><br><span class="line">    var.input: file</span><br><span class="line">    var.paths:</span><br><span class="line">      - /app/tomcat/logs/localhost_access_log.* </span><br><span class="line">···</span><br><span class="line"></span><br><span class="line">3.编写filebeat实例</span><br><span class="line">[root@elk01:0 app]# <span class="built_in">cat</span> /etc/filebeat/13.modules_tomcat.yaml </span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    hosts: </span><br><span class="line">    - <span class="string">&quot;http://10.0.0.211:9200&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.0.0.212:9200&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.0.0.213:9200&quot;</span></span><br><span class="line">    index: <span class="string">&quot;modules-tomcat-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.name: <span class="string">&quot;modules-tomcat&quot;</span></span><br><span class="line">setup.template.pattern: <span class="string">&quot;modules-tomcat*&quot;</span></span><br><span class="line">setup.template.overwrite: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3</span><br><span class="line">  index.number_of_replicas: 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动实例</span></span><br><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/13.modules_tomcat.yaml </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇讲述了使用filebeat的内置nginx模块来分析nginx日志，并统计出图</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>filebeat多实例</title>
    <link href="https://lukme.top/posts/29cf1fa5.html"/>
    <id>https://lukme.top/posts/29cf1fa5.html</id>
    <published>2024-10-04T17:16:01.000Z</published>
    <updated>2024-10-04T17:22:33.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指定ES的分片和副本数量"><a href="#指定ES的分片和副本数量" class="headerlink" title="指定ES的分片和副本数量"></a>指定ES的分片和副本数量</h2><p><strong>ES索引名称的创建规范</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.名称最好见名知意，最好和你实际写入的业务有关;</span><br><span class="line">2.名称不要以<span class="string">&quot;.&quot;</span>开头，以<span class="string">&quot;.&quot;</span>开头多索引我们称之为<span class="string">&quot;隐藏索引&quot;</span>;</span><br><span class="line">3.一般隐藏索引都是组件去创建，建议不要人为创建，默认kibana就隐藏了以<span class="string">&quot;.&quot;</span>开头的索引</span><br><span class="line">4.字符支持小写字母，数字及连字符(-)，和内置一些变量比如<span class="string">&quot;%&#123;...&#125;&quot;</span>;</span><br><span class="line">5.不要出现特殊字符;</span><br></pre></td></tr></table></figure><p><strong>1.通过ES的API操作副本和分片</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">&#x27;http://10.0.0.211:9200/school&#x27;</span> \</span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;number_of_shards&quot;: 5,</span></span><br><span class="line"><span class="string">      &quot;number_of_replicas&quot;: 0</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建索引school，主分片5，副本0</span></span><br></pre></td></tr></table></figure><p><strong>2.通过索引模板操作副本和分片</strong></p><blockquote><p>索引模板：创建索引时，会自动匹配是否有对应的索引模板，若匹配则根据索引模板创建。</p></blockquote><p>​    <strong>2.1创建索引模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">&#x27;http://10.0.0.211:9200/_index_template/linux-school&#x27;</span> \</span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;template&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;number_of_replicas&quot;: 0,</span></span><br><span class="line"><span class="string">      &quot;number_of_shards&quot;: 5</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;index_patterns&quot;: [</span></span><br><span class="line"><span class="string">    &quot;linux-school*&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注释：index_patterns，这里是用于匹配索引的，凡是索引是linux-school的都会关联此模板</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241002233116968.png" alt="image-20241002233116968"></p><p><strong>验证模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# curl -X PUT <span class="string">&#x27;http://10.0.0.211:9200/linux-school-01&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;index&quot;</span>:<span class="string">&quot;linux-school-01&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新加载索引管理，发现创建的索引关联了模板，创建了5个分片</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241002233631403.png" alt="image-20241002233631403"></p><p>  2.2图形化创建索引模板</p><p><img src="https://cos.lukme.top/Pic/index.gif" alt="recording"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">验证索引模板：</span><br><span class="line">[root@elk01:2 ~]# curl -X PUT <span class="string">&#x27;http://10.0.0.211:9200/student01&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;index&quot;</span>:<span class="string">&quot;student01&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">索引管理里查看新创建的student-01索引是否是  3分片，0副本 自然是OK的</span><br></pre></td></tr></table></figure><p><strong>3.通过filebeat组件操作副本和分片</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/filebeat/06-nginx-es.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  json:</span><br><span class="line">    keys_under_root: <span class="literal">true</span></span><br><span class="line">    add_error_key: <span class="literal">true</span></span><br><span class="line">    overwirte_keys: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/nginx/access.log* </span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">&quot;http://10.0.0.211:9200&quot;</span>,<span class="string">&quot;http://10.0.0.212:9200&quot;</span>,<span class="string">&quot;http://10.0.0.213:9200&quot;</span>] </span><br><span class="line">  <span class="comment"># 自定义索引名称  ,前提是关闭索引的生命周期  </span></span><br><span class="line">  index: <span class="string">&quot;test-filebeat-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#关闭索引生命周期</span></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line"><span class="comment">#定义索引模板的名称</span></span><br><span class="line">setup.template.name: <span class="string">&quot;test-filebeat&quot;</span></span><br><span class="line"><span class="comment">#定义模板的匹配模式</span></span><br><span class="line">setup.template.pattern: <span class="string">&quot;test-filebeat*&quot;</span></span><br><span class="line"><span class="comment">#若索引模式模板存在，是否覆盖  </span></span><br><span class="line">setup.template.overwrite: <span class="literal">false</span></span><br><span class="line"><span class="comment">#定义索引模板设置</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 5</span><br><span class="line">  index.number_of_replicas: 0</span><br><span class="line">  </span><br><span class="line"><span class="comment">#如下索引管理里便创建了一个名为test-filebeat的索引和test-filebeat的模板</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241003002143618.png" alt="image-20241003002143618"></p><blockquote><p>提示：基于filebeat配置的ES集群的索引及分片，副本信息，本质上创建时会自动转换为ES的http请求进行创建索引。</p></blockquote><h2 id="多个intput写到不同索引"><a href="#多个intput写到不同索引" class="headerlink" title="多个intput写到不同索引"></a>多个intput写到不同索引</h2><blockquote><p>需求：多个inputs写入到ES集群里的不同索引里</p></blockquote><p><strong>1.编写配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/filebeat/07-nginx-es.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  <span class="comment">#给事件打标签为file</span></span><br><span class="line">  tags: <span class="string">&quot;file&quot;</span></span><br><span class="line">  paths:</span><br><span class="line">  - /tmp/test.log </span><br><span class="line">  </span><br><span class="line">- <span class="built_in">type</span>: tcp</span><br><span class="line">  tags: <span class="string">&quot;tcp&quot;</span></span><br><span class="line">  host: <span class="string">&quot;0.0.0.0:9000&quot;</span></span><br><span class="line">  </span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  tags: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  json:</span><br><span class="line">    keys_under_root: <span class="literal">true</span></span><br><span class="line">    add_error_key: <span class="literal">true</span></span><br><span class="line">    overwirte_keys: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/nginx/access.log* </span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">&quot;http://10.0.0.211:9200&quot;</span>,<span class="string">&quot;http://10.0.0.212:9200&quot;</span>,<span class="string">&quot;http://10.0.0.213:9200&quot;</span>]</span><br><span class="line">  <span class="comment">#index: &quot;student-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">  <span class="comment">#多个索引模式</span></span><br><span class="line">  indices:</span><br><span class="line">    - index: <span class="string">&quot;study-file-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">      when.contains:</span><br><span class="line">        tags: <span class="string">&quot;file&quot;</span></span><br><span class="line">    - index: <span class="string">&quot;study-tcp-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">      when.contains:</span><br><span class="line">        tags: <span class="string">&quot;tcp&quot;</span></span><br><span class="line">    - index: <span class="string">&quot;study-nginx-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">      when.contains:</span><br><span class="line">        tags: <span class="string">&quot;nginx&quot;</span></span><br><span class="line"></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.name: <span class="string">&quot;study&quot;</span></span><br><span class="line">setup.template.pattern: <span class="string">&quot;study*&quot;</span></span><br><span class="line">setup.template.overwrite: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 8</span><br><span class="line">  index.number_of_replicas: 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#给每个事件打上专属标签，索引里根据标签判断写入哪里</span></span><br></pre></td></tr></table></figure><p><strong>2.启动filebeat实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/07-nginx-es.yaml </span><br></pre></td></tr></table></figure><p><strong>3.测试tcp数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> <span class="string">&quot;999&quot;</span> | nc 10.0.0.211 9000</span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> <span class="string">&quot;666&quot;</span> | nc 10.0.0.211 9000</span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> <span class="string">&quot;000&quot;</span> | nc 10.0.0.211 9000</span><br></pre></td></tr></table></figure><p><strong>4.测试nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> curl 10.0.0.211;<span class="built_in">sleep</span> 0.5;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>5.测试本地文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> ‘hello world<span class="string">&#x27; &gt;/tmp/test.log</span></span><br></pre></td></tr></table></figure><p><strong>6.kibana基于Discover分析数据</strong></p><p>​    6.1查看索引是否都创建完成</p><p><img src="https://cos.lukme.top/Pic/image-20241003114353521.png" alt="image-20241003114353521"></p><p>  6.2创建索引模式为     study*</p><p>  6.3 进入Discover，选择相应字段，查看分析数据</p><p><img src="https://cos.lukme.top/Pic/image-20241003114810243.png" alt="image-20241003114810243"></p><h2 id="控制多个input源的是否启用"><a href="#控制多个input源的是否启用" class="headerlink" title="控制多个input源的是否启用"></a>控制多个input源的是否启用</h2><blockquote><p>使用enabled，控制inputs多个源是否启用，true / false</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  <span class="comment"># 配置该代码块是否执行，默认值为true，若不想要加载，则设置为false即可</span></span><br><span class="line">  enabled: <span class="literal">false</span></span><br><span class="line">  tags: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  json:</span><br><span class="line">    keys_under_root: <span class="literal">true</span></span><br><span class="line">    add_error_key: <span class="literal">true</span></span><br><span class="line">    overwirte_keys: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/nginx/access.log*</span><br></pre></td></tr></table></figure><h2 id="filebeat-多实例"><a href="#filebeat-多实例" class="headerlink" title="filebeat 多实例"></a>filebeat 多实例</h2><p><strong>1.启动第一个实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/02-tcp-console.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: tcp</span><br><span class="line">  host: <span class="string">&quot;0.0.0.0:9000&quot;</span></span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/02-tcp-console.yaml </span><br></pre></td></tr></table></figure><p><strong>2.启动第二个实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/filebeat/04-nginx-console.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  json:</span><br><span class="line">    keys_under_root: <span class="literal">true</span></span><br><span class="line">    add_error_key: <span class="literal">true</span></span><br><span class="line">    overwirte_keys: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/nginx/access.log* </span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/04-nginx-console.yaml</span><br><span class="line">2024-10-03T12:15:44.735+0800    INFO    instance/beat.go:698    Home path: [/usr/share/filebeat] Config path: [/etc/filebeat] Data path: [/var/lib/filebeat] Logs path: [/var/log/filebeat] Hostfs Path: [/]</span><br><span class="line">2024-10-03T12:15:44.737+0800    ERROR   instance/beat.go:1027   Exiting: <span class="string">&#x27;data path already locked by another beat&#x27;</span>. Please make sure that multiple beats are not sharing the same data path (path.data).</span><br><span class="line">Exiting: data path already locked by another beat. Please make sure that multiple beats are not sharing the same data path (path.data).</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动第二个的实例时候提示，数据目录已经被其他的实例锁定了，查看/var/lib/filebeat/目录里存在一个锁文件</span></span><br><span class="line"><span class="comment">#不能共用数据目录，当退出这个实例，这个锁文件也会消失</span></span><br><span class="line">[root@elk01:1 ~]# ll /var/lib/filebeat/</span><br><span class="line">-rw------- 1 root root    0 Oct  3 12:15 filebeat.lock</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动第二个实例，需要指定数据目录</span></span><br><span class="line">[root@elk01:2 ~]# filebeat -e -c /etc/filebeat/04-nginx-console.yaml --path.data /tmp/nginx-filebeat</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">总结:</span><br><span class="line">- 1.同一个节点可以启动多个filebeat实例，但需要指定不同的数据目录;</span><br><span class="line">- 2.如果filebeat采集多个数据源有两种常见的解决方案，要么配置多个input，要么使用多实例;</span><br><span class="line"></span><br><span class="line">如果所有配置都放在同一个filebeat优缺点:</span><br><span class="line">优点:</span><br><span class="line">部署方便，启动一个实例即可。</span><br><span class="line">缺点:</span><br><span class="line">-1.当多个input中有任意一个需要修改时，在重启期间，其他的input都会受到影响。</span><br><span class="line">-2.当配置多事，多个input配置比较繁琐;</span><br><span class="line"></span><br><span class="line">如果所有配置都使用不同filebeat，多实例优缺点:</span><br><span class="line">优点:</span><br><span class="line">- 1.实现了配置文件和程序的解耦，说白了，就是一个实例挂掉，不会影响到其他实例;</span><br><span class="line">- 2.配置简单</span><br><span class="line">缺点:</span><br><span class="line">- 1.部署不方便，要同时部署多个filebeat，且数据目录需要单独指定维护;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇通过filebeat写入不同索引和使用不同数据目录实现多实例</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>EFK架构部署</title>
    <link href="https://lukme.top/posts/fab536ab.html"/>
    <id>https://lukme.top/posts/fab536ab.html</id>
    <published>2024-10-04T17:14:30.000Z</published>
    <updated>2024-10-04T17:22:33.063Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明：全篇elastic是基于Ubuntu系统安装的，与Centos差别不是太大，下载软件连接可去官网下载</p></blockquote><h2 id="ElasitcStack概述"><a href="#ElasitcStack概述" class="headerlink" title="ElasitcStack概述"></a>ElasitcStack概述</h2><h3 id="1-什么是ElasticStack？"><a href="#1-什么是ElasticStack？" class="headerlink" title="1.什么是ElasticStack？"></a>1.什么是ElasticStack？</h3><p>所谓的ElasticStack别名为elk stack。</p><p>ELK指的是三个技术栈:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- ElasticSearch，简称： es</span><br><span class="line">数据库，应用场景为数据的快速检索。但凡和搜索框相关的，都会用ES进行数据的查询。</span><br><span class="line"></span><br><span class="line">- Logstash:</span><br><span class="line">采集数据，日志聚合，处理数据，将数据写入到ES存储库。</span><br><span class="line"></span><br><span class="line">- Kibana:</span><br><span class="line">用于出图展示数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由于Logstash比较重量级，采集日志时启动较慢，使用JRuby语言研发，启动时需要先启动虚拟机。因此官方开发了beats组件，beats组件是一系列beat的集合，比如filebeat就是一个常用的beat组件，多用于文本日志采集。</span><br></pre></td></tr></table></figure><h3 id="2-常用的架构"><a href="#2-常用的架构" class="headerlink" title="2.常用的架构"></a>2.常用的架构</h3><p>EFK:</p><pre><code>- ElasticSearch- Filebeat:     采集数据写入ES集群。- Kibana</code></pre><p>ELFK:</p><pre><code>- ElasticSearch- Filebeat: - Logstash- Kibana</code></pre><p>ELKF+KAFKA:</p><pre><code>- zookeeper - kafka</code></pre><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><h3 id="1-什么是ElasticSearch"><a href="#1-什么是ElasticSearch" class="headerlink" title="1.什么是ElasticSearch"></a>1.什么是ElasticSearch</h3><p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。作为 Elastic Stack 的核心，Elasticsearch 会集中存储您的数据，让您飞快完成搜索，微调相关性，进行强大的分析，并轻松缩放规模。ES的核心作用就是存储数据和快速进行模糊查询。</p><h3 id="2-安装部署ES"><a href="#2-安装部署ES" class="headerlink" title="2.安装部署ES"></a>2.安装部署ES</h3><p><strong>单点部署ES</strong>   一般用于测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">`本机ip：10.0.0.211`</span><br><span class="line">1.下载ES</span><br><span class="line">[root@elk01 ~]# wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.17.23-amd64.deb</span><br><span class="line"></span><br><span class="line">2.安装ES</span><br><span class="line">[root@elk01 ~]# dpkg -i elasticsearch-7.17.23-amd64.deb</span><br><span class="line"></span><br><span class="line">3.修改配置文件</span><br><span class="line">[root@elk01 ~]# vim /etc/elasticsearch/elasticsearch.yml </span><br><span class="line">cluster.name: elk</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/log/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">transport.port: 9300</span><br><span class="line">discovery.type: single-node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`相关参数说明:`</span><br><span class="line">cluster.name: <span class="comment">#指定ES集群的名称</span></span><br><span class="line">path.data: <span class="comment">#指定数据目录</span></span><br><span class="line">path.logs: <span class="comment">#指定日志目录</span></span><br><span class="line">network.host: <span class="comment">#指定宿主机的监听IP。</span></span><br><span class="line">http.port: 9200<span class="comment">#对外提供http|https接口的端口。</span></span><br><span class="line">transport.port: 9300<span class="comment">#集群内部数据传输的端口，会优先启动该端口选举master后在启动9200端口。</span></span><br><span class="line">discovery.type: <span class="comment">#指定ES集群的类型，single-node表示的是单点。</span></span><br><span class="line"></span><br><span class="line">4.启动ES并设置开机自启</span><br><span class="line">[root@elk01 ~]# systemctl <span class="built_in">enable</span> --now elasticsearch</span><br><span class="line"></span><br><span class="line">5.检查监听的端口号</span><br><span class="line">[root@elk01 ~]# ss -lntup |egrep <span class="string">&#x27;9[23]00&#x27;</span></span><br><span class="line">tcp6       0      0 :::9200        :::*       LISTEN      6431/java</span><br><span class="line">tcp6       0      0 :::9300        :::*       LISTEN      6431/java</span><br><span class="line"></span><br><span class="line">6.测试访问</span><br><span class="line">[root@elk01:0 ~]# curl 10.0.0.211:9200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;vV46E9vqRK-MxDs6I-3ceg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;deb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;61d76462eecaf09ada684d1b5d319b5ff6865a83&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2024-07-25T14:37:42.448799567Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.11.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看集群节点</span></span><br><span class="line">[root@elk01:0 ~]# curl 10.0.0.211:9200/_cat/nodes</span><br><span class="line">10.0.0.211 19 91 11 0.10 0.23 0.11 cdfhilmrstw * elk01</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示表头信息    *代表master节点</span></span><br><span class="line">[root@elk01:0 ~]# curl 10.0.0.211:9200/_cat/nodes?v</span><br><span class="line">ip         heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name</span><br><span class="line">10.0.0.211           20          91   0    0.06    0.21     0.11 cdfhilmrstw *      elk01</span><br></pre></td></tr></table></figure><p><strong>如何卸载ES？</strong></p><pre><code>1.停止ES服务[root@elk91 ~]# systemctl disable --now elasticsearch.service 2.删除数据[root@elk91 ~]# \rm -rf  /var/&#123;lib,log&#125;/elasticsearch/ /tmp/*  /etc/elasticsearch3.删除软件[root@elk91 ~]# sudo yum remove elasticsearch[root@elk91 ~]# sudo rpm -e elasticsearch</code></pre><h3 id="3-部署ES集群"><a href="#3-部署ES集群" class="headerlink" title="3.部署ES集群"></a>3.部署ES集群</h3><div class="table-container"><table><thead><tr><th>主机名</th><th>WanIP</th><th>LanIP</th></tr></thead><tbody><tr><td>elk01</td><td>10.0.0.211</td><td>172.16.1.211</td></tr><tr><td>elk02</td><td>10.0.0.222</td><td>172.16.1.222</td></tr><tr><td>elk03</td><td>10.0.0.233</td><td>172.16.1.233</td></tr></tbody></table></div><p><strong>1.所有节点安装ElasticSearch</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.下载ES</span><br><span class="line">[root@elk01 ~]# wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.17.23-amd64.deb</span><br><span class="line">[root@elk01 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> 212 213;<span class="keyword">do</span> scp elasticsearch-7.17.23-x86_64.rpm root@172.16.1.<span class="variable">$i</span>:/root ;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">2.安装ES</span><br><span class="line">[root@elk01 ~]#dpkg -i elasticsearch-7.17.23-amd64.deb</span><br></pre></td></tr></table></figure><p><strong>2.修改配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# vim /etc/elasticsearch/elasticsearch.yml </span><br><span class="line">cluster.name: elk</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/log/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">transport.port: 9300</span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;10.0.0.211&quot;</span>, <span class="string">&quot;10.0.0.212&quot;</span>,<span class="string">&quot;10.0.0.213&quot;</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;10.0.0.211&quot;</span>, <span class="string">&quot;10.0.0.212&quot;</span>,<span class="string">&quot;10.0.0.213&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`相关参数说明:`</span><br><span class="line">discovery.seed_hosts:<span class="comment">#当前ES集群的主机列表。</span></span><br><span class="line">cluster.initial_master_nodes:<span class="comment">#集群启动时首次参与master选举的节点列表。</span></span><br></pre></td></tr></table></figure><p><strong>3.将配置文件拷贝到其他节点</strong></p><pre><code>[root@elk01 ~]# scp /etc/elasticsearch/elasticsearch.yml root@172.16.1.212:/etc/elasticsearch/[root@elk01 ~]# scp /etc/elasticsearch/elasticsearch.yml root@172.16.1.213:/etc/elasticsearch/</code></pre><p><strong>4.启动ES集群 </strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# systemctl <span class="built_in">enable</span> --now elasticsearch.service </span><br><span class="line">[root@elk02 ~]# systemctl <span class="built_in">enable</span> --now elasticsearch.service </span><br><span class="line">[root@elk03 ~]# systemctl <span class="built_in">enable</span> --now elasticsearch.service </span><br></pre></td></tr></table></figure><p><strong>5.查看端口是否监听集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# ss -lntup |egrep <span class="string">&#x27;9[23]00&#x27;</span></span><br><span class="line">tcp6       0      0 :::9200        :::*       LISTEN      6431/java</span><br><span class="line">tcp6       0      0 :::9300        :::*       LISTEN      6431/java</span><br></pre></td></tr></table></figure><p><strong>6.查看集群节点信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# curl 10.0.0.213:9200/_cat/nodes</span><br><span class="line">10.0.0.212  9 94  8 0.46 0.49 0.31 cdfhilmrstw - elk02</span><br><span class="line">10.0.0.211 25 95 21 0.56 0.47 0.25 cdfhilmrstw * elk01</span><br><span class="line">10.0.0.213 28 90 25 1.21 0.78 0.43 cdfhilmrstw - elk03</span><br><span class="line"></span><br><span class="line"><span class="comment">#elk02是主节点</span></span><br><span class="line"><span class="comment">#查看name和uuid</span></span><br><span class="line">[root@elk01 ~]# curl -s 10.0.0.211:9200|egrep <span class="string">&#x27;_name|_uuid&#x27;</span></span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;my-elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;pI91AngOTf2G4LYIUzd9FA&quot;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#查看所有节点？</span></span><br><span class="line">[root@elk01 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 211 213`;<span class="keyword">do</span> curl -s 10.0.0.<span class="variable">$i</span>:9200|egrep <span class="string">&#x27;_name|_uuid&#x27;</span>;<span class="keyword">done</span></span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;my-elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;pI91AngOTf2G4LYIUzd9FA&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;my-elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;pI91AngOTf2G4LYIUzd9FA&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;my-elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;pI91AngOTf2G4LYIUzd9FA&quot;</span>,</span><br></pre></td></tr></table></figure><p><strong>7.ES集群写入和读取数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写入数据  （test是索引，自定义）</span></span><br><span class="line">curl -X POST -H <span class="string">&quot;Content-Type:application/json&quot;</span> 10.0.0.211:9200/test/_doc -d <span class="string">&#x27;&#123;&quot;name&quot;:&quot;zhang3&quot;,&quot;age&quot;:&quot;18&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取数据（jq需要安装，格式化输出，212/213也能读取到数据，因为是es集群）</span></span><br><span class="line">[root@elk01 ~]# curl -s 10.0.0.211:9200/test/_search | jq .hits</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;max_score&quot;</span>: 1,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">      <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;ppKQ0ZEB6pCPlAoKbzPE&quot;</span>,</span><br><span class="line">      <span class="string">&quot;_score&quot;</span>: 1,</span><br><span class="line">      <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhang3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kibana读取数据"><a href="#kibana读取数据" class="headerlink" title="kibana读取数据"></a>kibana读取数据</h2><h3 id="1-kibana概述"><a href="#1-kibana概述" class="headerlink" title="1.kibana概述"></a>1.kibana概述</h3><p>使用 Kibana 针对大规模数据快速运行数据分析，以实现可观测性、安全和搜索。对来自任何来源的任何数据进行全面透彻的分析，从威胁情报到搜索分析，从日志到应用程序监测，不一而足。说白了，kibana就是从ES查询数据并展示数据。</p><h3 id="2-部署kibana"><a href="#2-部署kibana" class="headerlink" title="2.部署kibana"></a>2.部署kibana</h3><p><strong>1.下载 &amp; 安装kibana</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# wget https://artifacts.elastic.co/downloads/kibana/kibana-7.17.23-amd64.deb</span><br><span class="line"></span><br><span class="line">[root@elk01 ~]# dpkg -i kibana-7.17.23-amd64.deb </span><br></pre></td></tr></table></figure><p><strong>2.修改配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk91 ~]# vim /etc/kibana/kibana.yml </span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">server.name: <span class="string">&quot;kibana&quot;</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&quot;http://10.0.0.211:9200&quot;</span>,<span class="string">&quot;http://10.0.0.212:9200&quot;</span>,<span class="string">&quot;http://10.0.0.213:9200&quot;</span>]</span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-启动kibana"><a href="#3-启动kibana" class="headerlink" title="3.启动kibana"></a>3.启动kibana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# systemctl <span class="built_in">enable</span> --now kibana</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看端口是否启动</span></span><br><span class="line">[root@elk01 ~]# ss  -lntup|grep 5601</span><br><span class="line">tcp        0      0 0.0.0.0:5601      0.0.0.0:*     LISTEN      9696/node  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器访问</span></span><br><span class="line">10.0.0.211:5601</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/QQ_1725800433992.png" alt="QQ_1725800433992"></p><p><strong>索引管理就有我们之前创建的数据</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241002121943290.png" alt="image-20241002121943290"></p><p><strong>如何查询那个数据呢？</strong></p><p><img src="https://cos.lukme.top/Pic/QQ_1725800690692.png" alt="QQ_1725800690692"></p><p><img src="https://cos.lukme.top/Pic/QQ_1725800736873.png" alt="QQ_1725800736873"></p><p><img src="https://cos.lukme.top/Pic/QQ_1725800780918.png" alt="QQ_1725800780918"></p><h3 id="4-kibana查询ES数据"><a href="#4-kibana查询ES数据" class="headerlink" title="4.kibana查询ES数据"></a>4.kibana查询ES数据</h3><p><strong>1.准备测试数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&quot;Content-Type:application/json&quot;</span> 10.0.0.211:9200/_bulk -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;student1&quot;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;:&quot;李四&quot;,&quot;hobby&quot;:[&quot;学习&quot;,&quot;玩手机&quot;,&quot;看美女&quot;]&#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;student2&quot;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;hobby&quot;:[&quot;大长腿&quot;,&quot;学习&quot;]&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#终端输出如下即OK</span></span><br><span class="line">&#123;<span class="string">&quot;took&quot;</span>:780,<span class="string">&quot;errors&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;items&quot;</span>:[&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;student&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;_doc&quot;</span>,<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;YWacOJIBCijr5nh3GosC&quot;</span>,<span class="string">&quot;_version&quot;</span>:1,<span class="string">&quot;result&quot;</span>:<span class="string">&quot;created&quot;</span>,<span class="string">&quot;_shards&quot;</span>:&#123;<span class="string">&quot;total&quot;</span>:2,<span class="string">&quot;successful&quot;</span>:2,<span class="string">&quot;failed&quot;</span>:0&#125;,<span class="string">&quot;_seq_no&quot;</span>:0,<span class="string">&quot;_primary_term&quot;</span>:1,<span class="string">&quot;status&quot;</span>:201&#125;&#125;,&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;student&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;_doc&quot;</span>,<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;YmacOJIBCijr5nh3GosC&quot;</span>,<span class="string">&quot;_version&quot;</span>:1,<span class="string">&quot;result&quot;</span>:<span class="string">&quot;created&quot;</span>,<span class="string">&quot;_shards&quot;</span>:&#123;<span class="string">&quot;total&quot;</span>:2,<span class="string">&quot;successful&quot;</span>:2,<span class="string">&quot;failed&quot;</span>:0&#125;,<span class="string">&quot;_seq_no&quot;</span>:1,<span class="string">&quot;_primary_term&quot;</span>:1,<span class="string">&quot;status&quot;</span>:201&#125;&#125;]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#api调取方法--官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-bulk.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器再次访问  kibana  ，发现索引管理会多出来一个我们创建的student索引</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241002122102175.png" alt="image-20241002122102175"></p><p><strong>2.创建索引模式</strong></p><p>kibana的索引模式用于匹配ES集群的一个或多个索引。     student*</p><p><img src="https://cos.lukme.top/Pic/image-20241002122146329.png" alt="image-20241002122146329"></p><p><strong>3.kibana查询数据</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241002122628647.png" alt="image-20241002122628647"></p><p><strong>以字段查询</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241002122712583.png" alt="image-20241002122712583"></p><p><img src="https://cos.lukme.top/Pic/image-20241002122754986.png" alt="image-20241002122754986"></p><p><strong>使用json格式查询</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241002122306868.png" alt="image-20241002122306868"></p><p><strong>其它方式查询集群颜色</strong></p><p>1.通过es-head组件查询（一个插件）</p><p>2.基于官方的API查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# curl -s 10.0.0.211:9200/_cat/indices?v</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241002122830955.png" alt="image-20241002122830955"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# curl -s 10.0.0.211:9200/_cat/indices|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line">green</span><br><span class="line">green</span><br><span class="line">green</span><br><span class="line">green</span><br><span class="line">green</span><br></pre></td></tr></table></figure><h2 id="Filebeat采集数据"><a href="#Filebeat采集数据" class="headerlink" title="Filebeat采集数据"></a>Filebeat采集数据</h2><p><strong>filebeat</strong><br>无论您是从安全设备、云、容器、主机还是 OT 进行数据收集，Filebeat 都将为您提供一种轻量型方法，用于转发和汇总日志与文件，让简单的事情不再繁杂。说白了，filebeat的核心就是采集日志并将日志发送到我们期望的目的端。本质核心就是input(数据从哪来)和output(数据到哪去)。</p><p><strong>==filebeat默认是按行读取数据==</strong></p><p><img src="https://cos.lukme.top/Pic/elkmassage.png" alt="elkmassage"></p><h3 id="部署filebeat"><a href="#部署filebeat" class="headerlink" title="部署filebeat"></a>部署filebeat</h3><p><a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/configuring-howto-filebeat.html">Filebeat Reference 官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.下载filebeat包</span><br><span class="line">[root@elk01 ~]# wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.17.23-amd64.deb</span><br><span class="line"></span><br><span class="line">2.安装filebeat </span><br><span class="line">[root@elk01 ~]# dpkg -i filebeat-7.17.23-amd64.deb </span><br></pre></td></tr></table></figure><h3 id="采集数据终端到终端"><a href="#采集数据终端到终端" class="headerlink" title="采集数据终端到终端"></a>采集数据终端到终端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写法见官方，直接复制使用  (在 inputs 和 Output 里选择相应的方式)</span></span><br><span class="line"><span class="string">&#x27;https://www.elastic.co/guide/en/beats/filebeat/7.17/configuring-howto-filebeat.html&#x27;</span></span><br><span class="line">1.编写filebeat的配置文件      （inputs&gt;Stdin  标准输入    output&gt;Console  终端输出）</span><br><span class="line">[root@elk01 ~]# <span class="built_in">cat</span> /etc/filebeat/01-stdin-stdout.yaml </span><br><span class="line"><span class="comment"># 数据从标准输入来</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: stdin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据到终点</span></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#2.启动filebeat实例</span></span><br><span class="line">相关参数说 ：</span><br><span class="line">-c &lt;config&gt;:</span><br><span class="line">指定的是配置文件 </span><br><span class="line">-e :</span><br><span class="line">开启调试模式，将日志输出到终端。</span><br><span class="line"></span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/01-stdin-stdout.yaml </span><br><span class="line"><span class="comment">#终端我输入的</span></span><br><span class="line">66666666666666666666666666666666</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出内容：很明显，数据被封装到了一个&quot;message&quot;字段中。</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;2024-09-28T13:23:12.146Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;beat&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;stdin&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;ecs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;agent&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ephemeral_id&quot;</span>: <span class="string">&quot;13686d12-e255-4c48-a609-dcc4b8331c44&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;9e9b0f4e-cbe0-4e5b-bab2-501e50f67620&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;66666666666666666666666666666666&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">2024-09-28T21:23:13.147+0800    ERROR   file/states.go:125      State <span class="keyword">for</span>  should have been dropped, but couldn<span class="string">&#x27;t as state is not finished.</span></span><br></pre></td></tr></table></figure><h3 id="filebeat监听tcp端口"><a href="#filebeat监听tcp端口" class="headerlink" title="filebeat监听tcp端口"></a>filebeat监听tcp端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1。编写filebeat配置文件       （inputs&gt;tcp   指定tcp端口）</span></span><br><span class="line">[root@elk01 ~]# <span class="built_in">cat</span> /etc/filebeat/02-tcp-console.yaml </span><br><span class="line"><span class="comment"># 数据从监听的指定tcp端口来</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: tcp</span><br><span class="line">  host: <span class="string">&quot;0.0.0.0:9000&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#数据到终点</span></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#2.启动filebeat实例</span></span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/02-tcp-console.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.发送测试数据</span></span><br><span class="line">[root@elk03:0 ~]# <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> | nc 10.0.0.211 9000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.观察filebeat是否采集到数据</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;2024-09-28T13:33:01.962Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;beat&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;tcp&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;ecs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;agent&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ephemeral_id&quot;</span>: <span class="string">&quot;a43721b4-8160-4985-9f6f-67c0178affa7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;9e9b0f4e-cbe0-4e5b-bab2-501e50f67620&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;address&quot;</span>: <span class="string">&quot;10.0.0.213:47174&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="采集本地文件输出数据到终端"><a href="#采集本地文件输出数据到终端" class="headerlink" title="采集本地文件输出数据到终端"></a>采集本地文件输出数据到终端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1.编写filebeat配置文件    （inputs&gt;<span class="built_in">log</span>）</span><br><span class="line">[root@elk01 ~]# <span class="built_in">cat</span> /etc/filebeat/03-log-console.yaml</span><br><span class="line"><span class="comment"># 数据从监听的指定文件来</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据到终点</span></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">2.启动filebeat实例</span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/03-log-console.yaml</span><br><span class="line"></span><br><span class="line">3.写入测试数据(另开一个终端写入)</span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> <span class="string">&#x27;999&#x27;</span> &gt; /tmp/test.log</span><br><span class="line"></span><br><span class="line">4.观察终端输出</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;2024-09-28T13:48:53.645Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;beat&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: 0,           <span class="comment">#注意这个字段</span></span><br><span class="line">    <span class="string">&quot;file&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/tmp/test.log&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">  <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;log&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;agent&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;9e9b0f4e-cbe0-4e5b-bab2-501e50f67620&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ephemeral_id&quot;</span>: <span class="string">&quot;10485e22-a3e8-40f0-bbb9-c194f9541bf4&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;ecs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.验证filebeat采集数据是按行读取    (注意offset 字段变化)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#再次写入数据观察采集情况</span></span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span> &gt;&gt; /tmp/test.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#观察offset（偏移量）</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;2024-09-28T13:54:03.721Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;beat&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: 4,    <span class="comment">#为啥是四个偏移量？</span></span><br><span class="line">    <span class="string">&quot;file&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/tmp/test.log&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;999hello world&quot;</span>,</span><br><span class="line">  <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;log&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;agent&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ephemeral_id&quot;</span>: <span class="string">&quot;10485e22-a3e8-40f0-bbb9-c194f9541bf4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;9e9b0f4e-cbe0-4e5b-bab2-501e50f67620&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;ecs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为上次999三个之后有个特殊字符--换行符，所以offset之前采集的偏移量是4个</span></span><br></pre></td></tr></table></figure><p><strong>如何验证filebeat是按行采集数据的？</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">echo</span> -n <span class="string">&#x27;ABCD&#x27;</span> &gt;&gt; /tmp/test.log      -n 不换行</span><br><span class="line"></span><br><span class="line">观察终端是否有采集数据,很明显没有采集</span><br></pre></td></tr></table></figure><p><strong>6.重启filebeat实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">停止filebeat   Ctrl+c</span><br><span class="line">再次执行实例    filebeat -e -c /etc/filebeat/03-log-console.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时我们发现filebeat并不会采集数据，因为filebeat已经采集过了，</span></span><br><span class="line"><span class="comment">#filebeat是如何知道有没有采集过数据？往上翻看加载信息如下图</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241002105509955.png" alt="image-20241002105509955"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Finished loading transaction <span class="built_in">log</span> file <span class="keyword">for</span> <span class="string">&#x27;/var/lib/filebeat/registry/filebeat&#x27;</span>. Active transaction <span class="built_in">id</span>=63</span><br><span class="line"></span><br><span class="line">这个表示的是，在采集数据之前先加载<span class="string">&#x27;/var/lib/filebeat/registry/filebeat&#x27;</span>下的事务日志log.json，里面记录了已经采集过的信息，那么我们前去查看下，</span><br><span class="line"></span><br><span class="line">这里我们查看下最后一条数据</span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">tail</span> -1 /var/lib/filebeat/registry/filebeat/log.json </span><br><span class="line">&#123;<span class="string">&quot;k&quot;</span>:<span class="string">&quot;filebeat::logs::native::788078-64768&quot;</span>,<span class="string">&quot;v&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;native::788078-64768&quot;</span>,<span class="string">&quot;offset&quot;</span>:24,<span class="string">&quot;timestamp&quot;</span>:[2061673550511,1727837342],<span class="string">&quot;ttl&quot;</span>:-1,<span class="string">&quot;prev_id&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;source&quot;</span>:<span class="string">&quot;/tmp/test.log&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;log&quot;</span>,<span class="string">&quot;FileStateOS&quot;</span>:&#123;<span class="string">&quot;inode&quot;</span>:788078,<span class="string">&quot;device&quot;</span>:64768&#125;,<span class="string">&quot;identifier_name&quot;</span>:<span class="string">&quot;native&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据有个offset字段，这里记录的是上一次采集过的偏移量，那么我们就来查看下这个日志的偏移量是不是24</span></span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /tmp/test.log </span><br><span class="line">999</span><br><span class="line">hello world</span><br><span class="line">ABCD666</span><br><span class="line"></span><br><span class="line"><span class="comment">#其中每个换行之后都有一个换行符占一个偏移量，所以总过是24，那么这个事务日志记录的是没有错的。当我们删除这个事务日志log.json时候，重新执行filebeat实例，便会重新采集数据</span></span><br></pre></td></tr></table></figure><p><strong>7.自定义采集</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据步骤6中重新filebeat实例所述，我们自定义采集便可以根据设置偏移量来达到自定义采集数据</span></span><br><span class="line"><span class="comment">#修改事务日志文件如下，只修改偏移量，需求是只采集ABCD666及以后的数据</span></span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /tmp/test.log </span><br><span class="line">999</span><br><span class="line">hello world</span><br><span class="line">ABCD666  <span class="comment">#将offset设置为16，记得数换行符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@elk01:1 ~]# vim /var/lib/filebeat/registry/filebeat/log.json </span><br><span class="line">&#123;<span class="string">&quot;op&quot;</span>:<span class="string">&quot;set&quot;</span>,<span class="string">&quot;id&quot;</span>:65&#125;</span><br><span class="line">&#123;<span class="string">&quot;k&quot;</span>:<span class="string">&quot;filebeat::logs::native::788078-64768&quot;</span>,<span class="string">&quot;v&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;native::788078-64768&quot;</span>,<span class="string">&quot;offset&quot;</span>:16,<span class="string">&quot;timestamp&quot;</span>:[2061673550511,1727837342],<span class="string">&quot;ttl&quot;</span>:-1,<span class="string">&quot;prev_id&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;source&quot;</span>:<span class="string">&quot;/tmp/test.log&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;log&quot;</span>,<span class="string">&quot;FileStateOS&quot;</span>:&#123;<span class="string">&quot;inode&quot;</span>:788078,<span class="string">&quot;device&quot;</span>:64768&#125;,<span class="string">&quot;identifier_name&quot;</span>:<span class="string">&quot;native&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新执行实例</span></span><br><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/03-log-console.yaml </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;2024-10-02T03:12:45.360Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;beat&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;agent&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ephemeral_id&quot;</span>: <span class="string">&quot;c8d05474-6175-4dd1-93e8-933cb7760b92&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;9e9b0f4e-cbe0-4e5b-bab2-501e50f67620&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;filebeat&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: 16,</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/tmp/test.log&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;ABCD666&quot;</span>,</span><br><span class="line">  <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;log&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;ecs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;elk01&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="采集nginx日志案例"><a href="#采集nginx日志案例" class="headerlink" title="采集nginx日志案例"></a>采集nginx日志案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">1.安装nginx   （可以先尝试跳过2步骤，看看不修改配置文件的输出，和修改之后的区别）</span><br><span class="line">[root@elk01:1 ~]# apt -y install nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.将nginx采集的数据以json格式展示，修改nginx的配置文件（格式化展示，方便分析数据，访问ip，状态码等）</span><br><span class="line">[root@elk01:1 ~]# vim /etc/nginx/nginx.conf </span><br><span class="line"><span class="comment">#http模块里添加如下，注释官方的   access_log /var/log/nginx/access.log</span></span><br><span class="line">···</span><br><span class="line">  log_format nginx_json <span class="string">&#x27;&#123;&quot;timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;vhost&quot;:&quot;$server_addr&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;clientip&quot;:&quot;$remote_addr&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;SendBytes&quot;:$body_bytes_sent,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;responsetime&quot;:$request_time,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;http_host&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;uri&quot;:&quot;$uri&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;domain&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;referer&quot;:&quot;$http_referer&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;tcp_xff&quot;:&quot;$proxy_protocol_addr&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#x27;</span></span><br><span class="line">       <span class="string">&#x27;&quot;status&quot;:&quot;$status&quot;&#125;&#x27;</span>;</span><br><span class="line"> access_log /var/log/nginx/access.log nginx_json;</span><br><span class="line"><span class="comment">#2.1 检查nginx语法是否有问题</span></span><br><span class="line">[root@elk01:1 ~]# nginx -t </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"><span class="comment">#2.2 重新nginx</span></span><br><span class="line">[root@elk01:1 ~]# systemctl restart nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.编写filebeat配置文件    （inputs&gt;<span class="built_in">log</span>）</span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/filebeat/04-nginx-es.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  json:</span><br><span class="line">    <span class="comment">#当json.keys_under_root的值为true时，会自动解析json格式，并将字段放在顶级字段中</span></span><br><span class="line">    keys_under_root: <span class="literal">true</span></span><br><span class="line">    <span class="comment">#当json格式解析错误时，可以将错误信息写入到event事件(指的是filebeat采集的每一条数据)中。</span></span><br><span class="line">    add_error_key: <span class="literal">true</span></span><br><span class="line">    <span class="comment">#如果采集的字段和filebeat自己的字段冲突，则覆盖数据</span></span><br><span class="line">    overwirte_kes: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/nginx/access.log* </span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">2.启动filebeat实例</span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/03-log-console.yaml</span><br><span class="line">3.另开一个终端测试</span><br><span class="line">[root@elk01:1 ~]# curl 10.0.0.211</span><br><span class="line"><span class="comment">#查看filebeat收集日志</span></span><br><span class="line">1.这是未配置  json.keys_under_root: <span class="literal">true</span>  的展示</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;&#123;\&quot;timestamp\&quot;:\&quot;2024-10-02T11:40:24+08:00\&quot;,\&quot;vhost\&quot;:\&quot;10.0.0.211\&quot;,\&quot;clientip\&quot;:\&quot;10.0.0.211\&quot;,\&quot;SendBytes\&quot;:612,\&quot;responsetime\&quot;:0.000,\&quot;upstreamtime\&quot;:\&quot;-\&quot;,\&quot;upstreamhost\&quot;:\&quot;-\&quot;,\&quot;http_host\&quot;:\&quot;10.0.0.211\&quot;,\&quot;uri\&quot;:\&quot;/index.nginx-debian.html\&quot;,\&quot;domain\&quot;:\&quot;10.0.0.211\&quot;,\&quot;xff\&quot;:\&quot;-\&quot;,\&quot;referer\&quot;:\&quot;-\&quot;,\&quot;tcp_xff\&quot;:\&quot;-\&quot;,\&quot;http_user_agent\&quot;:\&quot;curl/7.81.0\&quot;,\&quot;status\&quot;:\&quot;200\&quot;&#125;&quot;</span>,</span><br><span class="line">  </span><br><span class="line">2.这是配置json.keys_under_root: <span class="literal">true</span>的展示  （ip，状态码，时间戳都以顶级字段展示了，更加方便读取分析数据）</span><br><span class="line">  <span class="string">&quot;json&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;clientip&quot;</span>: <span class="string">&quot;10.0.0.211&quot;</span>,</span><br><span class="line">    <span class="string">&quot;domain&quot;</span>: <span class="string">&quot;10.0.0.211&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;2024-10-02T11:55:24+08:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vhost&quot;</span>: <span class="string">&quot;10.0.0.211&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http_host&quot;</span>: <span class="string">&quot;10.0.0.211&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tcp_xff&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xff&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/index.nginx-debian.html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http_user_agent&quot;</span>: <span class="string">&quot;curl/7.81.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;responsetime&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;upstreamhost&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SendBytes&quot;</span>: 612,</span><br><span class="line">    <span class="string">&quot;upstreamtime&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;200&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES架构采集nginx日志并分析"><a href="#ES架构采集nginx日志并分析" class="headerlink" title="ES架构采集nginx日志并分析"></a>ES架构采集nginx日志并分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.编写filebeat吸入ES集群配置文件   （选择output&gt;Elasticsearch复制官方案例修改）</span></span><br><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/filebeat/05-nginx-es.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  json:</span><br><span class="line">    keys_under_root: <span class="literal">true</span></span><br><span class="line">    add_error_key: <span class="literal">true</span></span><br><span class="line">    overwirte_kes: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/nginx/access.log* </span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">&quot;http://10.0.0.211:9200&quot;</span>,<span class="string">&quot;http://10.0.0.212:9200&quot;</span>,<span class="string">&quot;http://10.0.0.213:9200&quot;</span>] </span><br><span class="line">  </span><br><span class="line"><span class="comment">#2.启动filebeat实例</span></span><br><span class="line">[root@elk01:1 ~]# filebeat -e -c /etc/filebeat/05-nginx-es.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.访问nginx服务</span></span><br><span class="line">[root@elk01:1 ~]# <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> curl 10.0.0.211; <span class="built_in">sleep</span> 1 ;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>浏览器访问：10.0.0.211:5601</p><p><img src="https://cos.lukme.top/Pic/image-20241002155103512.png" alt="image-20241002155103512"></p><p><strong>创建索引</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241002160236505.png" alt="image-20241002160236505"></p><p><strong>进入菜单栏选择Discover</strong></p><p><strong>查看数据（支持多条件查询）</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241002160129138.png" alt="image-20241002160129138"></p><p><img src="https://cos.lukme.top/Pic/image-20241002161758175.png" alt="image-20241002161758175"></p><h2 id="ES的常见术语-分片"><a href="#ES的常见术语-分片" class="headerlink" title="ES的常见术语-分片"></a>ES的常见术语-分片</h2><p><img src="https://cos.lukme.top/Pic/image-20241002160849403.png" alt="image-20241002160849403"></p><p><strong>index</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- index: 索引</span><br><span class="line">索引是一个逻辑的存储单元，一般用于标识不同的业务类型，因此索引的名称大家可以自定义。</span><br><span class="line">用户基于索引进行数据的读写。</span><br></pre></td></tr></table></figure><p><strong>shard</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- shard: 分片</span><br><span class="line">一个索引最少有一个分片，数据存储在分片中。</span><br><span class="line">当索引的分片数量大于1时，ES集群自动将分片分散地存储在不同的数据节点，而是实现了数据的分布式存储。</span><br></pre></td></tr></table></figure><blockquote><p>​    一个 分片 是一个底层的 工作单元 ，它仅保存了全部数据中的一部分。 在分片内部机制中，我们将详细介绍分片是如何工作的，而现在我们只需知道一个分片是一个 Lucene 的实例，以及它本身就是一个完整的搜索引擎。 我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。<br>​     Elasticsearch 是利用分片将数据分发到集群内各处的。分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。 当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。</p><p>​    一个分片可以是 主 分片或者 副本 分片。 索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。</p></blockquote><p><strong>replica</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- replica: 副本</span><br><span class="line">每个分片有0个或多个副本，若副本数量大于0时，则可以实现对主分片的备份。为了方便理解将其分片主分片(primary shard)和副本分片(replica shard)。</span><br><span class="line">主分片(primary shard)和副本分片(replica shard)不能在同一台节点。</span><br><span class="line">主分片负责数据的读写，而副本分片只负责数据的读取和同步。</span><br><span class="line">当主分片和副本分片较多时，默认的写入策略为： <span class="string">&quot;(主分片数量 + 副本分片数量) / 2 + 1&quot;</span>，说白了，就是半数以上写入机制。</span><br><span class="line"></span><br><span class="line">比如1个主分片，和1个副本分片总共2个分片的数据相同，其写入策略为： (1 + 1) / 2 + 1，结果为：2，表示主分片和副本分片都必须写入成功则判定成功。</span><br></pre></td></tr></table></figure><blockquote><p>​    一个副本分片只是一个主分片的拷贝。副本分片作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务。<br>副本分片的主要目的就是为了故障转移，如果持有主分片的节点挂掉了，一个副本分片就会晋升为主分片的角色。在索引写入时，副本分片做着与主分片相同的工作。新文档首先被索引进主分片然后再同步到其它所有的副本分片。</p><p>​    增加副本数并不会增加索引容量，在索引建立的时候就已经确定了主分片数，但是副本分片数可以随时修改</p></blockquote><p>通俗理解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分片数（number_of_shards）就是主分片个数</span><br><span class="line">副本数（number_of_replicas） 可以理解成主分片的拷贝个数</span><br><span class="line">如果主分片数是5，则每个副本都有5个分片</span><br><span class="line">因此ES集群总的分片数 = 分片数 * (副本数 + 1)</span><br></pre></td></tr></table></figure><p><strong>副本数分配算法：</strong></p><blockquote><p>副本数 &lt;= ES集群的服务器个数 - 1</p></blockquote><p>副本除了提升查询效率，主要目的为了容灾，数据冗余存储，保证数据安全，因此，副本数应跟据ES集群中的数据库数量（N-1）进行配置，如果ES集群中有3台服务器，则副本数设置为2，减 1 因为主分片本身也算一份。副本数设置为2，数据实际上有3份，分散到3台服务器中。</p><blockquote><p>预估要存入ES总数据量 * (副本数+1) &lt;= ES集群的总内存 / 2</p></blockquote><p>存入ES搜索引擎 的数据可以预估，比如预估存入的数据有 100G，则实际上会占用的内存为 100G * (副本数+1) 加 1 因为计入了主分片，数量里超限了也可以存入，只要磁盘够大，但是计算时就可能用到了磁盘，磁盘的IO性能会让整个ES集群性能大副下降。</p><p>ES集群的总内存只取了一半，因为考虚 ES 的 java. 程序本身占用的内存，数据聚合运算消耗的内存，如果实际项目中大量复杂运算，占用的内存需要更多。</p><p><strong>分片数分配算法：</strong></p><blockquote><p>分片数 * (副本数 + 1) &lt;= ES集群的总CPU核心个数</p></blockquote><p>分片内的检索运算聚合需要 CPU， 为了充分发挥多核CPU的性能，且又避免CPU频繁调度，因此，ES集群内总的分片数应小于等于总的CPU核心个数。</p><p><strong>document</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- document: 文档</span><br><span class="line">ES本身就是一个文档型数据库，和mangoDB类似。</span><br><span class="line">每个文件的数据分为两个部分： 元数据和源数据。</span><br><span class="line"></span><br><span class="line">1.元数据(metadata):</span><br><span class="line">用于描述源数据的数据。</span><br><span class="line">常见的字段如下:</span><br><span class="line">_index:</span><br><span class="line">表示文档隶属于哪个索引。</span><br><span class="line">_id:</span><br><span class="line">表示文档的唯一标识。</span><br><span class="line">_source:</span><br><span class="line">代表用户实际存储的数据。</span><br><span class="line"></span><br><span class="line">2.源数据(<span class="built_in">source</span> data):</span><br><span class="line">用户实际写入的数据。</span><br><span class="line"></span><br><span class="line">- allocation(分配):</span><br><span class="line">  指的是将索引的不同分片和副本分配到整个ES集群的过程，这个分配过程由ES集群自己实现。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇讲述了基于EFK架构的日志收集部署及简单日志分析</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>03-k8sPOD资源</title>
    <link href="https://lukme.top/posts/df6c32c8.html"/>
    <id>https://lukme.top/posts/df6c32c8.html</id>
    <published>2024-10-04T14:14:29.000Z</published>
    <updated>2024-10-06T14:17:32.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="k8s资源清单描述"><a href="#k8s资源清单描述" class="headerlink" title="k8s资源清单描述"></a>k8s资源清单描述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ApiVersion:</span><br><span class="line">资源的版本，官方对每个资源规定了不同的版本，我们需要根据资源的版本进行书写。</span><br><span class="line">一般情况下，资源的版本很少变动，除非在升级过程中，随着功能的增强，版本可能也会微调。</span><br><span class="line"></span><br><span class="line">kind:</span><br><span class="line">资源的类型，K8S集群中一切皆资源。</span><br><span class="line"></span><br><span class="line">metadata:</span><br><span class="line">资源的元数据信息，包括但不限于： </span><br><span class="line">- 资源的名称;(常用)</span><br><span class="line">- 资源所属的名称空间;(常用)</span><br><span class="line">- 资源的标签;(常用)</span><br><span class="line">- 资源的注解;(早期版本常用)</span><br><span class="line">- 资源的创建时间;</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">定义了用户对Pod的期望状态。用户可以做如下操作:</span><br><span class="line">- 指定节点调度;</span><br><span class="line">- 指定调度的亲和性或反亲和性;</span><br><span class="line">- 资源的数据是否进行持久化;</span><br><span class="line">- 资源的配置文件是否需要修改;</span><br><span class="line">- 资源的容器使用具体的镜像;</span><br><span class="line">- 资源的限制</span><br><span class="line">- 资源的认证信息</span><br><span class="line">- 资源的安全信息</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">status:</span><br><span class="line">资源实际的状态，比如调度到哪个worker节点，实际分配的IP地址，运行周期，重启次数等。</span><br><span class="line">该资源一般不需要人为定义，而是有K8S集群自身维护。</span><br></pre></td></tr></table></figure><h2 id="pod资源及资源清单"><a href="#pod资源及资源清单" class="headerlink" title="pod资源及资源清单"></a>pod资源及资源清单</h2><p><strong>1.POD资源</strong></p><p><strong>kubernetes资源对象操作</strong></p><div class="table-container"><table><thead><tr><th>资源对象</th><th>增</th><th>删</th><th>改</th><th>查</th></tr></thead><tbody><tr><td>node</td><td></td><td>kubectl delete node</td><td></td><td>kubectl get nodes</td></tr><tr><td>namespace</td><td>kubectl create ns [资源名]</td><td>kubectl delete ns [资源名]</td><td>kubectl edit ns [资源名]</td><td>kubectl get ns</td></tr><tr><td>pod</td><td></td><td>kubectl delete pod [资源名]</td><td>kubectl edit pod[资源名]</td><td>kubectl get pod</td></tr></tbody></table></div><p><strong>查看集群节点状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">master   Ready    master   4d13h   v1.19.3</span><br><span class="line">node01   Ready    &lt;none&gt;   4d13h   v1.19.3</span><br><span class="line">node02   Ready    &lt;none&gt;   4d13h   v1.19.3</span><br><span class="line">node03   Ready    &lt;none&gt;   4d13h   v1.19.3</span><br></pre></td></tr></table></figure><p><strong>查看名称空间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   4d13h</span><br><span class="line">kube-flannel      Active   4d12h</span><br><span class="line">kube-node-lease   Active   4d13h</span><br><span class="line">kube-public       Active   4d13h</span><br><span class="line">kube-system       Active   4d13h</span><br><span class="line">luay              Active   4h17m</span><br></pre></td></tr></table></figure><p><strong>查看pod  (默认default名称空间)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-565785f75c-tpjmj   1/1     Running   0          6h8m</span><br><span class="line">nginx-pod                1/1     Running   0          5h43m</span><br></pre></td></tr></table></figure><p><strong>查看pod  (指定名称空间)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get pods -n luay</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">busybox-pod   2/2     Running   0          3m30s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master ~]# kubectl get pod -n luay -o wide</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     IP         NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">busybox-pod   2/2     Running   0          4m14s   10.2.2.6   node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">-n 指定命名空间</span><br><span class="line">-o 指定输出方式</span><br><span class="line">json：输出json格式</span><br><span class="line">yaml：输出yaml格式</span><br><span class="line">wide：输出详细信息</span><br></pre></td></tr></table></figure><p><strong>2.pod的资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# vim nginx.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    name: nginx-containers</span><br><span class="line"></span><br><span class="line">`注释`</span><br><span class="line">apiVersion: v1       <span class="comment"># K8S资源接口</span></span><br><span class="line">kind: Pod            <span class="comment"># 资源类型</span></span><br><span class="line">metadata:            <span class="comment">#资源的元数据</span></span><br><span class="line">  name: nginx-pod    <span class="comment"># POD名字</span></span><br><span class="line">  namespace: default <span class="comment"># 指定资源启动在哪个名称空间，默认default</span></span><br><span class="line">spec:                <span class="comment">#容器相关信息</span></span><br><span class="line">  containers:        <span class="comment">#容器信息</span></span><br><span class="line">  - image: nginx:alpine           <span class="comment">#指定容器镜像</span></span><br><span class="line">    imagePullPolicy: IfNotPresent <span class="comment">#指定镜像拉取规则</span></span><br><span class="line">    name: nginx-containers        <span class="comment">#容器名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Always：总是拉取镜像，不管当前机器上是否有该镜像都拉取 nginx:latest</span><br><span class="line">Never：从不拉取镜像，需要提前docker pull</span><br><span class="line">IfNotPresent：如果镜像不存在，则拉取</span><br></pre></td></tr></table></figure><h2 id="pod报错及可能原因"><a href="#pod报错及可能原因" class="headerlink" title="pod报错及可能原因"></a>pod报错及可能原因</h2><pre><code>1.ImagePullBackOff  问题原因:      镜像拉取失败。  可能原因：      1.可能是网络问题导致，检查Pod所在节点是否能够正常访问网络;      2.镜像名称写错，也可能会导致这个错误;      3.镜像是私有仓库，镜像无权限拉取;2.ContainerCreating    问题分析:        容器正在创建阶段，等待容器创建，该过程包含拉取镜像的时间。3.Pending    问题分析:        任务已经被K8S集群接受，但是未调度到指定节点。    可能原因:        1.当前集群不正常工作，请检查集群状态，比如CNI组件未安装;        2.指定的调度的节点不存在时也会出现这样的问题;        3.端口冲突，无法完成调度;        4.所有节点都被打上污点，且pod没有配置污点容忍也会导致该状态;4.CrashLoopBackOff    问题分析:        处于该状态，说明Pod内至少有一个容器正在重启。    可能原因:        1.可能是容器的守护进程运行命令结束导致的;5.Completed    问题分析:        容器正常退出，容器没有被强制中断。6.Running    问题分析:        至少有一个容器处于正常运行状态。7.Init:1/2     问题分析:        当前的Pod处于初始化容器阶段，目前已经完成一个初始化容器，正在进行第二个容器初始化。8.PodInitializing    问题分析:        Pod正处于初始化阶段。9.ErrImageNeverPull     问题分析:        将镜像下载策略设置为Never，且本地也没有缓存镜像，因此启动容器失败。10.OutOfcpu    问题分析:        一般情况下是由于CPU资源不足导致的。11.OutOfmemory    问题分析:        一般情况下是由于内存不足无法分配导致的。12.NodePorts    问题分析:        当前的worker节点的端口可能存在冲突。13.RunContainerError    问题分析:        运行容器时出错，可以通过kubectl describe pods &lt;POD_NAME&gt;查看详细的信息。14.ErrImagePull    问题分析:        拉取镜像是失败。    可能原因:        1.镜像名称写错了;        2.没有访问权限;15.Terminating    问题分析:        Pod的容器正在删除，此过程可能需要等待一段时间，一般情况下不会超过30s。16.CreateContainerConfigError    问题分析:        运行容器出错，一般情下，是配置出错。17.ContainerStatusUnknown    问题分析:        容器重启策略为Nerver，且我们测试时将工作节点的容器直接删除啦。无法获取</code></pre><h2 id="资源清单编写案例"><a href="#资源清单编写案例" class="headerlink" title="资源清单编写案例"></a>资源清单编写案例</h2><p><strong>基于一个pod部署wordpress</strong></p><p><strong>1.编写资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# <span class="built_in">cat</span> wordpress.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-pod</span><br><span class="line">spec:</span><br><span class="line"> <span class="comment"># 使用宿主机网络名称空间</span></span><br><span class="line">  hostNetwork: <span class="literal">true</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: db</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;yes&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: wp</span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: wp_usre</span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  - name: wp</span><br><span class="line">    image: wordpress:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: WORDPRESS_DB_HOST</span><br><span class="line">      value: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_NAME</span><br><span class="line">      value: wp</span><br><span class="line">    - name: WORDPRESS_DB_USER</span><br><span class="line">      value: wp_usre</span><br><span class="line">    - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">      value: <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2.根据资源清单创建pod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# kubectl apply -f wordpress.yaml</span><br><span class="line"></span><br><span class="line">`因为使用的宿主机网络名称空间，需保证80端口不被占用`</span><br></pre></td></tr></table></figure><p><strong>3.查看pod节点信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP           NODE    </span><br><span class="line">nginx-565785f75c-tpjmj   1/1     Running   0          8h    10.2.2.2     node03  </span><br><span class="line">nginx-pod                1/1     Running   0          8h    10.2.2.3     node03  </span><br><span class="line">wordpress-pod            2/2     Running   0          36m   10.0.0.203   node03  </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建节点node03   ip 10.0.0.203</span></span><br><span class="line">浏览器访问10.0.0.203</span><br></pre></td></tr></table></figure><p><strong>基于一个pod起wordpress，做持久化</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# <span class="built_in">cat</span> wordpress.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">    run: mysql</span><br><span class="line">spec:</span><br><span class="line"><span class="comment">#如果使用下面ports，这个可以不使用宿主机网络</span></span><br><span class="line">  hostNetwork: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-data</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /data/mysql</span><br><span class="line">  containers:</span><br><span class="line">  - name: db</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;yes&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: wp</span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: wp_usre</span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: mysql-data</span><br><span class="line">      mountPath: /var/lib/mysql</span><br><span class="line">      </span><br><span class="line">  - name: wp</span><br><span class="line">    image: wordpress:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="comment">#相当于暴露端口，直接使用节点的宿主机ip访问即可·</span></span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">      hostPort: 80</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: WORDPRESS_DB_HOST</span><br><span class="line">      value: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_NAME</span><br><span class="line">      value: wp</span><br><span class="line">    - name: WORDPRESS_DB_USER</span><br><span class="line">      value: wp_usre</span><br><span class="line">    - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">      value: <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="连接pod"><a href="#连接pod" class="headerlink" title="连接pod"></a>连接pod</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 连接到POD</span></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it nginx-pod -- /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="comment">## 当一个POD中有多个容器时，使用-c指定容器名，连接到指定的容器</span></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it nginx-busybox -c busybox-container -- /bin/sh</span><br></pre></td></tr></table></figure><h2 id="pod的网络共享"><a href="#pod的网络共享" class="headerlink" title="pod的网络共享"></a>pod的网络共享</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.POD内的容器使用Container模式共享根容器的网络</span><br><span class="line">2.容器看到的网络设备信息和根容器完全相同</span><br><span class="line">3.POD内的多个容器可以使用localhost进行网络通讯</span><br><span class="line">4.POD内的多个容器不能绑定相同的端口</span><br><span class="line">5.POD的生命周期和根容器一样，如果根容器退出了，POD就退出了</span><br></pre></td></tr></table></figure><h2 id="pod的文件共享"><a href="#pod的文件共享" class="headerlink" title="pod的文件共享"></a>pod的文件共享</h2><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241002101149735.png" alt="image-20241002101149735"></p><h3 id="挂载方式hostPath"><a href="#挂载方式hostPath" class="headerlink" title="挂载方式hostPath"></a>挂载方式hostPath</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 kubernetes]# <span class="built_in">cat</span> mysql.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql57-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">    run: mysql</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-data</span><br><span class="line">  <span class="comment">#宿主机挂载的目录</span></span><br><span class="line">    hostPath:</span><br><span class="line">      path: /data/mysql</span><br><span class="line">  containers:</span><br><span class="line">  - name: mysql57-container</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  <span class="built_in">env</span>:</span><br><span class="line">  - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">    value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  - name: MYSQL_DATABASE</span><br><span class="line">    value: <span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">  - name: MYSQL_USER</span><br><span class="line">    value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">  - name: MYSQL_PASSWORD</span><br><span class="line">    value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="comment">#传递命令指定字符集</span></span><br><span class="line">  args:</span><br><span class="line">  - --character-set-server=utf8mb4</span><br><span class="line">  - --collation-server=utf8mb4_unicode_ci</span><br><span class="line">  volumeMounts:</span><br><span class="line">  <span class="comment">#name要和上面挂载目录的name一致，mountPath是容器内的要挂载的目录</span></span><br><span class="line">  - name: mysql-data</span><br><span class="line">    mountPath: /var/lib/mysql</span><br></pre></td></tr></table></figure><h3 id="hostPath的type类型"><a href="#hostPath的type类型" class="headerlink" title="hostPath的type类型"></a>hostPath的type类型</h3><blockquote><p>hostPath:<br>path: string<br>type : string</p><p>type 为空时为默认类型</p><p><code>官方：https://kubernetes.io/docs/concepts/storage/volumes/#hostpath</code></p></blockquote><div class="table-container"><table><thead><tr><th>type类型</th><th>说明</th></tr></thead><tbody><tr><td>“”</td><td>为空时   默认</td></tr><tr><td>DirectoryOrCreate</td><td>目录必须存在，权限必须是755</td></tr><tr><td>Directory</td><td>目录必须存在</td></tr><tr><td>FileOrCreate</td><td>文件必须存在，权限必须是644</td></tr><tr><td>File</td><td>文件必须存在</td></tr><tr><td>Socket</td><td>挂载socket文件</td></tr><tr><td>CharDevice</td><td>挂载字符设备文件（键盘，终端…）</td></tr><tr><td>BlockDevice</td><td>挂载快设备文件（磁盘，U盘，移动硬盘…）</td></tr></tbody></table></div><h3 id="挂载方式emptyDir"><a href="#挂载方式emptyDir" class="headerlink" title="挂载方式emptyDir"></a>挂载方式emptyDir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 将pod内容器目录映射到宿主机上的一个临时目录中，如果POD结束，目录也会被删除</span></span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cat</span> mysql.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql57-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">    run: mysql</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-data</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /data/mysql</span><br><span class="line">  - name: empty-data</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line">  containers:</span><br><span class="line">  - name: mysql57-container</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  <span class="built_in">env</span>:</span><br><span class="line">  - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">    value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  - name: MYSQL_DATABASE</span><br><span class="line">    value: <span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">  - name: MYSQL_USER</span><br><span class="line">    value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">  - name: MYSQL_PASSWORD</span><br><span class="line">    value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  args:</span><br><span class="line">  - --character-set-server=utf8mb4</span><br><span class="line">  - --collation-server=utf8mb4_unicode_ci</span><br><span class="line">  volumeMounts:</span><br><span class="line">  - name: empty-data</span><br><span class="line">    mountPath: /var/lib/mysql</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">## 将一个POD内的两个容器共享目录</span></span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cat</span> busybox.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-busybox</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: empty-data</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: empty-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: empty-data</span><br><span class="line">      mountPath: /opt/ html</span><br></pre></td></tr></table></figure><h2 id="标签的使用及设置"><a href="#标签的使用及设置" class="headerlink" title="标签的使用及设置"></a>标签的使用及设置</h2><h3 id="node节点打标签"><a href="#node节点打标签" class="headerlink" title="node节点打标签"></a>node节点打标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">kubectl get [资源] -n 名称空间 --show-labels</span><br><span class="line"><span class="comment">## 查看node标签</span></span><br><span class="line">[root@master01 ~]# kubectl get nodes --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#给node打标签</span></span><br><span class="line">[root@master01 ~]# kubectl label node node01 MEM=16g</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看node角色标签role</span></span><br><span class="line">[root@master kubernetes]# kubectl get nodes </span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">master   Ready    master   5d15h   v1.19.3</span><br><span class="line">node01   Ready    None     5d15h   v1.19.3</span><br><span class="line">node02   Ready    None     5d15h   v1.19.3</span><br><span class="line">node03   Ready    None     5d15h   v1.19.3</span><br><span class="line"></span><br><span class="line"><span class="comment">#给node角色标签role</span></span><br><span class="line">[root@master kubernetes]# kubectl label node node01 node-role.kubernetes.io/node=</span><br><span class="line">[root@master kubernetes]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES        AGE     VERSION</span><br><span class="line">master   Ready    master       5d15h   v1.19.3</span><br><span class="line">node01   Ready    node         5d15h   v1.19.3</span><br><span class="line">node02   Ready    None         5d15h   v1.19.3</span><br><span class="line">node03   Ready    None         5d15h   v1.19.3</span><br><span class="line"></span><br><span class="line">kubectl label node node01 node-role.kubernetes.io/node=</span><br><span class="line">                   节点名    调用接口             /roles标签名=</span><br><span class="line">                   </span><br><span class="line"><span class="comment">#删除node角色标签role</span></span><br><span class="line">[root@master kubernetes]# kubectl label node node01 node-role.kubernetes.io/node-</span><br></pre></td></tr></table></figure><h3 id="给pod打标签"><a href="#给pod打标签" class="headerlink" title="给pod打标签"></a>给pod打标签</h3><p><strong>给pod打标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看pod标签</span></span><br><span class="line">[root@master kubernetes]# kubectl get pods --show-labels </span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">nginx-565785f75c-tpjmj   1/1     Running   2          33h     app=nginx</span><br><span class="line">nginx-pod                1/1     Running   2          33h     &lt;none&gt;</span><br><span class="line">wordpress-pod            2/2     Running   0          2m11s   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#打标签</span></span><br><span class="line">kubectl label 资源类型 资源名 标签</span><br><span class="line">[root@master kubernetes]# kubectl label pod nginx-pod name=nginx</span><br><span class="line"><span class="string">&#x27;pod/nginx-pod labeled</span></span><br><span class="line"><span class="string">[root@master kubernetes]# kubectl get pods --show-labels </span></span><br><span class="line"><span class="string">NAME                     READY   STATUS    RESTARTS   AGE     LABELS</span></span><br><span class="line"><span class="string">nginx-565785f75c-tpjmj   1/1     Running   2          33h     app=nginx</span></span><br><span class="line"><span class="string">nginx-pod                1/1     Running   2          33h     name=nginx</span></span><br></pre></td></tr></table></figure><p><strong>使用资源清单打标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">Kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    run: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure><p><strong>利用标签，启动pod在指定标签的node上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 kubernetes]# <span class="built_in">cat</span> nginx-2.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod-v2</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    run: nginx</span><br><span class="line">spec:</span><br><span class="line"><span class="comment">#这里是选择起在标签是MEM: 16g的node节点上，使用kubectl get nodes --show-labels 查看node标签</span></span><br><span class="line">  nodeSelector:</span><br><span class="line">  MEM: 16g</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container-v2</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure><h3 id="删除pod标签"><a href="#删除pod标签" class="headerlink" title="删除pod标签"></a>删除pod标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kubectl label [资源] [资源名] [标签名、标签key]-</span><br><span class="line"><span class="comment">#查看当前pod有的标签</span></span><br><span class="line">[root@master kubernetes]# kubectl get pods --show-labels</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-565785f75c-tpjmj   1/1     Running   2          35h   app=nginx,pod-template-hash=565785f75c</span><br><span class="line">nginx-pod                1/1     Running   2          34h   name=nginx</span><br><span class="line">wordpress-pod            2/2     Running   0          39m   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除pod标签</span></span><br><span class="line">[root@master kubernetes]# kubectl label pod nginx-pod name-</span><br><span class="line">pod/nginx-pod labeled</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">[root@master kubernetes]# kubectl get pods --show-labels</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-565785f75c-tpjmj   1/1     Running   2          35h   app=nginx,pod-template-hash=565785f75c</span><br><span class="line">nginx-pod                1/1     Running   2          34h   &lt;none&gt;</span><br><span class="line">wordpress-pod            2/2     Running   0          39m   &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="根据标签查找pod"><a href="#根据标签查找pod" class="headerlink" title="根据标签查找pod"></a>根据标签查找pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# kubectl get pod --show-labels -l app</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-565785f75c-tpjmj   1/1     Running   2          35h   app=nginx,pod-template-hash=565785f75c</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用  `-l`  查找指定的pod</span></span><br></pre></td></tr></table></figure><h3 id="根据标签删除pod"><a href="#根据标签删除pod" class="headerlink" title="根据标签删除pod"></a>根据标签删除pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master kubernetes]# kubectl delete pod -l app=nginx</span><br></pre></td></tr></table></figure><h2 id="kubectl用于排错命令"><a href="#kubectl用于排错命令" class="headerlink" title="kubectl用于排错命令"></a>kubectl用于排错命令</h2><h3 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h3><blockquote><p><code>kubectl describe pod</code></p><p>查看相关 Pod 的详细信息，帮助我们了解 Pod 的状态、配置和运行状况。尤其是Events可以帮助我们做一些故障排查。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl describe pod busybox-pod -n luay</span><br><span class="line"><span class="comment">#如果查看的pod的名称空间不是默认default，则需要指定 -n</span></span><br><span class="line">···</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  18m   default-scheduler  Successfully assigned luay/busybox-pod to node03</span><br><span class="line">  Normal  Pulled     18m   kubelet            Container image <span class="string">&quot;busybox&quot;</span> already present on machine</span><br><span class="line">  Normal  Created    18m   kubelet            Created container busybox-container</span><br><span class="line">  Normal  Started    18m   kubelet            Started container busybox-container</span><br><span class="line">  Normal  Pulled     18m   kubelet            Container image <span class="string">&quot;nginx:alpine&quot;</span> already present on machine</span><br><span class="line">  Normal  Created    18m   kubelet            Created container nginx-container</span><br><span class="line">  Normal  Started    18m   kubelet            Started container nginx-container</span><br><span class="line">  </span><br><span class="line"><span class="comment">#查看node节点信息</span></span><br><span class="line">[root@master ~]# kubectl describe node master01</span><br></pre></td></tr></table></figure><h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><blockquote><p><code>kubectl logs 资源名</code>   可以使用kubectl get pod  查看资源名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;kubectl logs 资源名称&#x27;</span></span><br><span class="line">[root@master ~]# kubectl logs mysql80 </span><br><span class="line"></span><br><span class="line"><span class="comment">#实时查看日志</span></span><br><span class="line">[root@master ~]# kubectl logs -f mysql80 </span><br><span class="line"></span><br><span class="line"><span class="comment">#基于一个Pod内多个容器查看指的容器的日志   -c  指定容器名</span></span><br><span class="line">[root@master ~]# kubectl logs -f multiple-wordpress -c db</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;multiple-wordpress&#x27;</span> pod名</span><br><span class="line">-c 指定pod里的某一个容器名</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pod上一个容器的日志（前提是该容器存在，若移除了则看不到）</span></span><br><span class="line"><span class="string">&#x27;这种情况存在于，杀掉了pod里某个容器，又被kubelet重新拉取了另一个新的容器,-p查看上个容器日志&#x27;</span></span><br><span class="line">[root@master ~]#  kubectl logs -f mysql80 -p</span><br><span class="line"><span class="string">&#x27;mysql80&#x27;</span> 容器名   ----待验证</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看5分钟内的日志信息， 默认是查看所有日志，可以自定义指定时间，例如: 5s, 2m, or 3h.</span></span><br><span class="line">[root@master ~]# kubectl logs -f mysql80 --since  5m</span><br></pre></td></tr></table></figure><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p><strong>将本地的文件拷贝到Pod的容器中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl <span class="built_in">cp</span> wordpress.yaml mysql80:/tmp</span><br><span class="line"></span><br><span class="line">如何查看？</span><br><span class="line">[root@master ~]# kubectl <span class="built_in">exec</span> -it mysql80 --<span class="built_in">ls</span> /tmp</span><br><span class="line">类似于docker <span class="built_in">exec</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有多个容器，则需要使用-c指定 </span></span><br><span class="line">kubectl <span class="built_in">cp</span>  wordpress.yaml  -c wp multiple-wordpress:/</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;multiple-wordpress&#x27;</span>   <span class="comment">#pod名   ---待验证</span></span><br><span class="line"><span class="string">&#x27;wp&#x27;</span> <span class="comment">#容器名</span></span><br><span class="line"></span><br><span class="line">如果有多个容器，则需要使用-c指定容器的名称，若不指定，则默认Pod连接第一个容器</span><br></pre></td></tr></table></figure><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p><strong>查看指定字段的帮助信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl explain pods.</span><br><span class="line">[root@master ~]# kubectl explain pods.metadata</span><br><span class="line">[root@master ~]# kubectl explain pods.metadata.name</span><br><span class="line">[root@master ~]# kubectl explain pods.spec.containers</span><br></pre></td></tr></table></figure><p><strong>常见的资源类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;string&gt;：</span><br><span class="line">表示一个字符串。</span><br><span class="line"></span><br><span class="line">&lt;Object&gt;:</span><br><span class="line">表示有下级字段。</span><br><span class="line"></span><br><span class="line"> &lt;[]Object&gt;:</span><br><span class="line">表示数组对象说可以有多个，每个对象的区分使用<span class="string">&quot;-&quot;</span>，同一个对象数组内的相关字段可以相互交换。</span><br><span class="line"></span><br><span class="line">&lt;boolean&gt;:</span><br><span class="line">只有<span class="literal">true</span>和<span class="literal">false</span>两个有效值。</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">integer</span>&gt;:</span><br><span class="line">整型，表示的是一个整数。</span><br><span class="line"></span><br><span class="line">-required-</span><br><span class="line">表示该字段必须定义，不定义则会报错。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">上干货了，k8s的POD资源以及网络共享，文件挂载等在这里都能看到</summary>
    
    
    
    <category term="kubernetes" scheme="https://lukme.top/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://lukme.top/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>02-k8s部署</title>
    <link href="https://lukme.top/posts/24ecfc3b.html"/>
    <id>https://lukme.top/posts/24ecfc3b.html</id>
    <published>2024-10-02T16:49:49.000Z</published>
    <updated>2024-10-06T14:13:40.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><div class="table-container"><table><thead><tr><th>主机名</th><th>WanIP</th><th>LanIP</th><th>角色</th><th>应用</th><th>配置</th></tr></thead><tbody><tr><td>master01</td><td>10.0.0.200</td><td>172.16.1.200</td><td>master</td><td>kubectl、apiserver、 scheduler、controller、 etcd、kubelet、docker、 kube-proxy</td><td>1h2g</td></tr><tr><td>node01</td><td>10.0.0.201</td><td>172.16.1.201</td><td>node</td><td>kubelet、docker、kubeproxy、proxy</td><td>1h2g</td></tr><tr><td>node02</td><td>10.0.0.202</td><td>172.16.1.202</td><td>node</td><td>kubelet、docker、kubeproxy、proxy</td><td>1h2g</td></tr><tr><td>node03</td><td>10.0.0.203</td><td>172.16.1.203</td><td>node</td><td>kubelet、docker、kubeproxy、proxy</td><td>2h4g</td></tr></tbody></table></div><p><strong>IP规划</strong></p><div class="table-container"><table><thead><tr><th>三种Service</th><th>IP</th></tr></thead><tbody><tr><td>PodIP</td><td>10.2.0.0</td></tr><tr><td>ClusterIP</td><td>10.1.0.0</td></tr><tr><td>NodeIP</td><td>10.0.0.0</td></tr></tbody></table></div><h2 id="基础环境优化"><a href="#基础环境优化" class="headerlink" title="基础环境优化"></a>基础环境优化</h2><blockquote><p>注意：四个节点都操作</p></blockquote><p><strong>1.配置kubelet配置文件，使用系统自带的Cgroup驱动和禁用swap</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# <span class="built_in">cat</span> &gt;/etc/sysconfig/kubelet &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="string">KUBELET_EXTRA_ARGS=&quot;--fail-swap-on=false&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">`注释`</span><br><span class="line"><span class="comment">## 让kubelet使用系统自带的Cgroup驱动</span></span><br><span class="line">KUBELET_CGROUP_ARGS=<span class="string">&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="comment">## 让kubelet禁止使用swap（虚拟内存）</span></span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">&quot;--fail-swap-on=false&quot;</span></span><br></pre></td></tr></table></figure><p><strong>2.内核参数调优</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]#  <span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string">vm.swappiness=0</span></span><br><span class="line"><span class="string">fs,file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">`注释`</span><br><span class="line"><span class="comment">## 开启iptables功能 ipv6</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line"><span class="comment">## 开启iptables功能 ipv4</span></span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line"><span class="comment">## 开启内核转发</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"><span class="comment">## 内核参数禁用swap</span></span><br><span class="line">vm.swappiness=0</span><br><span class="line"><span class="comment">## 文件描述符文件最大值</span></span><br><span class="line">fs,file-max=52706963</span><br><span class="line"><span class="comment">## 文件描述符开启数量</span></span><br><span class="line">fs.nr_open=52706963</span><br></pre></td></tr></table></figure><p><strong>3.更改docker源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加docekr源</span></span><br><span class="line">[root@master ~]#  <span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker-ce.repo &lt;&lt;<span class="string">&quot;EOF&quot;</span></span><br><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#替换为华为源</span></span><br><span class="line">[root@master ~]# sed -i <span class="string">&#x27;s+download.docker.com+mirrors.huaweicloud.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong>4.安装时间同步服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# yum install -y chrony</span><br><span class="line">[root@master ~]# systemctl start chronyd</span><br><span class="line">[root@master ~]# systemctl <span class="built_in">enable</span> chronyd</span><br></pre></td></tr></table></figure><p> <strong>5.关闭swap</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#临时关闭swap</span></span><br><span class="line">[root@master ~]#  swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br><span class="line"><span class="comment">#永久关闭</span></span><br><span class="line">[root@master ~]#  sed -i <span class="string">&#x27;/swap/d&#x27;</span> /etc/fstab</span><br><span class="line"><span class="comment">#查看是否关闭</span></span><br><span class="line">[root@master ~]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.9G         95M        1.6G        9.5M        283M        1.7G</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><p><strong>6.加载ipvs模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# <span class="built_in">cat</span>  &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#! /bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#授权</span></span><br><span class="line">[root@master ~]# <span class="built_in">chmod</span> +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"><span class="comment">#source使生效</span></span><br><span class="line">[root@master ~]# <span class="built_in">source</span> /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"><span class="comment">#查看是否生效</span></span><br><span class="line">[root@master ~]# lsmod|grep -e <span class="string">&#x27;ip_vs&#x27;</span> -e <span class="string">&#x27;nf_conntrack_ipv&#x27;</span></span><br><span class="line">nf_conntrack_ipv4      15053  0 </span><br><span class="line">nf_defrag_ipv4         12729  1 nf_conntrack_ipv4</span><br><span class="line">ip_vs_sh               12688  0 </span><br><span class="line">ip_vs_wrr              12697  0 </span><br><span class="line">ip_vs_rr               12600  0 </span><br><span class="line">ip_vs                 145497  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class="line">nf_conntrack          133095  2 ip_vs,nf_conntrack_ipv4</span><br><span class="line">libcrc32c              12644  3 xfs,ip_vs,nf_conntrack</span><br><span class="line"></span><br><span class="line"><span class="comment">#了解下IPVS  LVS:ipvsadm</span></span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><blockquote><p>注意：所有节点执行</p></blockquote><p><strong>1.安装指定版本docekr和容器运行时</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# yum install -y docker-ce-19.03.15 docker-ce-cli-19.03.15 containerd.io</span><br><span class="line"></span><br><span class="line">`容器运行时，Docker、containerd、CRI-O`</span><br></pre></td></tr></table></figure><p><strong>2.启动和开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl start docker</span><br><span class="line">[root@master ~]# systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p><strong>3.添加docker镜像加速</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# <span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">    &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">    &quot;https://docker.1panel.live&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://dockercf.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker-cf.registry.cyou&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.chenby.cn&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.m.daocloud.io&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.m.daocloud.io&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.nju.edu.cn&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://dockerproxy.com&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.rainbond.cc&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.registry.cyou&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://dockertest.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://hub-mirror.c.163.com&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://hub.rat.dev/&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://mirror.aliyuncs.com&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://mirror.baidubce.com&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://mirror.iscas.ac.cn&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">`<span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>], `#镜像加速使用系统Cgroup驱动</span><br></pre></td></tr></table></figure><p><strong>4.重启docerk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl daemon-reload</span><br><span class="line">[root@master ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h2><blockquote><p>注意：所有节点执行</p></blockquote><p><strong>1.更换kubernetes的yum源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">&quot;EOF&quot;</span> &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.huaweicloud.com/kubernetes/yum/repos/kubernetes-el7-<span class="variable">$basearch</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.huaweicloud.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.huaweicloud.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>2.下载指定版本kubernetes</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# yum install kubelet-1.19.3 kubeadm-1.19.3  kubectl-1.19.3  ipvsadm -y</span><br><span class="line"></span><br><span class="line">`kubelet`: node节点容器运行时的控制器 </span><br><span class="line">`kubeadm`: 做k8s集群 kubectl k8s的命令客户端</span><br><span class="line">`ipvsadm`: 加载ipvs模块</span><br></pre></td></tr></table></figure><p><strong>3.启动并加入开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl start kubelet</span><br><span class="line">[root@master ~]# systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h2 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h2><blockquote><p>:dango:注意：仅master节点执行</p><p>步骤1-3都是master节点执行</p></blockquote><p><strong>1.初始化集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubeadm init \</span><br><span class="line">--apiserver-advertise-address=10.0.0.200 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--kubernetes-version=v1.19.3 \</span><br><span class="line">--service-cidr=10.1.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.2.0.0/16 \</span><br><span class="line">--service-dns-domain=cluster.local \</span><br><span class="line">--ignore-preflight-errors=Swap \</span><br><span class="line">--ignore-preflight-errors=NumCPU</span><br><span class="line"></span><br><span class="line">`注释`</span><br><span class="line">`--apiserver-advertise-address=10.0.0.200`  <span class="comment">#当前master主机ip</span></span><br><span class="line">`--service-cidr=10.1.0.0/16` <span class="comment">#规划ClusterIP网段</span></span><br><span class="line">`--pod-network-cidr=10.2.0.0/16` <span class="comment">#规划的podIP</span></span><br><span class="line">`--service-dns-domain=cluster.local` <span class="comment">#使用本地DNS集群，k8会自己装Coredns</span></span><br><span class="line">`--ignore-preflight-errors=Swap`<span class="comment">#忽略Swap报错</span></span><br><span class="line">`--ignore-preflight-errors=NumCPU`<span class="comment">#忽略CPU报错</span></span><br><span class="line"></span><br><span class="line">`ClusterIP`: 用于构建容器化应用的内部通信网络，作为POD的负载均衡</span><br><span class="line"></span><br><span class="line"><span class="comment">###初始化时间比较长，没有报错等待即可</span></span><br></pre></td></tr></table></figure><p><strong>保存token</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">`初始化成功后会输入如下，你的和我的不一样，注意保存,24h后会消失`</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">`#这个命令也保存，等一下直接复制执行`</span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line">kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token ao4unc.i520imoy7frmmucj \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:77e1fdf379200e1e377304865da17a4f35212955eaf331d2df736c452a2e82f8 </span><br></pre></td></tr></table></figure><blockquote><p>!!!  到这一步前面没报错就可以打快照，万一后面出错方便回滚，建议所有节点都可以打一次，如果报错可以回滚到同一起始点</p><p>!! 如果时间太久忘记加入令牌的命令，执行命令</p><p><code>kubeadm token create --print-join-command</code></p><p>获取新的join令牌</p></blockquote><p><strong>2.创建配置文件目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]#   <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">[root@master ~]#   <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">[root@master ~]#   <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">`直接复制上面的三条输出`</span><br></pre></td></tr></table></figure><p><strong>3.查看k8s集群节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS     ROLES    AGE   VERSION</span><br><span class="line">master   NotReady   master   11m   v1.19.3</span><br></pre></td></tr></table></figure><p><strong>4.其他node节点加入集群</strong></p><blockquote><p>注意：这里是3个node节点执行  <code>复制自己的，含有token的命令，不要复制我的</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token ao4unc.i520imoy7frmmucj \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:77e1fdf379200e1e377304865da17a4f35212955eaf331d2df736c452a2e82f8 </span><br><span class="line">    </span><br><span class="line">[root@node02 ~]# kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token ao4unc.i520imoy7frmmucj \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:77e1fdf379200e1e377304865da17a4f35212955eaf331d2df736c452a2e82f8 </span><br><span class="line"></span><br><span class="line">[root@node03 ~]# kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token ao4unc.i520imoy7frmmucj \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:77e1fdf379200e1e377304865da17a4f35212955eaf331d2df736c452a2e82f8 </span><br><span class="line">···</span><br><span class="line">Run <span class="string">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class="built_in">join</span> the cluster.</span><br></pre></td></tr></table></figure><p><strong>5.查看k8s集群</strong></p><blockquote><p>去master节点看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS     ROLES    AGE     VERSION</span><br><span class="line">master   NotReady   master   17m     v1.19.3</span><br><span class="line">node01   NotReady   &lt;none&gt;   3m12s   v1.19.3</span><br><span class="line">node02   NotReady   &lt;none&gt;   3m32s   v1.19.3</span><br><span class="line">node03   NotReady   &lt;none&gt;   3m27s   v1.19.3</span><br><span class="line">`看到四个节点NotReady即OK，因为还未配置网络，不能跨主机通信`</span><br></pre></td></tr></table></figure><p><strong>6.设置Kube-proxy使用ipvs模式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`k8s默认使用的是iptables防火墙，可以修改成性能更高的ipvs模式，该模式LVS也在使用`</span><br><span class="line">[root@master01 ~]# kubectl edit cm kube-proxy -n kube-system</span><br><span class="line">mode: <span class="string">&quot;&quot;</span> --&gt;  mode: <span class="string">&quot;ipvs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#搜mode，添上ipvs即可</span></span><br></pre></td></tr></table></figure><p><strong>7.查看指定名称空间中pod相信信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get pod -n kube-system</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6d56c8448f-spslt         0/1     Pending   0          26m</span><br><span class="line">coredns-6d56c8448f-x5lqj         0/1     Pending   0          26m</span><br><span class="line">etcd-master                      1/1     Running   0          26m</span><br><span class="line">kube-apiserver-master            1/1     Running   0          26m</span><br><span class="line">kube-controller-manager-master   1/1     Running   0          26m</span><br><span class="line">kube-proxy-qmbtd                 1/1     Running   0          26m</span><br><span class="line">kube-proxy-sqnbb                 1/1     Running   0          12m</span><br><span class="line">kube-proxy-t7hcw                 1/1     Running   0          12m</span><br><span class="line">kube-proxy-xzv7f                 1/1     Running   0          12m</span><br><span class="line">kube-scheduler-master            1/1     Running   0          26m</span><br><span class="line"></span><br><span class="line">`状态没异常即可，除Pending和Running之外的状态都是不正常的，检查是否步骤出错`</span><br><span class="line"></span><br><span class="line">`coredns-6d56c8448f-spslt`<span class="comment">#dns服务器</span></span><br><span class="line">`coredns-6d56c8448f-x5lqj`<span class="comment">#dns服务器</span></span><br><span class="line">`etcd-master` <span class="comment">#数据库所有节点的存储</span></span><br><span class="line">`kube-apiserver-master`<span class="comment">#集群的控制中心--&#x27;司令部&#x27;</span></span><br><span class="line">`kube-controller-manager-master` <span class="comment">#维护集群的状态--&#x27;控制器&#x27;</span></span><br><span class="line">`kube-proxy-qmbtd`<span class="comment">#负责将网络流量转发到正确的Pod、端口映射</span></span><br><span class="line">`kube-proxy-sqnbb`</span><br><span class="line">`kube-proxy-t7hcw`</span><br><span class="line">`kube-proxy-xzv7f`</span><br><span class="line">`kube-scheduler-master`<span class="comment">#调度器</span></span><br></pre></td></tr></table></figure><p><strong>8.查看指定名称空间中pod详细信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get pod -n kube-system -o wide</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE   IP        </span><br><span class="line">coredns-6d56c8448f-spslt         0/1     Pending   0          42m   &lt;none&gt;    </span><br><span class="line">coredns-6d56c8448f-x5lqj         0/1     Pending   0          42m   &lt;none&gt;    </span><br><span class="line">etcd-master                      1/1     Running   0          42m   10.0.0.200</span><br><span class="line">kube-apiserver-master            1/1     Running   0          42m   10.0.0.200</span><br><span class="line">kube-controller-manager-master   1/1     Running   0          42m   10.0.0.200</span><br><span class="line">kube-proxy-qmbtd                 1/1     Running   0          42m   10.0.0.200</span><br><span class="line">kube-proxy-sqnbb                 1/1     Running   0          28m   10.0.0.203</span><br><span class="line">kube-proxy-t7hcw                 1/1     Running   0          28m   10.0.0.201</span><br><span class="line">kube-proxy-xzv7f                 1/1     Running   0          28m   10.0.0.202</span><br><span class="line">kube-scheduler-master            1/1     Running   0          42m   10.0.0.200</span><br><span class="line"></span><br><span class="line">`检查状态是否都是Running，比对下是否步骤有出入`</span><br></pre></td></tr></table></figure><p><strong>9.查看名称空间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get namespace</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   45m</span><br><span class="line">kube-node-lease   Active   45m</span><br><span class="line">kube-public       Active   45m</span><br><span class="line">kube-system       Active   45m</span><br><span class="line"></span><br><span class="line">`namespace 可以简写为 ns`</span><br><span class="line">[root@master ~]# kubectl get ns</span><br></pre></td></tr></table></figure><p><strong>10.重启kube-proxy</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`删除所有proxy`</span><br><span class="line">kubectl get pod -n kube-system|grep <span class="string">&#x27;kube-proxy&#x27;</span>|awk <span class="string">&#x27;&#123;print &quot;kubectl delete pod -n kube-system &quot;$1&#125;&#x27;</span>|bash</span><br><span class="line"></span><br><span class="line">`#删除单个proxy`</span><br><span class="line">kubectl delete pod -n kube-system kube-proxy名字 `例如kube-proxy-qmbtd`</span><br><span class="line"></span><br><span class="line">`#因为k8会自动拉起停掉的pod，所以删除即可重启`</span><br></pre></td></tr></table></figure><p><strong>11.再次检查状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get pod -n kube-system -o wide</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE   IP        </span><br><span class="line">coredns-6d56c8448f-spslt         0/1     Pending   0          52m   &lt;none&gt;    </span><br><span class="line">coredns-6d56c8448f-x5lqj         0/1     Pending   0          52m   &lt;none&gt;    </span><br><span class="line">etcd-master                      1/1     Running   0          52m   10.0.0.200</span><br><span class="line">kube-apiserver-master            1/1     Running   0          52m   10.0.0.200</span><br><span class="line">kube-controller-manager-master   1/1     Running   0          52m   10.0.0.200</span><br><span class="line">kube-proxy-62xz4                 1/1     Running   0          47s   10.0.0.203</span><br><span class="line">kube-proxy-gxz9p                 1/1     Running   0          35s   10.0.0.202</span><br><span class="line">kube-proxy-sfzzf                 1/1     Running   0          37s   10.0.0.201</span><br><span class="line">kube-proxy-vjgc5                 1/1     Running   0          49s   10.0.0.200</span><br><span class="line">kube-scheduler-master            1/1     Running   0          52m   10.0.0.200</span><br><span class="line"></span><br><span class="line">`检查状态是否异常，如有异常，比对之前步骤，也可查看系统日志报错`</span><br></pre></td></tr></table></figure><h2 id="配置flannel"><a href="#配置flannel" class="headerlink" title="配置flannel"></a>配置flannel</h2><p><strong>1.修改flannel资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">`kube-flannel.yml`</span><br><span class="line"><span class="comment">#下载链接 https://github.com/flannel-io/flannel/blob/master/Documentation/kube-flannel.yml</span></span><br><span class="line"></span><br><span class="line">[root@master ~]# vim kube-flannel.yml</span><br><span class="line"><span class="comment">#1.将Network网段改为10.2.0.0/16</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.2.0.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;EnableNFTables&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.将容器绑定网卡eth0   在`- --kube-subnet-mgr`  后面加上`- --iface=eth0` 如下</span></span><br><span class="line">containers:</span><br><span class="line">- args:</span><br><span class="line">- --ip-masq</span><br><span class="line">- --kube-subnet-mgr</span><br><span class="line">- --iface=eth0</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.删除如下三行（意思是，只有标签是app的节点才能下载flannel）</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flannel</span><br></pre></td></tr></table></figure><p><strong>2.应用flannel资源清单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用flannel资源清单</span></span><br><span class="line">[root@master ~]# kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查flannel的pod是否成功启动</span></span><br><span class="line">[root@master ~]# kubectl get pod -n kube-flannel</span><br><span class="line">NAME                    READY   STATUS                  RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-g9drp   0/1     Running                 0          6m9s</span><br><span class="line">kube-flannel-ds-rcwkv   1/1     Running                 0          6m9s</span><br><span class="line">kube-flannel-ds-txcn2   1/1     Running                 0          6m9s</span><br><span class="line">kube-flannel-ds-whd7p   1/1     Running                 0          6m9s</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查k8s集群节点状态</span></span><br><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   17m   v1.19.3</span><br><span class="line">node01   Ready    &lt;none&gt;   14m   v1.19.3</span><br><span class="line">node02   Ready    &lt;none&gt;   14m   v1.19.3</span><br><span class="line">node03   Ready    &lt;none&gt;   14m   v1.19.3</span><br><span class="line"></span><br><span class="line"><span class="comment">## 检查coredns是否正常运行</span></span><br><span class="line">[root@master ~]# kubectl get pod -n kube-system</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6d56c8448f-hxpjc         1/1     Running   0          17m</span><br><span class="line">coredns-6d56c8448f-lb5m4         1/1     Running   0          17m</span><br><span class="line">etcd-master                      1/1     Running   0          17m</span><br><span class="line">kube-apiserver-master            1/1     Running   0          17m</span><br><span class="line">kube-controller-manager-master   1/1     Running   0          17m</span><br><span class="line">kube-proxy-46jqn                 1/1     Running   0          12m</span><br><span class="line">kube-proxy-4bnmp                 1/1     Running   0          12m</span><br><span class="line">kube-proxy-5lc7l                 1/1     Running   0          12m</span><br><span class="line">kube-proxy-r8cll                 1/1     Running   0          12m</span><br><span class="line">kube-scheduler-master            1/1     Running   0          17m</span><br></pre></td></tr></table></figure><p><strong>k8s命令补全</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br><span class="line">kubectl completion bash &gt; /etc/bash_completion.d/kubectl</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍了使用kubeadmin部署k8s集群</summary>
    
    
    
    <category term="kubernetes" scheme="https://lukme.top/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://lukme.top/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>01-k8s介绍</title>
    <link href="https://lukme.top/posts/5b9896c9.html"/>
    <id>https://lukme.top/posts/5b9896c9.html</id>
    <published>2024-10-02T16:34:28.000Z</published>
    <updated>2024-10-06T14:13:36.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">容器的本质是一种特殊的进程。</span><br></pre></td></tr></table></figure><p><strong>容器的三要素</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Namespace<span class="comment">#做隔离，让进程只能看到Namespace中的世界；</span></span><br><span class="line">Cgroups<span class="comment">#做限制，让这个“世界”围着一个看不见的墙。</span></span><br><span class="line">rootfs<span class="comment">#做文件系统，rootfs 只是一个操作系统所包含的文件、配置和目录，并不包括操作系统内核。</span></span><br><span class="line"></span><br><span class="line">Namespace将集群内部的资源进行隔离划分。在Namespace中，形成逻辑上的不同项目组或用户组。</span><br></pre></td></tr></table></figure><p><strong>rootfs</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">挂载在容器根目录上、用来为容器进程提供隔离后执行环境的文件系统，就是所谓的“容器镜像”。它还有一个更为专业的名字，</span><br><span class="line">叫作：rootfs（根文件系统）。</span><br><span class="line"></span><br><span class="line">容器的rootfs由三部分组成，1：只读层、2：可读写层、3：init层</span><br><span class="line">1.只读层:都以增量的方式分别包含了  操作系统的一部分。</span><br><span class="line"></span><br><span class="line">2.可读写：就是专门用来存放你修改 rootfs 后产生的增量，无论是增、删、改，都发生在这里。而当我们使用完了这个被修改过的容器之后，</span><br><span class="line">还可以使用 docker commit 和 push 指令，保存这个被修改过的可读写层，并上传到 Docker Hub 上，供其他人使用；而与此同时，原先的</span><br><span class="line">只读层里的内容则不会有任何变化。这就是增量 rootfs 的好处。</span><br><span class="line"></span><br><span class="line">3.Init 层：是 Docker 项目单独生成的一个内部层，专门用来存放 /etc/hosts、/etc/resolv.conf 等信息。</span><br></pre></td></tr></table></figure><h2 id="认识kubernetes"><a href="#认识kubernetes" class="headerlink" title="认识kubernetes"></a>认识kubernetes</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，方便进行声明式配置和自动化。可以自动部署</span><br><span class="line">(automating deployments)，伸缩(scaling)和运维容器化应用(operations of application containers)的开源平台。以下</span><br><span class="line">简称k8s</span><br><span class="line">  </span><br><span class="line">k8s参考网站</span><br><span class="line">`k8s官方`: https://kubernetes.io/zh-cn/docs/home/</span><br><span class="line">`阿里云k8s-ACK`：https://www.aliyun.com/product/kubernetes</span><br><span class="line">`亚马逊k8s-EKS`：https://aws.amazon.com/cn/eks/?nc2=h_ql_prod_ct_eks</span><br><span class="line">`使用ansible一键部署k8s`：https://github.com/easzlab/kubeasz</span><br></pre></td></tr></table></figure><h2 id="k8s组件"><a href="#k8s组件" class="headerlink" title="k8s组件"></a>k8s组件</h2><p><img src="https://cos.lukme.top/Pic/components-of-kubernetes-1726291732343-3.svg" alt="components-of-kubernetes"></p><p><strong>核心组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.控制平面组件（Control Plane Components）  master节点</span><br><span class="line">2.控制容器运行时（docker）启动指定的容器      node节点</span><br></pre></td></tr></table></figure><p><strong>k8s各个组件功能说明</strong></p><h3 id="1-UI-CLI"><a href="#1-UI-CLI" class="headerlink" title="(1)UI,CLI"></a>(1)UI,CLI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">统称API用于发送请求给Kubernetes（K8S）集群。</span><br><span class="line"></span><br><span class="line"><span class="comment">## K8S三大接口API二次开发，调用接口</span></span><br><span class="line">CRI：runtime，容器操作接口</span><br><span class="line">CNI：network，网络操作接口</span><br><span class="line">CSI：storage，存储操作接口</span><br></pre></td></tr></table></figure><h3 id="2-Kubernetes-Master"><a href="#2-Kubernetes-Master" class="headerlink" title="(2)Kubernetes Master"></a>(2)Kubernetes Master</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">用于处理客户端的发来的请求，根据需求调度后端节点运行任务,就是<span class="string">&#x27;老板&#x27;</span>存在。其内部核心组件分为：</span><br><span class="line">1.`API Server`(K8S内置组件) <span class="string">&#x27;秘书&#x27;</span></span><br><span class="line">      提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制;</span><br><span class="line">      提供API服务的组件，是一个独立的守护进程，是Kubernetes集群的唯一入口（无论是客户端还是内部组件都必须通过它来访</span><br><span class="line">      问);它提供基于https(RESTful风格)和rpc协议(grpc是据说是将来要取代Https的RESTful风格)来提供服务的。它用来处理</span><br><span class="line">      客户端传来的JSON格式的请求数据而非HTML格式哟。它也是K8S集群唯一能操作etcd的组件</span><br><span class="line">     </span><br><span class="line">  2.`Scheduler`（K8S内置组件）  <span class="string">&#x27;人事&#x27;</span></span><br><span class="line">      负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上;</span><br><span class="line">      比如客户端通过API Server提交了一个新增容器的请求，该请求保存在etcd中，etcd通过API Server通知Scheduler，</span><br><span class="line">      Scheduler接收到通知后会在管理的资源中选择一个最佳运行的节点去创建容器;该指令依旧存放在etcd中（Scheduler不能直</span><br><span class="line">      接访问etcd，而是通过API Server间接访问etcd）。</span><br><span class="line">      </span><br><span class="line">   3.`Controller manager`(K8S内置组件)</span><br><span class="line">       负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</span><br><span class="line">       该组件会watch Api Server组件用于管理K8S集群的组件，确保我们所创建的容器能够按照期望的状态运行的核心组件</span><br><span class="line">       (比如：监控集群的所有容器运行，当某个容器挂掉后它可以迅速在另一个节点启动)，我们甚至可以说</span><br><span class="line">       Controller manager是K8s的大脑。</span><br><span class="line">       </span><br><span class="line">    4.`etcd`(并不是K8S内置组件,由CoreOS研发,被RedHat收购，最终又被IBM公司收购)</span><br><span class="line">      etcd只能被API Server直接访问。是整个集群的核心，负责存储K8S请求数据所有的数据。保存了整个集群的状态；</span><br><span class="line">    etcd基于raft协议使用Golang语言开发的分布式强一致的键值对（key/value）数据库存储系统。存储方式和redis很像，</span><br><span class="line">    但是功能却比redis要强大，因为它支持数据的强一致性，也支持leader选举等各种分布式协同功能。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kube-apiserver(apiserver)：#所有Master上的组件工作都要经过apiserver</span><br><span class="line">etcd：                     <span class="comment">#存储所有命令、资源清单、webUI操作及其他组件数据</span></span><br><span class="line">kube-scheduler(scheduler)：#资源计算、资源调度</span><br><span class="line">kube-controller-manager(controller)：#维护集群状态</span><br><span class="line"></span><br><span class="line">`当某个Node意外宕机时，Controller Manager会及时发现并执行自动化修复流程，确保集群始终处于预期的工作状态`</span><br></pre></td></tr></table></figure><h3 id="3-Kubernetes-Node"><a href="#3-Kubernetes-Node" class="headerlink" title="(3)Kubernetes Node"></a>(3)Kubernetes Node</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">功能上有点类似于Hadoop中的DataNode节点,被Kubernetes调度的，即负责真正干活的节点（运行容器）。其内部核心组件分为：</span><br><span class="line">1.`kubelet`</span><br><span class="line">    负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理;</span><br><span class="line">    该组件也会watch Api Server组件，即实时查看关于当前节点的任务，从而去执行创建或删除容器的任务</span><br><span class="line">    (以Docker为例，创建容器时就会调用docker的API去Image Registry去下载相应的容器并启动)。</span><br><span class="line">2.`Container runtime `</span><br><span class="line">    负责镜像管理以及Pod和容器的真正运行（CRI）；</span><br><span class="line">3.`kube-proxy`   <span class="string">&#x27;监工&#x27;</span></span><br><span class="line">    负责为Service提供cluster内部的服务发现和负载均衡；</span><br><span class="line">    kube-proxy说白了也是API Server的客户端,它实时监视(watch)着API Server上的资源变动(尤其是service资源变动),</span><br><span class="line">    它会把每个service资源变动在相应节点上定义为对外暴露相关规则(iptable或者ipvs)，比如对外暴露外网映射之类的。</span><br><span class="line"></span><br><span class="line">4.Pod   <span class="string">&#x27;Pod是K8S的最小单位&#x27;</span></span><br><span class="line">虽然我们说Kubernetes是容器编排系统,但是不得不说在K8S之上并不会直接运行容器,每个容器在K8S中都被重新封装成pod,说</span><br><span class="line">白了pod就是容器的外壳,但需要注意的是一个pod是可以存在多个容器的。每个pod被K8S当作一个原子单元进行管理;一个pod中</span><br><span class="line">有多个容器，这个pod里面的所有容器只能被调度到一台节点去执行，不能将同一个pod里面的多个容器拆分到不同的Node运行;</span><br><span class="line"></span><br><span class="line">1、Pod是K8S的最小单位</span><br><span class="line">2、Pod的IP地址是随机的，删除Pod会改变IP</span><br><span class="line">3、Pod都有一个根容器（一个pod至少有一个根容器）</span><br><span class="line">4、一个Pod内可以由一个容器或多个容器组成</span><br><span class="line">5、一个Pod内的容器共享根容器的网络、名称空间、和文件系统卷</span><br><span class="line">6、一个Pod内的网络地址由根容器提供</span><br><span class="line"></span><br><span class="line">5.`Fluentd`</span><br><span class="line">    如Fluentd-elasticsearch提供集群日志采集、存储与查询</span><br><span class="line"></span><br><span class="line">6.`Image Registry`</span><br><span class="line">    存放镜像文件的仓库，并不直接被Kubernetes集群管理，即并不算k8s原生组成部分，通常我们会自建私有的镜像仓库，</span><br><span class="line">    比如使用Harbor部署https高可用的镜像仓库</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubelet：控制容器运行时（docker）启动指定的容器</span><br><span class="line">容器运行时（Container runtime）：docker</span><br><span class="line">  - containerd</span><br><span class="line">  - CRI-O</span><br><span class="line">  - Docker Engine</span><br><span class="line">  - Mirantis Container Runtime</span><br><span class="line">kube-proxy：POD端口映射，网络相关</span><br></pre></td></tr></table></figure><h3 id="POD运行状态"><a href="#POD运行状态" class="headerlink" title="POD运行状态"></a>POD运行状态</h3><div class="table-container"><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>Pending（等待）</td><td>Pod已经被K8S系统接受，但是有一个或多个容器，尚未创建，亦未运行。此阶段包括等待Pod被调度的时间和通过网络下载镜像的时间</td></tr><tr><td>Running（运行）</td><td>Pod已经绑定到某个节点(node)，Pod中所有容器都已被创建，至少有一个容器仍在运行，或者处于启动或重启状态</td></tr><tr><td>Succeeded（成功）</td><td>Pod中所有容器都已成功终止，并且不会再重启</td></tr><tr><td>Failed（失败）</td><td>Pod中所有容器都已成功终止，并且有一个容器是因为失败而终止</td></tr><tr><td>Unknown（未知）</td><td>因为某些原因无法获取Pod状态，这种情况，通常是因为与Pod所在主机通信失败</td></tr></tbody></table></div><h2 id="k8s网络"><a href="#k8s网络" class="headerlink" title="k8s网络"></a>k8s网络</h2><blockquote><p>Service也是K8S核心资源之一，Service定义了服务的入口地址，用来将后端的Pod服务暴露给外部的用户 访问。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubernetes的网络大致分为以下三类:</span><br><span class="line">  1.节点网络:</span><br><span class="line">      主要是指`Master`和各个`Node`之间进行通信的网络地址段。</span><br><span class="line">　2.pod网络:</span><br><span class="line">　　　　因为每个pod的<span class="string">&#x27;动态IP地址&#x27;</span>，所以每个pod并不知道想要访问的目的pod的IP地址，它们如果想要访问目的pod需要经过一</span><br><span class="line">　　　　个<span class="string">&#x27;service&#x27;</span>层。这个service有对每个pod的打了<span class="string">&#x27;标签&#x27;</span>，当任意一个节点的pod想要访问另外一个pod必须得过</span><br><span class="line">　　　　<span class="string">&#x27;service网络&#x27;</span>，service网络保存着<span class="string">&#x27;标签选择器&#x27;</span>，可以迅速匹配到pod想要范围另一个pod的真实IP地址，当pod拿到</span><br><span class="line">　　　　IP地址后就可以自行进行通信请求了。</span><br><span class="line">  3.service网络:</span><br><span class="line">　　　主要是为pod提供一个<span class="string">&#x27;标签选择器&#x27;</span>的功能，比如帮助一个pod去查询访问另外一个pod的label对应的真实IP地址。而</span><br><span class="line">　　　sevice网络在kubernetes1.11.x版本之前默认使用iptable实现的，在kubernetes 1.11.x版本之后引入了ipvs实现。</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;各个pod之间的通信过程概要&#x27;</span>:</span><br><span class="line">      每个pod都有被动态分配的IP地址，如果想要和另外一个pod进行通信，各个pod需要先和service网络进行通信，最终拿到</span><br><span class="line">      另一个想要访问pod的动态IP地址进行通信。</span><br></pre></td></tr></table></figure><h3 id="Service提供了两种网络资源"><a href="#Service提供了两种网络资源" class="headerlink" title="Service提供了两种网络资源"></a>Service提供了两种网络资源</h3><p><img src="https://cos.lukme.top/Pic/image-20240916151114679.png" alt="image-20240916151114679"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NodePort：宿主机端口映射ClusterIP端口对外提供服务</span><br><span class="line"></span><br><span class="line">ClusterIP：POD的负载均衡</span><br><span class="line">问题：POD的IP是随机的，如果一个POD宕机了，K8S会自动拉起一个新的POD，IP变化了如何加入到</span><br><span class="line">ClusterIP这个负载均衡集群中？</span><br><span class="line">解决方案：使用DNS解析POD的IP到一个<span class="string">&quot;字符串上&quot;</span>（标签）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DNS：</span><br><span class="line">- coreDNS</span><br><span class="line">- bind9</span><br><span class="line">- dnsmsq</span><br></pre></td></tr></table></figure><h2 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`Label标签`是K8S中非常重要的一个属性，Label标签就像身份证一样，可以用来识别K8S的对象。</span><br><span class="line">传统架构中，不同的服务应用之间通讯，都是通过IP和端口，但是在K8S中很多匹配关系都是通过标签来找。</span><br></pre></td></tr></table></figure><p><strong>Controller资源（控制器资源）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Controller用来管理Pod。</span></span><br><span class="line"><span class="comment">## Pod控制器的种类有很多：</span></span><br><span class="line">- RC Replication Controller 控制Pod有多个副本</span><br><span class="line">- RS ReplicaSet RC控制器的升级版，可以自动拉起宕机的POD</span><br><span class="line">- Deployment 推荐使用，功能强大，包含了RS控制器，对镜像做版本管理</span><br><span class="line">- DaemonSet 保证所有的Node节点上，有且只有一个Pod运行</span><br><span class="line">- StatefulSet 有状态的应用，为Pod提供唯一标识，它可以保证部署和scale的顺序</span><br></pre></td></tr></table></figure><h2 id="创建一个pod流程"><a href="#创建一个pod流程" class="headerlink" title="创建一个pod流程"></a>创建一个pod流程</h2><p><img src="https://cos.lukme.top/Pic/create-pod.png" alt="create-pod"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`第一步：`</span><br><span class="line">    用户通过kubectl等接口提交创建Pod的yaml文件，向Kubernetes系统发起资源请求</span><br><span class="line">`第二步：`</span><br><span class="line">    Api-server接收到用户请求之后，会做出相应的认证，然后检查信息并且将元数据信息存储到etcd中，创建Pod资源初始化，</span><br><span class="line">    这是第一次写etcd动作</span><br><span class="line">`第三步：`</span><br><span class="line">    Scheduler通过list-watch的监听机制，查看要创建Pod资源，APIServer会立即把创建Pod的消息通知Scheduler，</span><br><span class="line">    Scheduler发现Pod的属性中Dest Node为空时（Dest Node=””），便会立即触发调度流程进行调度,而调度流程分为</span><br><span class="line">    以下几个步骤，如下图</span><br></pre></td></tr></table></figure><blockquote><p>‌<strong>kube-controller-manager</strong>‌：虽然不直接参与Pod的创建，但其内部的控制器（如ReplicaSet Controller）负责确保Pod的数量与预期一致，维护集群状态</p></blockquote><p><img src="https://cos.lukme.top/Pic/scheduler.jpeg" alt="scheduler"></p><blockquote><p>​    首先是kube-scheduler调度器用一组规则过滤掉不满足条件的主机，这个过程称为predicate，比如明确指定所需要的资源类型，这样就可以过滤掉不满足条件的主机</p><p>​    其次，对第一步筛选出的符合要求的主机进行打分，这个过程称为 priority，在此阶段，如果在 predicate过程中没有合适的节点，Pod 会一直处于pending状态，不断重试调度，直到有节点满足条件。</p><p><strong>选择优先级最高的节点</strong>：选择得分最高的主机，进行binding操作，结果存储到Etcd中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第四步：</span><br><span class="line">    kubelet根据调度结果执行Pod创建操作，绑定成功后，会启动容器运行时，container, docker run, scheduler会调用API</span><br><span class="line">    Server的API在etcd中创建一个bound Pod对象，它描述在一个工作节点上绑定运行的所有pod信息；</span><br><span class="line">    运行在每个工作节点上的kubelet也会定期与api-server同步bound Pod的信息，一旦发现在该工作节点上运行的bound Pod对</span><br><span class="line">    象没有更新，则调用Docker API创建并启动pod内的容器.</span><br><span class="line">    </span><br><span class="line">第五步：</span><br><span class="line">  kube-proxy为新创建的pod注册动态DNS到CoreOS，然后给pod的service添加对应的iptables规则，用于服务发现和负载均衡。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文简单介绍容器以及k8s组件</summary>
    
    
    
    <category term="kubernetes" scheme="https://lukme.top/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://lukme.top/tags/kubernetes/"/>
    
  </entry>
  
</feed>
