<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风筝上的猫</title>
  
  
  <link href="https://lukme.top/atom.xml" rel="self"/>
  
  <link href="https://lukme.top/"/>
  <updated>2024-12-05T04:38:23.646Z</updated>
  <id>https://lukme.top/</id>
  
  <author>
    <name>Luay🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>11-Prometheus数据远端存储</title>
    <link href="https://lukme.top/posts/ee6702b0.html"/>
    <id>https://lukme.top/posts/ee6702b0.html</id>
    <published>2024-11-25T03:23:03.000Z</published>
    <updated>2024-12-05T04:38:23.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VicoriaMetrics概述">VicoriaMetrics概述</h2><p>VictoriaMetrics是一个快速、经济高效且可扩展的监控解决方案和时间序列数据库。</p><p>官网地址:<br><a href="https://victoriametrics.com/">https://victoriametrics.com/</a></p><p>官方文档:<br><a href="https://docs.victoriametrics.com/">https://docs.victoriametrics.com/</a></p><p>GitHub地址:<br><a href="https://github.com/VictoriaMetrics/VictoriaMetrics">https://github.com/VictoriaMetrics/VictoriaMetrics</a></p><p>部署文档:<br><a href="https://docs.victoriametrics.com/quick-start/">https://docs.victoriametrics.com/quick-start/</a></p><h2 id="部署victoriametrics">部署victoriametrics</h2><p><strong>1. 下载victoriametrics</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# wget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.93.16/victoria-metrics-linux-amd64-v1.93.16.tar.gz</span><br></pre></td></tr></table></figure><p>**2. 解压软件包 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# tar xf victoria-metrics-linux-amd64-v1.93.16.tar.gz  -C /usr/local/bin/</span><br></pre></td></tr></table></figure><p><strong>3 编写启动脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# <span class="built_in">cat</span> &gt; /etc/systemd/system/victoria-metrics.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Linux VictoriaMetrics Server</span></span><br><span class="line"><span class="string">Documentation=https://docs.victoriametrics.com/</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/bin/victoria-metrics-prod  \</span></span><br><span class="line"><span class="string">   -httpListenAddr=0.0.0.0:8428 \</span></span><br><span class="line"><span class="string">   -storageDataPath=/data/victoria-metrics \</span></span><br><span class="line"><span class="string">   -retentionPeriod=3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">[root@elk02 ~]# systemctl daemon-reload</span><br><span class="line">[root@elk02 ~]# systemctl <span class="built_in">enable</span> --now victoria-metrics.service</span><br><span class="line">[root@elk02 ~]# systemctl status victoria-metrics</span><br></pre></td></tr></table></figure><p><strong>4 检查端口是否存活</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# ss -ntl | grep 8428</span><br><span class="line">LISTEN 0      4096              0.0.0.0:8428       0.0.0.0:*        </span><br></pre></td></tr></table></figure><p><strong>5 查看webUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.212:8428/</span><br><span class="line">`此时点到WebUI时候搜索`<span class="string">&#x27;node_cpu_seconds_total&#x27;</span>  是没有任何数据的</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241128130653976.png" alt="image-20241128130653976"></p><h2 id="prometheus配置远端存储">prometheus配置远端存储</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line"><span class="comment"># 在顶级字段中配置VictoriaMetrics地址</span></span><br><span class="line">remote_write:</span><br><span class="line">  - url: http://10.0.0.212:8428/api/v1/write</span><br><span class="line">  </span><br><span class="line"><span class="comment">#因为之前配置的prometheus的启动脚本指定了数据存储目录，所以这里为了避免冲突，不使用systemd方式启动</span></span><br><span class="line"></span><br><span class="line">1.停止prometheus</span><br><span class="line">systemctl stop prometheus-server.service </span><br><span class="line"></span><br><span class="line">2.进入prometheus安装目录</span><br><span class="line">[root@elk02:2 ~]# <span class="built_in">cd</span> /softwares/prometheus-2.53.2.linux-amd64/</span><br><span class="line"></span><br><span class="line">3.启动prometheus，指定修改过的配置文件（如果配置没有错误，就会去连接http://10.0.0.212:8428）</span><br><span class="line">./prometheus --config.file=<span class="string">&quot;prometheus.yml&quot;</span>  </span><br><span class="line"></span><br><span class="line">4.查看WebUI</span><br><span class="line">http://10.0.0.212:8428/</span><br><span class="line">`此时点到WebUI时候搜索`<span class="string">&#x27;node_cpu_seconds_total&#x27;</span> 发现数据过来了</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241128133415223.png" alt="image-20241128133415223"></p><blockquote><p>温馨提示：</p><p>​    如果此时没有数据接入，就不要进行下面步骤了，不然就一直是错的，出数据就行</p></blockquote><p><strong>4.配置grafana的数据源及URL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择数据源还是prometheus，名字区分下，地址更换下就行了</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241128134037207.png" alt="image-20241128134037207"></p><h2 id="部署参考连接">部署参考连接</h2><p>单点部署参考链接:<br><a href="https://docs.victoriametrics.com/quick-start/#starting-vm-single-from-a-binary">https://docs.victoriametrics.com/quick-start/#starting-vm-single-from-a-binary</a></p><p>集群部署参考链接:<br><a href="https://docs.victoriametrics.com/quick-start/#starting-vm-cluster-from-binaries">https://docs.victoriametrics.com/quick-start/#starting-vm-cluster-from-binaries</a><br><a href="https://docs.victoriametrics.com/cluster-victoriametrics/#architecture-overview">https://docs.victoriametrics.com/cluster-victoriametrics/#architecture-overview</a></p><p>部署集群时软件包要下载对应的集群cluster版本:<br>wget <a href="https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.93.16/victoria-metrics-linux-amd64-v1.93.16-cluster.tar.gz">https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.93.16/victoria-metrics-linux-amd64-v1.93.16-cluster.tar.gz</a></p><p>软件包会提供3个程序，该程序对应了集群的3个组件<br>vmstorage:<br>存储原始数据，并返回给定标签过滤器在给定时间范围内的查询数据<br>vminsert:<br>接受摄入的数据，并根据对度量名称及其所有标签的一致散列在vmstorage节点之间传播<br>vmselect:<br>通过从所有配置的vmstorage节点获取所需数据来执行传入查询</p><p><strong>集群部署VictoriaMetrics架构</strong></p><p><img src="https://cos.lukme.top/Pic/VictoriaMetrics-cluster.png" alt="VictoriaMetrics集群架构图解"></p>]]></content>
    
    
    <summary type="html">了解使用 VicoriaMetrics</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>10-Prometheus的联邦模式</title>
    <link href="https://lukme.top/posts/d10c7e6f.html"/>
    <id>https://lukme.top/posts/d10c7e6f.html</id>
    <published>2024-11-24T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="联邦模式配置">联邦模式配置</h2><p><strong>1.prometheus联邦模式架构概述</strong><br>默认情况下，prometheus采集的数据会存储到本地，这意味者prometheus在这种工作模式下，可能会存在单机存储的瓶颈。为了解决prometheus对于数据的采集压力，我们可以采用联邦模式来部署prometheus。</p><blockquote><p>这里 91,92,93 节点分别对应本篇的 211,212,213 节点</p></blockquote><p><img src="https://cos.lukme.top/Pic/prometheus-federate.jpg" alt="联邦模式Prometheus server"></p><p><strong>2.部署Prometheus的集群环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">1. 212,213节点部署Prometheus</span><br><span class="line">  略，步骤见01-Prometheus介绍及部署</span><br><span class="line"></span><br><span class="line">`212节点`</span><br><span class="line">2. 212节点配置Prometheus</span><br><span class="line">[root@elk02:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">  - job_name: <span class="string">&#x27;file-sd-discovery-212&#x27;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - /softwares/prometheus-2.53.2.linux-amd64/file-sd.yaml</span><br><span class="line"></span><br><span class="line">3. 编写Prometheus的基于文件服务的发现</span><br><span class="line">[root@elk02:0 ~]# <span class="built_in">cat</span> &gt; /softwares/prometheus-2.53.2.linux-amd64/file-sd.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">- targets:</span></span><br><span class="line"><span class="string">  - 10.0.0.211:9100</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    &quot;tag&quot;: &quot;elk01&quot;</span></span><br><span class="line"><span class="string">    &quot;apps&quot;: &quot;yaml&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">4. 检查Prometheus语法</span><br><span class="line">[root@elk02:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">5.Prometheus热加载</span><br><span class="line">[root@elk02:0 ~]# curl -X POST http://10.0.0.212:9090/-/reload</span><br><span class="line"></span><br><span class="line">6.访问Prometheus的WebUI</span><br><span class="line">http://10.0.0.212:9090/targets?search=</span><br><span class="line"></span><br><span class="line">`213节点`</span><br><span class="line">1. 213 节点配置Prometheus</span><br><span class="line">[root@elk03:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">  - job_name: <span class="string">&#x27;file-sd-discovery-212&#x27;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - /softwares/prometheus-2.53.2.linux-amd64/file-sd.yaml</span><br><span class="line"></span><br><span class="line">2.编写Prometheus的基于文件服务的发现</span><br><span class="line">[root@elk03:0 ~]# <span class="built_in">cat</span> &gt; /softwares/prometheus-2.53.2.linux-amd64/file-sd.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">- targets:</span></span><br><span class="line"><span class="string">  - 10.0.0.212:9100</span></span><br><span class="line"><span class="string">  - 10.0.0.213:9100</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    &quot;tag&quot;: &quot;elk02/03&quot;</span></span><br><span class="line"><span class="string">    &quot;apps&quot;: &quot;yaml&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">3. 检查Prometheus语法</span><br><span class="line">[root@elk03:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">4.Prometheus热加载</span><br><span class="line">[root@elk03:0 ~]# curl -X POST http://10.0.0.213:9090/-/reload</span><br><span class="line"></span><br><span class="line">5.访问Prometheus的WebUI</span><br><span class="line">http://10.0.0.213:9090/targets?search=</span><br></pre></td></tr></table></figure><p><strong>3.修改211节点配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1.修改Prometheus配置文件</span><br><span class="line">[root@elk01:0 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">  - job_name: <span class="string">&quot;prometheus-federate-212&quot;</span></span><br><span class="line">    metrics_path: <span class="string">&quot;/federate&quot;</span></span><br><span class="line">    honor_labels: <span class="literal">true</span></span><br><span class="line">    params:</span><br><span class="line">       <span class="string">&quot;match[]&quot;</span>:</span><br><span class="line">       - <span class="string">&#x27;&#123;job=&quot;promethues&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">        - <span class="string">&quot;10.0.0.212:9090&quot;</span></span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&quot;prometheus-federate-213&quot;</span></span><br><span class="line">    metrics_path: <span class="string">&quot;/federate&quot;</span></span><br><span class="line">    honor_labels: <span class="literal">true</span></span><br><span class="line">    params:</span><br><span class="line">       <span class="string">&quot;match[]&quot;</span>:</span><br><span class="line">       - <span class="string">&#x27;&#123;job=&quot;promethues&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">        - <span class="string">&quot;10.0.0.213:9090&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.检查Prometheus语法</span><br><span class="line">3.Prometheus热加载</span><br></pre></td></tr></table></figure><p><strong>4.验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">213上可查询的语法（可自行访问212或者213的Prometheus的WebUI界面找到promQL语法查询放在211节点上验证）</span><br><span class="line">node_cpu_seconds_total&#123;apps=<span class="string">&quot;yaml&quot;</span>, cpu=<span class="string">&quot;0&quot;</span>, job=<span class="string">&quot;file-sd-discovery-213&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">在211上查询是否有结果</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241128112719771.png" alt="image-20241128112719771"></p>]]></content>
    
    
    <summary type="html">使用Prometheus联邦模式缓解数据采集压力</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>09-Prometheus的服务发现</title>
    <link href="https://lukme.top/posts/86e5bc5f.html"/>
    <id>https://lukme.top/posts/86e5bc5f.html</id>
    <published>2024-11-23T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务发现的常见类别说明">服务发现的常见类别说明</h2><pre><code>- 静态配置： static_configs每次修改配置后，都需要重新加载配置或者重启服务。- 动态配置每次修改后，无需重新加载配置或者重启服务。常见的动态配置:&lt;file_sd_config&gt;基于文件的服务发现。https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#file_sd_config&lt;consul_sd_config&gt;基于consul的服务发现。https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#consul_sd_config&lt;kubernetes_sd_config&gt;基于K8S实现的服务发现https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#kubernetes_sd_config&lt;dns_sd_config&gt;:基于DNS实现服务发现。https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#dns_sd_config&lt;docker_sd_config&gt;：基于docker engine的服务发现https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#docker_sd_config&lt;http_sd_config&gt;：基于http的服务发现。https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#http_sd_config</code></pre><h2 id="基于文件的服务发现">基于文件的服务发现</h2><p><strong>1.修改Prometheus的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">...</span><br><span class="line">  - job_name: <span class="string">&quot;linux-file-sd-config&quot;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">     - files:</span><br><span class="line">        -  /softwares/prometheus-2.53.2.linux-amd64/test.yaml</span><br><span class="line">        -  /softwares/prometheus-2.53.2.linux-amd64/test.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line">此时访问Prometheus的webui，发现没有显示新的服务</span><br><span class="line">http://10.0.0.211:9090/targets</span><br></pre></td></tr></table></figure><p><strong>2.编辑服务发现文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">`yaml格式：`</span><br><span class="line">[root@elk01:5 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/test.yaml</span><br><span class="line">- targets:</span><br><span class="line">    - 10.0.0.213:9100</span><br><span class="line">    - 10.0.0.211:9100</span><br><span class="line">    - 10.0.0.212:3000</span><br><span class="line">    </span><br><span class="line">`json格式`</span><br><span class="line">[root@elk01:5 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/test.json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;targets&quot;</span>: [ <span class="string">&quot;10.0.0.211:9100&quot;</span>,<span class="string">&quot;10.0.0.212:9100&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>3.测试验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件保存后直接访问webUI，即可发现就可以显示了，不需要热加载Prometheus</span><br><span class="line">http://10.0.0.211:9090/targets</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127135024922.png" alt="image-20241127135024922"></p><h2 id="基于文件发现和基于consul对比">基于文件发现和基于consul对比</h2><p>基于文件的服务发现是在Prometheus本地基于某个文件读取要监控的节点;</p><p>基于consul服务发现是需要单独部署一套consul集群，Prometheus-server去对应的consul集群获取需要监控的节点。</p><h2 id="部署基于console的服务发现">部署基于console的服务发现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1 下载consul</span><br><span class="line">wget https://releases.hashicorp.com/consul/1.19.2/consul_1.19.2_linux_amd64.zip</span><br><span class="line"></span><br><span class="line">2 解压consul</span><br><span class="line">unzip consul_1.19.2_linux_amd64.zip -d /usr/local/bin/</span><br><span class="line"></span><br><span class="line">3 运行consul 集群</span><br><span class="line">服务端211:</span><br><span class="line">consul agent -server -bootstrap -<span class="built_in">bind</span>=10.0.0.211 -data-dir=/data/consul -client=10.0.0.211 -ui</span><br><span class="line"></span><br><span class="line">客户端212:</span><br><span class="line">consul agent  -<span class="built_in">bind</span>=10.0.0.212 -data-dir=/data/consul -client=10.0.0.212 -ui -retry-join=10.0.0.211</span><br><span class="line"></span><br><span class="line">客户端213:</span><br><span class="line">consul agent -server -<span class="built_in">bind</span>=10.0.0.213 -data-dir=/data/consul -client=10.0.0.213 -ui -retry-join=10.0.0.211</span><br><span class="line"></span><br><span class="line">4 查看各节点的监听端口</span><br><span class="line">ss -ntl | grep 8500</span><br><span class="line"></span><br><span class="line">5 访问console服务的WebUI</span><br><span class="line">http://10.0.0.213:8500/ui/dc1/nodes</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127144212517.png" alt="image-20241127144212517"></p><h2 id="基于consul的服务发现应用">基于consul的服务发现应用</h2><p><strong>1 修改prometheus的配置文件并重新加载配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">  ...</span><br><span class="line">  - job_name: <span class="string">&quot;Linux-consul-seriver-discovery&quot;</span></span><br><span class="line">    <span class="comment"># 配置基于consul的服务发现</span></span><br><span class="line">    consul_sd_configs:</span><br><span class="line">        <span class="comment"># 指定consul的服务器地址，若不指定，则默认值为&quot;localhost:8500&quot;.</span></span><br><span class="line">      - server: 10.0.0.213:8500</span><br><span class="line">      - server: 10.0.0.212:8500</span><br><span class="line">      - server: 10.0.0.211:8500</span><br><span class="line">    relabel_configs:</span><br><span class="line">        <span class="comment"># 匹配consul的源标签字段，表示服务名称</span></span><br><span class="line">      - source_labels: [__meta_consul_service]</span><br><span class="line">        <span class="comment"># 指定源标签的正则表达式，若不定义，默认值为&quot;(.*)&quot;</span></span><br><span class="line">        regex: consul</span><br><span class="line">        <span class="comment"># 执行动作为删除，默认值为&quot;replace&quot;,有效值有多种</span></span><br><span class="line">        <span class="comment">#   https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_action</span></span><br><span class="line">        action: drop</span><br><span class="line">        </span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br></pre></td></tr></table></figure><p><strong>2.被监控节点注册到console集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# curl -X PUT -d <span class="string">&#x27;&#123;&quot;id&quot;:&quot;elk211&quot;,&quot;name&quot;:&quot;elk01&quot;,&quot;address&quot;:&quot;10.0.0.211&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.211:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.213:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line">[root@elk02 ~]# curl -X PUT -d <span class="string">&#x27;&#123;&quot;id&quot;:&quot;elk212&quot;,&quot;name&quot;:&quot;elk212&quot;,&quot;address&quot;:&quot;10.0.0.212&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.212:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.213:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line">[root@elk03 ~]# curl -X PUT -d <span class="string">&#x27;&#123;&quot;id&quot;:&quot;elk213&quot;,&quot;name&quot;:&quot;elk213&quot;,&quot;address&quot;:&quot;10.0.0.213&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.213:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.213:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`详解`</span><br><span class="line"><span class="string">&quot;id&quot;</span>:<span class="string">&quot;elk211&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;elk01&quot;</span>,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;10.0.0.211&quot;</span>,<span class="string">&quot;port&quot;</span>:9100 监控211节点，地址和端口</span><br><span class="line">checks<span class="string">&quot;: [&#123;&quot;</span>http<span class="string">&quot;:&quot;</span>http://10.0.0.211:9100<span class="string">&quot;,&quot;</span>interval<span class="string">&quot;:&quot;</span>5m<span class="string">&quot;&#125;]&#125;&#x27;  检查节点，和间隔时间</span></span><br><span class="line"><span class="string">http://10.0.0.213:8500/v1/agent/service/register                注册到console集群（写211,212,213都可以）</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>3.检查consul的WebUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.212:8500/ui/dc1/services</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127153448968.png" alt="image-20241127153448968"></p><p><strong>4 检查Prometheus的WebUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.211:9090/targets?search=</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127153520806.png" alt="image-20241127153520806"></p><p><strong>5.注销节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://10.0.0.213:8500/v1/agent/service/deregister/elk213</span><br><span class="line"></span><br><span class="line">elk213  `这里写的是<span class="built_in">id</span>，而不是name`</span><br></pre></td></tr></table></figure><p>注意，也可以使用POSTMAN直接进行如下操作，需要使用PUT方法。<br>PUT <a href="http://10.0.0.213:8500/v1/agent/service/deregister/elk213">http://10.0.0.213:8500/v1/agent/service/deregister/elk213</a></p><h2 id="Prometheus监控console集群">Prometheus监控console集群</h2><p>Prometheus监控consul集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.下载consul exporter</span><br><span class="line">[root@elk02:5 ~]# wget https://github.com/prometheus/consul_exporter/releases/download/v0.12.1/consul_exporter-0.12.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压软件包 </span><br><span class="line">[root@elk02:5 ~]# tar xf consul_exporter-0.12.1.linux-amd64.tar.gz  -C /usr/local/bin/ consul_exporter-0.12.1.linux-amd64/consul_exporter --strip-components=1</span><br><span class="line"></span><br><span class="line">3.启动console exporter </span><br><span class="line">[root@elk02:5 ~]# consul_exporter --consul.server=<span class="string">&quot;http://10.0.0.213:8500&quot;</span> --web.telemetry-path=<span class="string">&quot;/metrics&quot;</span> --web.listen-address=:9107 </span><br><span class="line"></span><br><span class="line">4.访问consul exporter的WebUI</span><br><span class="line">http://10.0.0.212:9107/metrics</span><br><span class="line"></span><br><span class="line">5.向consul注册(或者修改Prometheus配置文件，静态发现需要热加载Prometheus)</span><br><span class="line">[root@elk02:5 ~]# curl -X PUT -d <span class="string">&#x27;&#123;&quot;id&quot;:&quot;elk212-consul&quot;,&quot;name&quot;:&quot;consul-cluster&quot;,&quot;address&quot;:&quot;10.0.0.212&quot;,&quot;port&quot;:9107,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.212:9107&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.213:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line">6.访问consul的WebUI</span><br><span class="line">http://10.0.0.212:8500/ui/dc1/services/consul-cluster/instances</span><br><span class="line"></span><br><span class="line">7.访问prometheus的WebUI</span><br><span class="line">http://10.0.0.211:9090/targets</span><br><span class="line"></span><br><span class="line">8.grafana导入模板ID </span><br><span class="line">12049</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Prometheus的服务发现，让你不再需要热加载或者重启Prometheus</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>08-部署pushgetway和altermanager</title>
    <link href="https://lukme.top/posts/2cdee406.html"/>
    <id>https://lukme.top/posts/2cdee406.html</id>
    <published>2024-11-22T03:23:03.000Z</published>
    <updated>2024-12-05T04:36:34.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署pushgatway">部署pushgatway</h2><p>Prometheus自定义监控组件pushgateway<br>1.下载pushgateway</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]# wget https://github.com/prometheus/pushgateway/releases/download/v1.9.0/pushgateway-1.9.0.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>2.解压软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]# tar xf pushgateway-1.9.0.linux-amd64.tar.gz -C /softwares/</span><br></pre></td></tr></table></figure><p>3.运行pushgateway组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]# <span class="built_in">cd</span> /softwares/pushgateway-1.9.0.linux-amd64/</span><br><span class="line">[root@elk02:0 ~]# ./pushgateway --web.listen-address=:9091 --web.telemetry-path=<span class="string">&quot;/metrics&quot;</span> </span><br></pre></td></tr></table></figure><p>4.访问pushgetway组件的WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.212:9091</span><br></pre></td></tr></table></figure><p>5.推送测试数据到pushgateway组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk211 ~]# <span class="built_in">echo</span> <span class="string">&quot;student_online 75&quot;</span> | curl --data-binary @-  http://10.0.0.212:9091/metrics/job/student/instance/10.0.0.211</span><br></pre></td></tr></table></figure><p>6.再次访问pushgetway组件的WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.92:9091/#</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241124112052347.png" alt="image-20241124112052347"></p><p>7.修改Prometheus的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">...</span><br><span class="line">    - job_name: <span class="string">&quot;pushgateway&quot;</span></span><br><span class="line">      <span class="comment"># 用于解决标签的冲突问题，有效值为: true和false，默认值为false</span></span><br><span class="line">      <span class="comment"># 当设置为true时，将保留抓取的标签以忽略服务器自身的标签。说白了会覆盖原有标签。</span></span><br><span class="line">      <span class="comment"># 当设置为false时，则不会覆盖原有标签，而是在标点前加了一个&quot;exported_&quot;前缀。</span></span><br><span class="line">      honor_labels: <span class="literal">true</span></span><br><span class="line">      static_configs:</span><br><span class="line">        - targets: </span><br><span class="line">          - <span class="string">&quot;10.0.0.212:9091&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器访问</span></span><br><span class="line">http://10.0.0.211:9090/targets?search=</span><br></pre></td></tr></table></figure><h2 id="Alertmanager环境部署">Alertmanager环境部署</h2><p><strong>1.altermanager概述</strong><br>用于prometheus server的告警功能的组件，目前支持多种告警媒介，包括但不限于邮件告警，钉钉告警，企业微信告警等。</p><p><strong>2.部署alermanager组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.下载软件包</span><br><span class="line">[root@elk02:1 ~]# wget https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2. 解压软件包</span><br><span class="line">[root@elk02:1 ~]# tar xf alertmanager-0.27.0.linux-amd64.tar.gz  -C /softwares/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.修改alermanager的配置文件</span><br><span class="line">[root@elk02:1 ~]# vim /softwares/alertmanager-0.27.0.linux-amd64/alertmanager.yml </span><br><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  smtp_from: <span class="string">&#x27;1968554226@qq.com&#x27;</span></span><br><span class="line">  smtp_smarthost: <span class="string">&#x27;smtp.qq.com:465&#x27;</span></span><br><span class="line">  smtp_auth_username: <span class="string">&#x27;1968554226@qq.com&#x27;</span></span><br><span class="line">  smtp_auth_password: <span class="string">&#x27;xwghtaasufprewcb&#x27;</span></span><br><span class="line">  smtp_require_tls: <span class="literal">false</span></span><br><span class="line">  smtp_hello: <span class="string">&#x27;qq.com&#x27;</span></span><br><span class="line">route:</span><br><span class="line">  group_by: [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">  group_wait: 5s</span><br><span class="line">  group_interval: 5s</span><br><span class="line">  repeat_interval: 30s</span><br><span class="line">  receiver: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">  email_configs:</span><br><span class="line">  - to: <span class="string">&#x27;3078155561@qq.com&#x27;</span></span><br><span class="line">    send_resolved: <span class="literal">true</span></span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: <span class="string">&#x27;critical&#x27;</span></span><br><span class="line">    target_match:</span><br><span class="line">      severity: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    equal: [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.启动alermanager</span><br><span class="line">[root@elk02:1 ~]# <span class="built_in">cd</span> /softwares/alertmanager-0.27.0.linux-amd64/</span><br><span class="line">[root@elk02:1 alertmanager-0.27.0.linux-amd64]# ./alertmanager </span><br><span class="line"></span><br><span class="line">5.访问webui</span><br><span class="line">http://10.0.0.212:9093/#/status</span><br></pre></td></tr></table></figure><p><strong>3.修改Prometheus配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets:</span><br><span class="line">          - 10.0.0.212:9093</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line">rule_files:</span><br><span class="line">  - <span class="string">&quot;/softwares/prometheus-2.53.2.linux-amd64/status-rules.yaml&quot;</span></span><br></pre></td></tr></table></figure><p><strong>4.修改告警规则</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /softwares/prometheus-2.53.2.linux-amd64/status-rules.yaml &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">groups:</span></span><br><span class="line"><span class="string">- name: service_status</span></span><br><span class="line"><span class="string">  rules:</span></span><br><span class="line"><span class="string">  - alert: 10.0.0.213:9100节点挂掉啦</span></span><br><span class="line"><span class="string">    expr: up&#123;instance=&quot;10.0.0.213:9100&quot;&#125; == 0</span></span><br><span class="line"><span class="string">    for: 15s</span></span><br><span class="line"><span class="string">    labels:</span></span><br><span class="line"><span class="string">      service: node_exporter</span></span><br><span class="line"><span class="string">      porter: 9100</span></span><br><span class="line"><span class="string">    annotations:</span></span><br><span class="line"><span class="string">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 已停止运行超过 15s！&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>5.重新加载Prometheus配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127094655913.png" alt="image-20241127094655913"></p><p>6.验证告警</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">停止elk3的node_exporter服务</span><br><span class="line">[root@elk03:0 ~]# systemctl stop node-exporter.service </span><br><span class="line"></span><br><span class="line">问题未修复没间隔30s发一次邮件（自己可设置）</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127095054688.png" alt="image-20241127095054688"></p><p>告警邮件</p><p><img src="https://cos.lukme.top/Pic/image-20241127095509855.png" alt="image-20241127095509855"></p><h2 id="修改告警模板">修改告警模板</h2><p><strong>1. 告警模板介绍</strong><br>默认的告警信息界面有些简单，可以借助告警的模板信息，对告警信息进行丰富，需要借助于Alertmanager的模板功能来实现。</p><p>告警模板的使用流程如下:<br>- 分析关键信息<br>- 定制模板内容<br>- Alertmanager加载模板文件<br>- 告警信息使用模板内容属性</p><p>模板文件使用标准Go模板语法，并暴露一些包含时间标签和值的变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标签引用: &#123;&#123; <span class="variable">$label</span>.&lt;label_name&gt; &#125;&#125;</span><br><span class="line">指标样本值引用: &#123;&#123; <span class="variable">$value</span> &#125;&#125;</span><br></pre></td></tr></table></figure><p>为了显式效果，需要了解一些html相关技术，参考链接:<br><a href="https://www.w3school.com.cn/html/index.asp">https://www.w3school.com.cn/html/index.asp</a></p><p><strong>2.自定义模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">创建一个模板目录</span><br><span class="line">[root@elk02:0 ~]# <span class="built_in">mkdir</span> /softwares/alertmanager-0.27.0.linux-amd64/tmpl</span><br><span class="line">[root@elk02:0 tmpl]# <span class="built_in">cat</span> email.tmpl</span><br><span class="line">&#123;&#123; define <span class="string">&quot;alert.html&quot;</span> &#125;&#125;</span><br><span class="line">&lt;h1 style=<span class="string">&#x27;color: red;&#x27;</span>&gt;服务异常告警&lt;/h1&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">                &lt;th&gt;报警项&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;实例&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;报警阀值&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;开始时间&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &#123;&#123; range <span class="variable">$i</span>, <span class="variable">$alert</span> := .Alerts &#125;&#125;</span><br><span class="line">                &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; index <span class="variable">$alert</span>.Labels <span class="string">&quot;alertname&quot;</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; index <span class="variable">$alert</span>.Labels <span class="string">&quot;instance&quot;</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; index <span class="variable">$alert</span>.Annotations <span class="string">&quot;value&quot;</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; <span class="variable">$alert</span>.StartsAt &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">        &#123;&#123; end &#125;&#125;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>3.alertmanager引用自定义模板文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 temp]# vim /softwares/alertmanager-0.27.0.linux-amd64/alertmanager.yml </span><br><span class="line"><span class="comment">#加载模板</span></span><br><span class="line">templates:</span><br><span class="line">  - <span class="string">&#x27;./tmpl/*.tmpl&#x27;</span></span><br><span class="line">···</span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">  email_configs:</span><br><span class="line">  - to: <span class="string">&#x27;3078155561@qq.com&#x27;</span></span><br><span class="line">    send_resolved: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 添加此行，定制邮件的标题，对于&quot;&#123;&#123;&#125;&#125;&quot;属性用于加载其他信息，需要使用单引号括住。</span></span><br><span class="line">    headers: &#123; Subject: <span class="string">&quot;[WARN] 报警邮件&quot;</span> &#125;</span><br><span class="line">    <span class="comment"># 添加此行，调用模板显式邮件正文，对于&quot;&#123;&#125;&quot;不需要使用单引号，否则服务启动不成功。</span></span><br><span class="line">    html: <span class="string">&#x27;&#123;&#123; template &quot;alert.html&quot; . &#125;&#125;&#x27;</span></span><br><span class="line">      <span class="comment">#alter.html是模板里定义的的define，.代表的是加载</span></span><br></pre></td></tr></table></figure><p><strong>4.altermanager语法检查</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 alertmanager-0.27.0.linux-amd64]# <span class="built_in">pwd</span></span><br><span class="line">/softwares/alertmanager-0.27.0.linux-amd64</span><br><span class="line">[root@elk02:0 alertmanager-0.27.0.linux-amd64]# ./amtool check-config ./alertmanager.yml </span><br><span class="line">Checking <span class="string">&#x27;./alertmanager.yml&#x27;</span>  SUCCESS</span><br><span class="line">Found:</span><br><span class="line"> - global config</span><br><span class="line"> - route</span><br><span class="line"> - 1 inhibit rules</span><br><span class="line"> - 1 receivers</span><br><span class="line"> - 1 templates</span><br><span class="line">  SUCCESS</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#altermanager自带的语法检查</span></span><br></pre></td></tr></table></figure><p><strong>5.重新启动altermanager</strong></p><p>上面我们定制邮件内容中包含阈值的部分，而我们在规则中并没有指定，所以prometheus需要修改以下规则文件。</p><p><strong>6.修改规则文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/status-rules.yaml </span><br><span class="line">···</span><br><span class="line">    annotations:</span><br><span class="line">      summary: <span class="string">&quot;&#123;&#123; .instance &#125;&#125; 已停止运行超过 15s！&quot;</span></span><br><span class="line">      value: <span class="string">&quot;&#123;&#123; <span class="variable">$value</span> &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>7.检查Prometheus配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br><span class="line">[root@elk01:0 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br></pre></td></tr></table></figure><p><strong>访问prometheus的WebUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.91:9090/rules</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241127104621570.png" alt="image-20241127104621570"></p><p><strong>8.验证测试</strong></p><p>停掉exporter服务</p><p><img src="https://cos.lukme.top/Pic/image-20241127110010277.png" alt="image-20241127110010277"></p><p>依据模板可以将告警和恢复模板分开，使用不同模板通知</p><p>推荐阅读:<br><a href="https://prometheus.io/docs/alerting/latest/configuration/">https://prometheus.io/docs/alerting/latest/configuration/</a></p>]]></content>
    
    
    <summary type="html">部署监控组建pushgetway和告警组件altermanager</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>07-监控nginx和tomcat</title>
    <link href="https://lukme.top/posts/750619ba.html"/>
    <id>https://lukme.top/posts/750619ba.html</id>
    <published>2024-11-21T03:23:03.000Z</published>
    <updated>2024-12-05T04:40:27.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prometheus监控nginx">Prometheus监控nginx</h2><h3 id="1-编译安装nginx">1 编译安装nginx</h3><p>1.1 安装编译工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS：</span><br><span class="line">yum -y install git wget gcc make zlib-devel gcc-c++ libtool openssl openssl-devel</span><br><span class="line"></span><br><span class="line">Ubuntu：</span><br><span class="line">[root@elk93 ~]# apt -y install git wget gcc make zlib1g-dev build-essential libtool openssl libssl-dev</span><br></pre></td></tr></table></figure><p>1.2 克隆nginx-module-vts模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/vozlt/nginx-module-vts.git</span><br><span class="line"></span><br><span class="line">如果上述连接不好用，可以执行下面代码:</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/jasonyin2020/nginx-module-vts.git</span><br></pre></td></tr></table></figure><p>1.3 下载nginx软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 ~]# wget https://nginx.org/download/nginx-1.26.2.tar.gz</span><br></pre></td></tr></table></figure><p>1.4 解压nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 ~]# tar xf nginx-1.26.2.tar.gz </span><br><span class="line"></span><br><span class="line">[root@elk93 ~]# ll nginx-1.26.2</span><br><span class="line">total 860</span><br><span class="line">drwxr-xr-x  8  502 staff   4096 Aug 13 00:39 ./</span><br><span class="line">drwx------ 10 root root    4096 Sep  5 14:35 ../</span><br><span class="line">drwxr-xr-x  6  502 staff   4096 Sep  5 14:35 auto/</span><br><span class="line">-rw-r--r--  1  502 staff 327851 Aug 13 00:39 CHANGES</span><br><span class="line">-rw-r--r--  1  502 staff 501527 Aug 13 00:39 CHANGES.ru</span><br><span class="line">drwxr-xr-x  2  502 staff   4096 Sep  5 14:35 conf/</span><br><span class="line">-rwxr-xr-x  1  502 staff   2611 Aug 12 22:28 configure*</span><br><span class="line">drwxr-xr-x  4  502 staff   4096 Sep  5 14:35 contrib/</span><br><span class="line">drwxr-xr-x  2  502 staff   4096 Sep  5 14:35 html/</span><br><span class="line">-rw-r--r--  1  502 staff   1397 Aug 12 22:28 LICENSE</span><br><span class="line">drwxr-xr-x  2  502 staff   4096 Sep  5 14:35 man/</span><br><span class="line">-rw-r--r--  1  502 staff     49 Aug 12 22:28 README</span><br><span class="line">drwxr-xr-x  9  502 staff   4096 Aug 13 00:39 src/</span><br></pre></td></tr></table></figure><p>1.5 配置nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Centos：</span><br><span class="line"><span class="built_in">cd</span> nginx-1.22.1</span><br><span class="line">./configure --prefix=/softwares/nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--without-http_gzip_module \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--add-module=/root/nginx-module-vts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ubuntu:</span><br><span class="line">[root@elk93 ~]# <span class="built_in">cd</span> nginx-1.26.2/</span><br><span class="line">[root@elk93 nginx-1.26.2]# </span><br><span class="line">[root@elk93 nginx-1.26.2]# ./configure --prefix=/softwares/nginx --with-http_ssl_module --with-http_v2_module --with-http_realip_module --without-http_rewrite_module --with-http_stub_status_module --without-http_gzip_module  --with-file-aio --with-stream --with-stream_ssl_module --with-stream_realip_module --add-module=/root/nginx-module-vts</span><br></pre></td></tr></table></figure><p>1.6 编译并安装nginx</p><pre><code>[root@elk93 nginx-1.26.2]# make -j 2 &amp;&amp; make install</code></pre><p>1.7 修改nginx的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 nginx-1.26.2]# vim /softwares/nginx/conf/nginx.conf</span><br><span class="line">...</span><br><span class="line">http &#123;</span><br><span class="line">    vhost_traffic_status_zone;</span><br><span class="line">    upstream linux-promethues &#123;</span><br><span class="line">       server 10.0.0.31:9090;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            <span class="comment"># index  index.html index.htm;</span></span><br><span class="line">            proxy_pass http://linux-promethues;</span><br><span class="line">        &#125;</span><br><span class="line">    location /status &#123;</span><br><span class="line">        vhost_traffic_status_display;</span><br><span class="line">        vhost_traffic_status_display_format html;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.8 检查配置文件语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 nginx-1.26.2]# /softwares/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /softwares/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /softwares/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><p>1.9 启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 nginx-1.26.2]# /softwares/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>1.10 访问nginx的状态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.93/status/format/prometheus</span><br></pre></td></tr></table></figure><h3 id="2-安装nginx-vtx-exporter">2 安装nginx-vtx-exporter</h3><p>2.1 下载nginx-vtx-exporter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CentOS：</span><br><span class="line">wget https://github.com/hnlq715/nginx-vts-exporter/releases/download/v0.10.3/nginx-vts-exporter-0.10.3.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">温馨提示:</span><br><span class="line">不建议下载更高版本，因为其会提升对GLIC的版本要求，可以通过<span class="string">&quot; strings /lib64/libc.so.6 | grep GLIBC_ &quot;</span>查看默认是2.17版本，若使用较高版本则需要2.32+</span><br><span class="line"></span><br><span class="line">Ubuntu:</span><br><span class="line">wget https://github.com/sysulq/nginx-vts-exporter/releases/download/v0.10.8/nginx-vtx-exporter_0.10.8_linux_amd64.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.2 解压软件包到path路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk92 ~]# tar xf nginx-vtx-exporter_0.10.8_linux_amd64.tar.gz -C /usr/local/bin/ nginx-vtx-exporter</span><br></pre></td></tr></table></figure><p>2.3 运行nginx-vtx-exporter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk92 ~]# nginx-vtx-exporter -nginx.scrape_uri=http://10.0.0.93/status/format/json</span><br></pre></td></tr></table></figure><p>2.4 访问测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.92:9913/metrics</span><br><span class="line">http://10.0.0.93/status/format/prometheus</span><br></pre></td></tr></table></figure><h3 id="3-配置prometheus采集nginx数据">3 配置prometheus采集nginx数据</h3><p>3.1 修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@elk91 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">scrape_configs:</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&quot;nginx-exporter&quot;</span></span><br><span class="line">    metrics_path: <span class="string">&quot;/status/format/prometheus&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - <span class="string">&quot;10.0.0.93:80&quot;</span></span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&quot;nginx-vts-exporter&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - <span class="string">&quot;10.0.0.92:9913&quot;</span></span><br><span class="line">          ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line"><span class="comment">#Prometheus热加载         （前面文章都有未赘述）</span></span><br></pre></td></tr></table></figure><p>3.2 查看Prometheus的WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.91:9090/targets?</span><br></pre></td></tr></table></figure><p>3.3 导入grafana模板</p><pre><code>2949</code></pre><h2 id="prometheus监控tomcat">prometheus监控tomcat</h2><p>部署tomcat-exporter<br>1 基于Dockerfile构建tomcat-exporter<br>参考链接：<br>[root@elk93 ~]# git clone <a href="https://gitee.com/jasonyin2020/tomcat-exporter.git">https://gitee.com/jasonyin2020/tomcat-exporter.git</a></p><p>2 编译tomcat exporter镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 ~]# <span class="built_in">cd</span> tomcat-exporter/</span><br><span class="line">[root@elk93 tomcat-exporter]# ll</span><br><span class="line">total 44</span><br><span class="line">drwxr-xr-x  5 root root 4096 Sep  5 15:02 ./</span><br><span class="line">drwx------ 11 root root 4096 Sep  5 15:02 ../</span><br><span class="line">-rw-r--r--  1 root root   96 Sep  5 15:02 build.sh</span><br><span class="line">-rw-r--r--  1 root root  503 Sep  5 15:02 Dockerfile</span><br><span class="line">drwxr-xr-x  8 root root 4096 Sep  5 15:02 .git/</span><br><span class="line">drwxr-xr-x  2 root root 4096 Sep  5 15:02 libs/</span><br><span class="line">-rw-r--r--  1 root root 3407 Sep  5 15:02 metrics.war</span><br><span class="line">drwxr-xr-x  2 root root 4096 Sep  5 15:02 myapp/</span><br><span class="line">-rw-r--r--  1 root root  191 Sep  5 15:02 README.md</span><br><span class="line">-rw-r--r--  1 root root 7604 Sep  5 15:02 server.xml</span><br><span class="line">[root@elk93 tomcat-exporter]# </span><br><span class="line">[root@elk93 tomcat-exporter]# bash build.sh </span><br></pre></td></tr></table></figure><p>3.运行tomcat exporter镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk93 tomcat-exporter]# docker run -p 28080:8080 -d --name tomcat-server registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/tomcat9-app:v1</span><br><span class="line">81926f3514f0531a462d289a022b6dbb12c4d68f2023e9c947ad9d8766d0fb90</span><br></pre></td></tr></table></figure><p>4.访问tomcat应用</p><pre><code>http://10.0.0.93:28080/metrics/http://10.0.0.93:28080/myapp/</code></pre><p>5 配置prometheus监控tomcat应用</p><p>5.1 修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk91 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">...</span><br><span class="line">scrape_configs:</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&quot;tomcat-exporter&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: </span><br><span class="line">        - <span class="string">&quot;10.0.0.93:28080&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#检查Prometheus语法是否有误</span></span><br><span class="line"><span class="comment">#Prometheus热加载</span></span><br></pre></td></tr></table></figure><p>5.2 查看Prometheus的WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.91:9090/targets</span><br></pre></td></tr></table></figure><p>5.3 导入grafana模板</p><pre><code>由于官方的支持并不友好，可以在GitHub自行搜索相应的tomcat监控模板。 参考链接:https://github.com/nlighten/tomcat_exporter/blob/master/dashboard/example.json</code></pre>]]></content>
    
    
    <summary type="html">带你了解使用Prometheus监控ELK集群</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>06-监控docker容器及数据库</title>
    <link href="https://lukme.top/posts/668ffa27.html"/>
    <id>https://lukme.top/posts/668ffa27.html</id>
    <published>2024-11-20T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.736Z</updated>
    
    <content type="html"><![CDATA[<h1>监控docker</h1><p><strong>环境准备</strong></p><table><thead><tr><th>主机名</th><th>WanIP</th><th>角色</th></tr></thead><tbody><tr><td>elk01</td><td>10.0.0.211</td><td>Prometheus服务端</td></tr><tr><td>elk02</td><td>10.0.0.212</td><td>作为docker的被监控端，安装docker，cadvisor</td></tr><tr><td>elk03</td><td>10.0.0.213</td><td>作为docker的被监控端，安装docker，cadvisor</td></tr></tbody></table><p>Prometheus监控docker容器环境<br>1.cadVisor<br>cadVisor是Google公司开源的一款容器监控工具，支持docker，podman容器管理工具的监控。</p><p>GitHub地址:<br><a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a></p><p><strong>两台需要机器能够翻墙，因为拉取的是谷歌容器镜像仓库</strong></p><p><strong>我有cadvisor镜像，所有直接导入就行了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@elk02:~# docker load  &lt; cadvisor-amd64-0.49.1.tar.gz </span><br><span class="line">root@elk03:~# docker load  &lt; cadvisor-amd64-0.49.1.tar.gz </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">后续考虑提供cadvisor镜像</span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">  -v /:/rootfs:ro \</span><br><span class="line">  -v /var/run:/var/run:ro \</span><br><span class="line">  -v /sys:/sys:ro \</span><br><span class="line">  -v /var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">  -v /dev/disk/:/dev/disk:ro \</span><br><span class="line">  -p 18080:8080 \</span><br><span class="line">  -d  \</span><br><span class="line">  --name=cadvisor \</span><br><span class="line">  --privileged \</span><br><span class="line">  --device=/dev/kmsg \</span><br><span class="line">  gcr.io/cadvisor/cadvisor-amd64:v0.49.1</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">可以尝使用dockerhub里的cadvisor，镜像换为google/cadvisor:latest  </span><br></pre></td></tr></table></figure><p><strong>访问测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03:1 ~]# curl -s 10.0.0.213:18080/metrics | <span class="built_in">head</span> -3</span><br><span class="line"><span class="comment"># HELP cadvisor_version_info A metric with a constant &#x27;1&#x27; value labeled by kernel version, OS version, docker version, cadvisor version &amp; cadvisor revision.</span></span><br><span class="line"><span class="comment"># TYPE cadvisor_version_info gauge</span></span><br><span class="line">cadvisor_version_info&#123;cadvisorRevision=<span class="string">&quot;6f3f25ba&quot;</span>,cadvisorVersion=<span class="string">&quot;v0.49.1&quot;</span>,dockerVersion=<span class="string">&quot;&quot;</span>,kernelVersion=<span class="string">&quot;5.15.0-124-generic&quot;</span>,osVersion=<span class="string">&quot;Alpine Linux v3.18&quot;</span>&#125; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者浏览器访问</span><br><span class="line">http://10.0.0.212:18080/containers/</span><br></pre></td></tr></table></figure><p><strong>prometheus定义要监控的docker主机</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.修改Prometheus的配置文件</span><br><span class="line">[root@elk02:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">   - job_name: <span class="string">&quot;docker&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.212:18080</span><br><span class="line">        - 10.0.0.213:18080</span><br><span class="line">        </span><br><span class="line">2.检查Prometheus语法是否有误</span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">3.重新发起请求（热加载Prometheus）</span><br><span class="line">[root@elk02 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line">4.grafana导入对应的模板Id</span><br><span class="line">315</span><br><span class="line">10619</span><br></pre></td></tr></table></figure><h1>监控数据库</h1><h2 id="监控MySQL">监控MySQL</h2><p><strong>mysql本身并不支持metrics接口，因此需要独立部署mysql-exporter来提供metrics接口。</strong></p><p><strong>这里使用docker部署MySQL，使用Prometheus监控MySQL(不再赘述docker安装部署了)</strong></p><p>GitHub地址:</p><p><a href="https://github.com/prometheus/mysqld_exporter/releases/download/v0.16.0/mysqld_exporter-0.16.0.linux-amd64.tar.gz">https://github.com/prometheus/mysqld_exporter/releases/download/v0.16.0/mysqld_exporter-0.16.0.linux-amd64.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">1.下载mysql_exporter</span><br><span class="line">[root@elk02:1 ~]# wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.16.0/mysqld_exporter-0.16.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.拉取镜像</span><br><span class="line">[root@elk02:1 ~]# docker pull mysql:8.3.0-oracle</span><br><span class="line"></span><br><span class="line">3.部署MySQL数据库 </span><br><span class="line">[root@elk02:1 ~]# docker run --name mysql-server -t \</span><br><span class="line">             -e MYSQL_DATABASE=<span class="string">&quot;linux&quot;</span> \</span><br><span class="line">             -e MYSQL_USER=<span class="string">&quot;luay&quot;</span> \</span><br><span class="line">             -e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">             -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="string">&quot;yes&quot;</span> \</span><br><span class="line">             --restart unless-stopped \</span><br><span class="line"> --network host \</span><br><span class="line">             -d mysql:8.3.0-oracle \</span><br><span class="line">             --character-set-server=utf8mb4 --collation-server=utf8mb4_bin \</span><br><span class="line">             --default-authentication-plugin=mysql_native_password</span><br><span class="line"></span><br><span class="line">4.查看运行状态</span><br><span class="line">[root@elk02:1 ~]# docker ps -l</span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS      </span><br><span class="line">a069ae1367ff   mysql:8.3.0-oracle   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   5 seconds ago   Up 4 seconds</span><br><span class="line"></span><br><span class="line">[root@elk02:1 ~]# netstat -lntup|grep 3306</span><br><span class="line">tcp6       0      0 :::3306      :::*      LISTEN      38663/mysqld       </span><br><span class="line">tcp6       0      0 :::33060     :::*      LISTEN      38663/mysqld </span><br><span class="line"></span><br><span class="line">5.解压软件包(后面步骤意思是将mysqld_exporter直接解压到/usr/local/bin/下，跳过一层目录)</span><br><span class="line">tar xf mysqld_exporter-0.15.1.linux-amd64.tar.gz -C /usr/local/bin/ mysqld_exporter-0.15.1.linux-amd64/mysqld_exporter  --strip-components=1</span><br><span class="line"></span><br><span class="line">6.创建MySQL的配置，指定默认的用户名和密码</span><br><span class="line">[root@elk02:1 ~]#  <span class="built_in">cat</span> &gt; /root/.my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[client]</span></span><br><span class="line"><span class="string">user=luay</span></span><br><span class="line"><span class="string">password=123</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">7.运行mysqld-exporter</span><br><span class="line">[root@elk02:1 ~]# mysqld_exporter --mysqld.address=<span class="string">&quot;10.0.0.212:3306&quot;</span> --web.listen-address=:9104 --config.my-cnf=<span class="string">&quot;/root/.my.cnf&quot;</span></span><br><span class="line"></span><br><span class="line">8.访问mysqld-exporter的webui</span><br><span class="line">http://10.0.0.212:9104/metrics</span><br><span class="line"></span><br><span class="line">9.修改Prometheus的配置文件</span><br><span class="line">[root@elk02:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">   - job_name: <span class="string">&quot;mysql&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.212:9104</span><br><span class="line">        </span><br><span class="line">10.检查Prometheus语法是否有误</span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">11.重新发起请求（热加载Prometheus）</span><br><span class="line">[root@elk02 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line">12.检查Prometheus的WebUI</span><br><span class="line">http://10.0.0.211:9090/targets</span><br><span class="line"></span><br><span class="line">13.grafana导入对应的模板ID</span><br><span class="line">17320</span><br><span class="line">18949</span><br><span class="line">14057</span><br></pre></td></tr></table></figure><h2 id="监控redis">监控redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.拉取镜像</span><br><span class="line">[root@elk02:1 ~]# docker pull redis:7.2.5</span><br><span class="line"></span><br><span class="line">2.下载redis_exporter</span><br><span class="line">[root@elk02:1 ~]# wget https://github.com/oliver006/redis_exporter/releases/download/v1.62.0/redis_exporter-v1.62.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">3.启动redis</span><br><span class="line">[root@elk02:1 ~]# docker run -d --name redis-sever --network host redis:7.2.5 </span><br><span class="line"></span><br><span class="line">[root@elk02:1 ~]# netstat -lntup|grep 6379</span><br><span class="line">tcp     0   0 0.0.0.0:6379     0.0.0.0:*   LISTEN      39212/redis-server</span><br><span class="line">tcp6    0   0 :::6379          :::*        LISTEN      39212/redis-server</span><br><span class="line"></span><br><span class="line">4.解压软件包 </span><br><span class="line">[root@elk02:1 ~]# tar xf redis_exporter-v1.62.0.linux-amd64.tar.gz -C /usr/local/bin/ redis_exporter-v1.62.0.linux-amd64/redis_exporter --strip-components=1</span><br><span class="line"></span><br><span class="line">5.启动redis-exporter</span><br><span class="line">[root@elk92 ~]# redis_exporter -redis.addr redis://10.0.0.212:6379 -web.telemetry-path /metrics -web.listen-address :9121</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看redis_exporter帮助</span></span><br><span class="line">[root@elk02:1 ~]# redis_exporter -h</span><br><span class="line"></span><br><span class="line">5.浏览器访问</span><br><span class="line">10.0.0.212:9121/metrics</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241123135827708.png" alt="image-20241123135827708"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.进入redis数据库</span><br><span class="line">[root@elk02:2 ~]# docker <span class="built_in">exec</span> -it redis-sever redis-cli --raw -n 1</span><br><span class="line">127.0.0.1:6379[1]&gt; </span><br><span class="line"></span><br><span class="line">2.写入数据</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> name zhangsan </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get name</span><br><span class="line">zhangsan</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get age</span><br><span class="line">18</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">127.0.0.1:6379[1]&gt; </span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241123140117078.png" alt="image-20241123140117078"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.修改Prometheus的配置文件</span><br><span class="line">[root@elk02:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">   - job_name: <span class="string">&quot;redis&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.212:9121</span><br><span class="line">        </span><br><span class="line">10.检查Prometheus语法是否有误</span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line">11.重新发起请求（热加载Prometheus）</span><br><span class="line">[root@elk02 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line">12.检查Prometheus的WebUI</span><br><span class="line">http://10.0.0.211:9021/targets</span><br><span class="line"></span><br><span class="line">13.grafana导入对应的模板ID</span><br><span class="line">763</span><br><span class="line">14091</span><br><span class="line">14615</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Prometheus监控docker容器及docker起的数据库</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>05-监控CPU</title>
    <link href="https://lukme.top/posts/2471ba3e.html"/>
    <id>https://lukme.top/posts/2471ba3e.html</id>
    <published>2024-11-19T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.736Z</updated>
    
    <content type="html"><![CDATA[<p><strong>监控CPU的使用情况案例</strong><br>1 统计各个节点CPU的使用率<br>1.1 我们需要先找到CPU相关的KEY</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_cpu_seconds_total</span><br></pre></td></tr></table></figure><p>1.2 过滤出CPU的空闲时间({mode=‘idle’})和全部CPU的时间(‘{}’)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_cpu_seconds_total&#123;<span class="attribute">mode</span>=<span class="string">&#x27;idle&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>过滤CPU的空闲时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_cpu_seconds_total&#123;&#125;</span><br><span class="line">此处的<span class="string">&#x27;&#123;&#125;&#x27;</span>可以不写，因为里面没有任何参数，代表获取CPU的所有状态时间。</span><br></pre></td></tr></table></figure><p>1.3 统计1分钟内CPU的增量时间</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">increase</span><span class="params">(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;[<span class="number">1</span>m])</span></span></span><br></pre></td></tr></table></figure><p>统计1分钟内CPU空闲状态的增量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">increase(node_cpu_seconds_total[1m])</span><br></pre></td></tr></table></figure><p>统计1分钟内CPU所有状态的增量。</p><p>1.4 将结果进行加和统计</p><p>将1分钟内所有CPU空闲时间的增量进行加和计算。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sum</span><span class="params">(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;[<span class="number">1</span>m])</span></span>)</span><br></pre></td></tr></table></figure><p>将1分钟内所有CPU空闲时间的增量进行加和计算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total[1m]))</span><br></pre></td></tr></table></figure><p>1.5 按照不同节点进行分组</p><p>将1分钟内所有CPU空闲时间的增量进行加和计算，并按照机器实例进行分组。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>&#123;mode=&#x27;idle&#x27;&#125;[<span class="number">1</span>m])) by (<span class="name">instance</span>)</span><br></pre></td></tr></table></figure><p>将1分钟内所有CPU空闲时间的增量进行加和计算，并按照机器实例进行分组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)</span><br></pre></td></tr></table></figure><p>1.6 计算1分钟内CPU空闲时间的百分比</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>&#123;mode=&#x27;idle&#x27;&#125;[<span class="number">1</span>m])) by (<span class="name">instance</span>) / sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>[<span class="number">1</span>m])) by (<span class="name">instance</span>)</span><br></pre></td></tr></table></figure><p>1.7 统计1小时内CPU的使用率，计算公式: (1 - CPU空闲时间的百分比) * 100%。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> - sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>&#123;mode=&#x27;idle&#x27;&#125;[<span class="number">1</span>h])) by (<span class="name">instance</span>) / sum(<span class="name">increase</span>(<span class="name">node_cpu_seconds_total</span>[<span class="number">1</span>h])) by (<span class="name">instance</span>)) * <span class="number">100</span></span><br></pre></td></tr></table></figure><p>1.8 统计1分钟内CPU的使用率，计算公式: (1 - CPU空闲时间的百分比) * 100%。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1 - <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)) * 100</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241123101647287.png" alt="image-20241123101647287"></p><p>2 计算CPU用户态的1分钟内百分比</p><pre><code>sum(increase(node_cpu_seconds_total&#123;mode='user'&#125;[1m])) by (instance) / sum(increase(node_cpu_seconds_total[1m])) by (instance) * 100</code></pre><p>3 计算CPU内核态的1分钟内百分比</p><pre><code>(sum(increase(node_cpu_seconds_total&#123;mode='system'&#125;[1m])) by (instance) / sum(increase(node_cpu_seconds_total[1m])) by (instance)) * 100</code></pre><p>4 计算CPU IO等待时间的1分钟内百分比</p><pre><code>(sum(increase(node_cpu_seconds_total&#123;mode='iowait'&#125;[1m])) by (instance) / sum(increase(node_cpu_seconds_total[1m])) by (instance)) * 100</code></pre><p><strong>以此添加以上2,3,4语法效果如下</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123101831485.png" alt="image-20241123101831485"></p><p><strong>保存dashboard</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123102158402.png" alt="image-20241123102158402"></p><p><strong>如何实现类似这样选择效果？</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123102014754.png" alt="image-20241123102014754"></p><h2 id="grafana的变量定义">grafana的变量定义</h2><p><img src="https://cos.lukme.top/Pic/image-20241123102621980.png" alt="image-20241123102621980"></p><p><img src="https://cos.lukme.top/Pic/image-20241123103440922.png" alt="image-20241123103440922"></p><p><strong>应用保存后再次查看这个dashboard</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123103551574.png" alt="image-20241123103551574"></p><p>==不过此时我们点击是没有效果的，因为我们之前写的promQL是直接写死的没有使用变量==</p><p><strong>替换如下变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;iowait&#x27;</span>,instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance)) * 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(1 - <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>,instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance)) * 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;system&#x27;</span>,instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance)) * 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;user&#x27;</span>,instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) / <span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$myhost</span>&quot;</span>&#125;[1m])) by (instance) * 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241123104039207.png" alt="image-20241123104039207"></p><p><strong>再次回到dashboard验证点击是否有变化（只验证了一个）</strong></p><p>==很明显变化了==</p><p><img src="D:/PixPin/History/recording.gif" alt="recording"></p><h2 id="自定义变量类型">自定义变量类型</h2><p><img src="https://cos.lukme.top/Pic/image-20241123105342511.png" alt="image-20241123105342511"></p><h2 id="dashboard备份">dashboard备份</h2><p><strong>点击到模板的设置，选择json model</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123111303063.png" alt="image-20241123111303063"></p>]]></content>
    
    
    <summary type="html">使用Prometheus监控CPU并出图展示</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>04-监控ELK系列</title>
    <link href="https://lukme.top/posts/750619ba.html"/>
    <id>https://lukme.top/posts/750619ba.html</id>
    <published>2024-11-18T03:23:03.000Z</published>
    <updated>2024-12-05T04:38:04.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监控zookeeper集群">监控zookeeper集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.修改zookeeper配置文件</span></span><br><span class="line">[root@elk03:2 ~]# vim /app/zookeeper/conf/zoo.cfg </span><br><span class="line">···</span><br><span class="line">metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span><br><span class="line">metricsProvider.httpHost=0.0.0.0</span><br><span class="line">metricsProvider.httpPort=7000</span><br><span class="line">metricsProvider.exportJvmInfo=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.同步到其他节点</span></span><br><span class="line">[root@elk01 ~]# scp /app/zookeeper/conf/zoo.cfg root@10.0.0.212:/app/zookeeper/conf/</span><br><span class="line">[root@elk01 ~]# scp /app/zookeeper/conf/zoo.cfg root@10.0.0.213:/app/zookeeper/conf/</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.重启zookeeper集群</span></span><br><span class="line">[root@elk01 ~]# zkServer.sh restart</span><br><span class="line">[root@elk02 ~]# zkServer.sh restart</span><br><span class="line">[root@elk03 ~]# zkServer.sh restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.测试访问zookeeper的监听端口是否正常</span></span><br><span class="line">[root@elk03 ~]# curl -s 10.0.0.211:7000/metrics | <span class="built_in">head</span> -3</span><br><span class="line"><span class="comment"># HELP approximate_data_size approximate_data_size</span></span><br><span class="line"><span class="comment"># TYPE approximate_data_size gauge</span></span><br><span class="line">approximate_data_size 15794.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.Prometheus配置zookeeper </span></span><br><span class="line">[root@elk03:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">   - job_name: <span class="string">&quot;zookeeper&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.211:7000</span><br><span class="line">        - 10.0.0.212:7000</span><br><span class="line">        - 10.0.0.213:7000</span><br><span class="line">        </span><br><span class="line"><span class="comment">#6.检查Prometheus语法是否有误</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#7.重新发起请求（热加载Prometheus）</span></span><br><span class="line">[root@elk211 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#8. 浏览器刷新访问,在target里即可看到被监控端</span></span><br><span class="line">10.0.0.211:9090/targets</span><br><span class="line"></span><br><span class="line"><span class="comment">#grafana导入模板ID</span></span><br><span class="line">10465</span><br></pre></td></tr></table></figure><h2 id="监控kafka集群">监控kafka集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#官方  https://prometheus.io/docs/instrumenting/exporters/  搜索kafka exporter</span></span><br><span class="line"></span><br><span class="line">1.下载kafka exporter </span><br><span class="line">wget https://github.com/danielqsj/kafka_exporter/releases/download/v1.8.0/kafka_exporter-1.8.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压kafka exporter软件包 并做软连接</span><br><span class="line">[root@elk01:3 ~]# tar xf kafka_exporter-1.8.0.linux-amd64.tar.gz -C /app/</span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">ln</span> -s  /app/kafka_exporter-1.8.0.linux-amd64/ /app/kafka-exporter</span><br><span class="line"></span><br><span class="line">3.运行kafka exporter程序暴露kafka集群的指标提供http接口，以供Prometheus识别</span><br><span class="line">[root@elk01:3 ~]# /app/kafka-exporter/kafka_exporter \</span><br><span class="line">--web.listen-address=<span class="string">&quot;:9308&quot;</span> --web.telemetry-path=<span class="string">&quot;/metrics&quot;</span> \</span><br><span class="line">--kafka.server=elk211:9092 --kafka.server=elk212:9092  \</span><br><span class="line">--kafka.server=elk213:9092 --kafka.version=<span class="string">&quot;3.8.0&quot;</span></span><br><span class="line"></span><br><span class="line">4.访问kafka exporter测试</span><br><span class="line">http://10.0.0.213:9308/metrics</span><br><span class="line"></span><br><span class="line">5.Prometheus配置监控kafka</span><br><span class="line">[root@elk03:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">    - job_name: <span class="string">&quot;kafka&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.213:9308 </span><br><span class="line">        </span><br><span class="line">6.检测Prometheus语法</span><br><span class="line">7.热加载Prometheus</span><br></pre></td></tr></table></figure><h2 id="监控elasticsearch集群">监控elasticsearch集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.下载elasticsearch exporter </span><br><span class="line">[root@elk01:3 ~]# wget https://github.com/prometheus-community/elasticsearch_exporter/releases/download/v1.7.0/elasticsearch_exporter-1.7.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压软件包</span><br><span class="line">[root@elk01:3 ~]# tar xf elasticsearch_exporter-1.7.0.linux-amd64.tar.gz -C /app</span><br><span class="line"></span><br><span class="line">3.运行elasticsearch exporter暴露ES集群的监控指标为http接口，供给Prometheus抓取数据</span><br><span class="line">[root@elk01:3 ~]# /app/elasticsearch_exporter-1.7.0.linux-amd64/elasticsearch_exporter \</span><br><span class="line">--web.telemetry-path=<span class="string">&quot;/metrics&quot;</span> \</span><br><span class="line">--web.listen-address=:9114 \</span><br><span class="line">--es.all \</span><br><span class="line">--es.uri=<span class="string">&quot;http://elastic:123456@10.0.0.211:9200&quot;</span></span><br><span class="line"></span><br><span class="line">4.访问elasticsearch exporter的WebUI</span><br><span class="line">http://10.0.0.212:9114/metrics</span><br><span class="line"></span><br><span class="line">5.Prometheus配置监控kafka</span><br><span class="line">[root@elk03:2 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">···</span><br><span class="line">    - job_name: <span class="string">&quot;es&quot;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 10.0.0.213:9114</span><br><span class="line">        </span><br><span class="line">6.检测Prometheus语法</span><br><span class="line">7.热加载Prometheus</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">带你了解使用Prometheus监控ELK集群</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>03-grafana出图</title>
    <link href="https://lukme.top/posts/c9c8c45c.html"/>
    <id>https://lukme.top/posts/c9c8c45c.html</id>
    <published>2024-11-17T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装部署grafana">安装部署grafana</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">网址： https://grafana.com/grafana/download/9.5.21?pg=get&amp;plcmt=selfmanaged-box1-cta1</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.安装软件包（选择9版本的最新版）</span></span><br><span class="line">[root@elk01:0 ~]# yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.21-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.配置开机自启动</span></span><br><span class="line">[root@elk01:0 ~]# systemctl <span class="built_in">enable</span> --now grafana-server </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.访问grafana的WebUI</span></span><br><span class="line">http://10.0.0.211:3000/login</span><br><span class="line"></span><br><span class="line">首次登录用户名和密码均为admin，登录点击后面直接点击skip跳过修改密码</span><br></pre></td></tr></table></figure><h2 id="配置Prometheus数据源">配置Prometheus数据源</h2><p><img src="https://cos.lukme.top/Pic/image-20241122135329713.png" alt="image-20241122135329713"></p><p><img src="https://cos.lukme.top/Pic/image-20241122135413189.png" alt="image-20241122135413189"></p><p><img src="https://cos.lukme.top/Pic/image-20241122135559291.png" alt="image-20241122135559291"></p><p><strong>下拉找到保存save即可</strong></p><h2 id="导入模板">导入模板</h2><p><a href="https://grafana.com/grafana/dashboards/?search=node">官方dashboard，点击直达，搜索node查看模板</a></p><p>找到合适模板知道模板id导入grafana</p><p><img src="https://cos.lukme.top/Pic/image-20241122135814095.png" alt="image-20241122135814095"></p><p><img src="https://cos.lukme.top/Pic/image-20241122141944442.png" alt="image-20241122141944442"></p><blockquote><p>还有个模板8919仅供参考</p></blockquote><p><strong>CPU压测后数据明显了</strong><img src="https://cos.lukme.top/Pic/image-20241122142250940.png" alt="image-20241122142250940"></p><h2 id="创建自己的模板">创建自己的模板</h2><p><img src="https://cos.lukme.top/Pic/image-20241123094852067.png" alt="image-20241123094852067"></p><p><strong>Add  visualization</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241123095639123.png" alt="image-20241123095639123"></p><p><strong>==创建dashboard以及出图见05-监控CPU使用情况==</strong></p><h2 id="grafana修改模板">grafana修改模板</h2><p><strong>以普罗米模板11277为例</strong></p><p><strong>导入模板</strong></p><p><img src="https://cos.lukme.top/Pic/QQ_1726060882752.png" alt="QQ_1726060882752"></p><p><img src="https://cos.lukme.top/Pic/image-20240911212345131.png" alt="image-20240911212345131"></p><p><img src="https://cos.lukme.top/Pic/image-20240911212434248.png" alt="image-20240911212434248"></p><h2 id="修改模板">修改模板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">去普罗米里发现新现版prometheus的project改为了job，所有下一步修改变量</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/recording.gif" alt="recording"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将project改为job，并且删掉不支持的project</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Prometheus接入grafana出图展示</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>02-prometheus常用函数介绍</title>
    <link href="https://lukme.top/posts/7c8bc612.html"/>
    <id>https://lukme.top/posts/7c8bc612.html</id>
    <published>2024-11-16T03:23:03.000Z</published>
    <updated>2024-12-05T04:17:45.731Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Prometheus常用的函数</strong></p><h2 id="increase">increase</h2><p>increase函数:<br>用来针对counter数据类型，截取其中一段时间总的增量。</p><p>举个例子:</p><p>统计1分钟内，使用标签过滤器查看&quot;10.0.0.211:9100&quot;节点的第0颗CPU，空闲状态使用的总时间增量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;10.0.0.211:9100&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125;[1m])</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122125610115.png" alt="image-20241122125610115"></p><blockquote><p>一分钟内空闲59s，CPU太闲了，压测一波</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.安装压力测试工具</span></span><br><span class="line">[root@elk02 ~]# yum install -y stress</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.压力测试CPU</span></span><br><span class="line">[root@elk03:1 ~]# stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --<span class="built_in">timeout</span> 10m</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122130528444.png" alt="image-20241122130528444"></p><h2 id="sum">sum</h2><p>sum函数:<br>加和的作用。 （将下方图1所有结果累加，不分组）</p><p>举个例子:</p><p>统计1分钟内，使用标签过滤器查看所有节点的第0颗CPU，空闲状态使用的总时间增量，并将返回结果累加。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&quot;idle&quot;</span>,cpu=<span class="string">&#x27;0&#x27;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122131145124.png" alt="image-20241122131145124"></p><p><img src="https://cos.lukme.top/Pic/image-20241122131116002.png" alt="image-20241122131116002"></p><h2 id="by">by</h2><p>by函数:<br>将数据进行分组，类似于MySQL的&quot;GROUP BY&quot;。</p><p>举个例子:</p><p>统计1分钟内，使用标签过滤器查看CPU空闲状态，并将结果进行累加，基于instance进行分组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="string">&quot;idle&quot;</span>,cpu=<span class="string">&#x27;0&#x27;</span>&#125;[1m])) by (instance)</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122131653295.png" alt="image-20241122131653295"></p><h2 id="rate">rate</h2><p>rate函数:<br>它的功能是按照设置的时间段，取counter在这个时间段中平均每秒的增量。<br>举个例子:</p><p>统计1分钟内，使用标签过滤器查看&quot;10.0.0.212:9100&quot;节点的第0颗CPU，空闲状态使用的每秒的增量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rate(node_cpu_seconds_total&#123;instance=<span class="string">&quot;10.0.0.212:9100&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>,cpu=<span class="string">&#x27;0&#x27;</span>&#125;[1m])</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122132326591.png" alt="image-20241122132326591"></p><p>increase和rate如何选择:<br>(1)对于采集数据频率较低的场景建议使用increase函数，因为使用rate函数可能会出现断点,比如针对硬盘容量监控。<br>(2)对于采集数据频率较高的场景建议使用rate函数，比如针对CPU，内存，网络流量等都是可以基于rate函数来采集等。</p><h2 id="topk">topk</h2><p>topk函数:<br>取前几位的最高值，实际使用的时候一般会用该函数进行瞬时报警，而不是为了观察曲线图。</p><p>举个例子:<br>统计1分钟内，使用标签过滤器查看CPU，所有状态使用的每秒的增量，只查看前3个节点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topk(3,rate(node_cpu_seconds_total&#123;mode=<span class="string">&quot;idle&quot;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122132911868.png" alt="image-20241122132911868"></p><p><img src="https://cos.lukme.top/Pic/image-20241122133011958.png" alt="image-20241122133011958"></p><h2 id="count">count</h2><p>count函数:<br>把数值符合条件的，输出数目进行累加加和。<br>比如说企业中有100台服务器，如果只有10台服务器CPU使用率高于80%时候是不需要报警的，但是数量超过70台时就需要报警了。</p><p>举个例子:<br>count(tcp_wait_conn &gt; 500):<br>假设tcp_wait_conn是咱们自定义的KEY。<br>若TCP等待数量大于500的机器数量就判断条件为真。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对统计的结果进行计数。</span></span><br><span class="line"></span><br><span class="line">count(rate(node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122133509836.png" alt="image-20241122133509836"></p><p>7 其他函数</p><p>推荐阅读:<br><a href="https://prometheus.io/docs/prometheus/latest/querying/functions/">https://prometheus.io/docs/prometheus/latest/querying/functions/</a></p>]]></content>
    
    
    <summary type="html">本篇介绍了Prometheus的常用函数</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>01-prometheus介绍及部署</title>
    <link href="https://lukme.top/posts/d9386973.html"/>
    <id>https://lukme.top/posts/d9386973.html</id>
    <published>2024-11-15T03:23:03.000Z</published>
    <updated>2024-12-05T03:37:04.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="prometheus介绍">prometheus介绍</h2><p>1.什么是Prometheus<br>Prometheus是一款监控系统，可以监控传统业务（tomcat，nginx，mysql，redis，elasticsearch），还能够监控云原生业务，比如docker，k8s监控。</p><p><strong>官方链接:</strong><br><a href="https://prometheus.io/docs/introduction/overview/#architecture">https://prometheus.io/docs/introduction/overview/#architecture</a></p><p>推荐阅读:</p><pre><code>云原生CNCF官网:    https://landscape.cncf.io/Prometheus的GitHub地址:    https://github.com/prometheus/prometheusPrometheus的官网地址:    https://prometheus.io/</code></pre><p><img src="https://cos.lukme.top/Pic/image-20241121163541907.png" alt="image-20241121163541907"></p><table><thead><tr><th>主机名</th><th>WanIP</th><th>角色</th></tr></thead><tbody><tr><td>elk01</td><td>10.0.0.211</td><td>Prometheus服务端，安装Prometheus、node exporeter</td></tr><tr><td>elk02</td><td>10.0.0.212</td><td>被监控端，安装node exporeter</td></tr><tr><td>elk03</td><td>10.0.0.213</td><td>被监控端，安装node exporeter</td></tr></tbody></table><blockquote><p>我的环境使用的是之前部署elk的环境，主机名所以都是elk，—无关紧要</p></blockquote><h2 id="二进制部署prometheus">二进制部署prometheus</h2><p><strong>本篇使用的是一键安装方式脚本部署，安装目录都在/software目录下</strong>k8s阶段可以使用云原生方式部署</p><p>**1.下载Prometheus server **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# wget https://github.com/prometheus/prometheus/releases/download/v2.53.3/prometheus-2.53.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>**2.解压软件包 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# tar xf prometheus-2.53.2.linux-amd64.tar.gz -C /app/</span><br><span class="line">[root@elk01 ~]# <span class="built_in">ln</span> -s /app/prometheus-2.53.2.linux-amd64/ /app/prometheus</span><br></pre></td></tr></table></figure><p>**3.启动Prometheus server **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# <span class="built_in">cd</span> /app/prometheus/ &amp;&amp; ./prometheus </span><br></pre></td></tr></table></figure><p><strong>4.访问Prometheus的WebUI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.211:9090</span><br></pre></td></tr></table></figure><blockquote><p>使用安装脚本一键安装prometheus,软件包放在同级目录的download里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 auto_install_prometheus-server]# <span class="built_in">cat</span> install-prometheus-server.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># auther: lugaojie</span></span><br><span class="line"><span class="comment"># blog: www.lukme.top</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VERSION=2.53.2</span><br><span class="line">ARCH=amd64</span><br><span class="line">SOFTWARE=prometheus-<span class="variable">$&#123;VERSION&#125;</span>.linux-<span class="variable">$&#123;ARCH&#125;</span>.tar.gz</span><br><span class="line">URL=https://github.com/prometheus/prometheus/releases/download/v<span class="variable">$&#123;VERSION&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span></span><br><span class="line">DOWNLOAD=./download          <span class="comment">#指定软件下载目录</span></span><br><span class="line">INSTALLDIR=/softwares</span><br><span class="line">BASEDIR=<span class="variable">$&#123;INSTALLDIR&#125;</span>/prometheus-<span class="variable">$&#123;VERSION&#125;</span>.linux-amd64</span><br><span class="line">DATADIR=/data/prometheus</span><br><span class="line">LOGDIR=/var/log/prometheus</span><br><span class="line">HOSTIP=0.0.0.0</span><br><span class="line">PORT=9090</span><br><span class="line">HOSTNAME=`hostname`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">prepare</span></span>() &#123;</span><br><span class="line"><span class="comment"># 判断目录是否存在，若不存在则创建，-d指定目录，-o可以指定属主，-g指定数组</span></span><br><span class="line">[ -d <span class="variable">$INSTALLDIR</span> ] || install -d  <span class="variable">$&#123;INSTALLDIR&#125;</span></span><br><span class="line">[ -d <span class="variable">$DOWNLOAD</span> ] || install -d <span class="variable">$&#123;DOWNLOAD&#125;</span></span><br><span class="line">[ -d <span class="variable">$DATADIR</span> ] || install -d <span class="variable">$&#123;DATADIR&#125;</span></span><br><span class="line">[ -d <span class="variable">$LOGDIR</span> ] || install -d <span class="variable">$&#123;LOGDIR&#125;</span></span><br><span class="line"></span><br><span class="line">. /etc/os-release</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ID</span>&quot;</span> == <span class="string">&quot;centos&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"> <span class="comment"># 判断系统是否安装wget</span></span><br><span class="line"> [ -f /usr/bin/wget ] || yum -y install wget</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否存在，若不存在则下载</span></span><br><span class="line">[ -s <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span> ] || wget <span class="variable">$URL</span> -O <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">deploy</span></span>() &#123;</span><br><span class="line"><span class="comment"># 检查环境</span></span><br><span class="line">prepare</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件软件包</span></span><br><span class="line">tar xf <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span> -C <span class="variable">$&#123;INSTALLDIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成启动脚本</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/prometheus-server.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description== Linux  Prometheus Server</span></span><br><span class="line"><span class="string">Documentation=https://prometheus.io/docs/introduction/overview/</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string">ExecStart=/bin/bash -c &quot;$&#123;BASEDIR&#125;/prometheus \</span></span><br><span class="line"><span class="string">  --config.file=$&#123;BASEDIR&#125;/prometheus.yml \</span></span><br><span class="line"><span class="string">      --web.enable-lifecycle \</span></span><br><span class="line"><span class="string">      --storage.tsdb.path=$&#123;DATADIR&#125; \</span></span><br><span class="line"><span class="string">      --storage.tsdb.retention.time=60d  \</span></span><br><span class="line"><span class="string">      --web.listen-address=$&#123;HOSTIP&#125;:$&#123;PORT&#125;  \</span></span><br><span class="line"><span class="string">      --web.max-connections=65535  \</span></span><br><span class="line"><span class="string">      --storage.tsdb.retention.size=512MB \</span></span><br><span class="line"><span class="string">      --query.timeout=10s \</span></span><br><span class="line"><span class="string">      --query.max-concurrency=20 \</span></span><br><span class="line"><span class="string">      --log.level=info \</span></span><br><span class="line"><span class="string">      --log.format=json \</span></span><br><span class="line"><span class="string">      --web.read-timeout=5m &amp;&gt;&gt; $&#123;LOGDIR&#125;/prometheus-server.log&quot;</span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -HUP \$MAINPID</span></span><br><span class="line"><span class="string">LimitNOFILE=65535</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  --web.enable-lifecycle                      指定webUI的热加载功能</span></span><br><span class="line"><span class="comment">#  --storage.tsdb.path=$&#123;DATADIR&#125;     指定存储路径</span></span><br><span class="line"><span class="comment">#  --storage.tsdb.retention.time=60d  指定保留数据时间，默认15d</span></span><br><span class="line"><span class="comment">#  --web.max-connections=65535        指定最大连接数</span></span><br><span class="line"><span class="comment">#  --storage.tsdb.retention.size=512MB指定存储块大小，512M滚动一次</span></span><br><span class="line"><span class="comment">#  --log.level=info                                  指定日志级别</span></span><br><span class="line"><span class="comment">#  --log.format=json                              指定日志格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将服务设置为开机自启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now prometheus-server</span><br><span class="line">systemctl status prometheus-server</span><br><span class="line"><span class="built_in">sleep</span> 0.3</span><br><span class="line">ss -ntl | grep <span class="variable">$&#123;PORT&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">delete</span></span>()&#123;</span><br><span class="line">systemctl <span class="built_in">disable</span> --now prometheus-server.service</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/systemd/system/node-exporter.service <span class="variable">$BASEDIR</span> <span class="variable">$DATADIR</span> <span class="variable">$LOGDIR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </span><br><span class="line"> deploy|i)</span><br><span class="line">   deploy</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;HOSTNAME&#125;</span> 的prometheus-server 已经部署成功![successfully]&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"> delete|r)</span><br><span class="line">   delete</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;HOSTNAME&#125;</span> 的prometheus-server 已经卸载成功,期待下次使用~&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"> *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> deploy[i]|delete[r]&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main <span class="variable">$1</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="部署node-exporter">部署node exporter</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">部署过程同上，官网找到下载</span><br><span class="line"></span><br><span class="line">1.#下载node exporter</span><br><span class="line">[root@elk01 ~]# wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">2.#解压至指定目录</span><br><span class="line">[root@elk01 ~]# tar xf node_exporter-1.8.2.linux-amd64.tar.gz -C /app</span><br><span class="line">[root@elk01 ~]# <span class="built_in">ln</span> -s /app/node_exporter-1.8.2.linux-amd64 /app/node_exporter</span><br><span class="line"></span><br><span class="line">4.#启动node_exporter</span><br><span class="line">[root@elk01 ~]# <span class="built_in">cd</span>  /app/node_exporter &amp;&amp; ./node_exporter </span><br><span class="line"></span><br><span class="line">5.#另外两个节点同样安装 node exporter</span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器访问（这就是暴露出来的接口）</span></span><br><span class="line">http://10.0.0.211:9100/metrics</span><br><span class="line">http://10.0.0.212:9100/metrics</span><br><span class="line">http://10.0.0.213:9100/metrics</span><br></pre></td></tr></table></figure><blockquote><p>一键安装exporter,软件包放在同级目录的download目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> auto-install-node-exporter/install-node-exporter.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># auther: lugaojie</span></span><br><span class="line"><span class="comment"># blog: https://www.lukme.top</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VERSION=1.8.2</span><br><span class="line">SOFTWARE=node_exporter-<span class="variable">$&#123;VERSION&#125;</span>.linux-amd64.tar.gz</span><br><span class="line">URL=https://github.com/prometheus/node_exporter/releases/download/v<span class="variable">$&#123;VERSION&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span></span><br><span class="line">DOWNLOAD=./download</span><br><span class="line">INSTALLDIR=/softwares</span><br><span class="line">BASEDIR=<span class="variable">$&#123;INSTALLDIR&#125;</span>/node_exporter-<span class="variable">$&#123;VERSION&#125;</span>.linux-amd64</span><br><span class="line">HOST=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">PORT=9100</span><br><span class="line">hostname=`hostname`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">prepare</span></span>() &#123;</span><br><span class="line"><span class="comment"># 判断目录是否存在，若不存在则创建</span></span><br><span class="line">[ -d <span class="variable">$INSTALLDIR</span> ] || <span class="built_in">mkdir</span> -pv <span class="variable">$&#123;INSTALLDIR&#125;</span></span><br><span class="line">[ -d <span class="variable">$DOWNLOAD</span> ] || <span class="built_in">mkdir</span> -pv <span class="variable">$&#123;DOWNLOAD&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ID</span>&quot;</span> == <span class="string">&quot;centos&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="comment"># 判断系统是否安装curl</span></span><br><span class="line">  [ -f /usr/bin/wget ] || yum -y install wget</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否存在，若不存在则下载</span></span><br><span class="line">[ -s <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span> ] || wget <span class="variable">$URL</span> -O <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">install</span></span>() &#123;</span><br><span class="line"><span class="comment"># 检查环境</span></span><br><span class="line">prepare</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件软件包</span></span><br><span class="line">tar xf <span class="variable">$&#123;DOWNLOAD&#125;</span>/<span class="variable">$&#123;SOFTWARE&#125;</span> -C <span class="variable">$&#123;INSTALLDIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成启动脚本</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/node-exporter.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description= Linux Node Exporter</span></span><br><span class="line"><span class="string">Documentation=https://prometheus.io/docs/introduction/overview/</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStart=$&#123;BASEDIR&#125;/node_exporter --web.telemetry-path=&quot;/metrics&quot; \</span></span><br><span class="line"><span class="string">--web.listen-address=$&#123;HOST&#125;:$&#123;PORT&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将服务设置为开机自启动</span></span><br><span class="line">  systemctl daemon-reload</span><br><span class="line">  systemctl <span class="built_in">enable</span> --now node-exporter.service</span><br><span class="line">  systemctl status node-exporter.service</span><br><span class="line">  ss -ntl | grep 9100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">remove</span></span>()&#123;</span><br><span class="line">systemctl <span class="built_in">disable</span> --now node-exporter.service</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/systemd/system/node-exporter.service <span class="variable">$BASEDIR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </span><br><span class="line"> install|i)</span><br><span class="line">   install</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;hostname&#125;</span> 的node-exporter 已经部署成功![successfully]&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"> remove|r)</span><br><span class="line">   remove</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;hostname&#125;</span> 的node-exporter 已经卸载成功,期待下次使用~&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"> *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> install[i]|remove[r]&quot;</span></span><br><span class="line">   ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main <span class="variable">$1</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="修改Prometheus文件">修改Prometheus文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.修改配置文件</span></span><br><span class="line">[root@elk01:0 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line"><span class="comment">#为了测试，拉取间隔时间可以设置为3s</span></span><br><span class="line">scrape_interval: 3s</span><br><span class="line">···末尾加上</span><br><span class="line">    <span class="comment">#job名随便，告诉Prometheus去哪拉取数据     </span></span><br><span class="line">  - job_name: <span class="string">&quot;elk&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.211:9100&quot;</span>,<span class="string">&quot;10.0.0.212:9100&quot;</span>,<span class="string">&quot;10.0.0.213:9100&quot;</span>]</span><br><span class="line">      </span><br><span class="line"><span class="comment">#2.修改配置文件后，对配置文件进行语法检查（Prometheus自带的）</span></span><br><span class="line">[root@elk01:0 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml </span><br><span class="line">Checking /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml</span><br><span class="line"> SUCCESS: /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml is valid prometheus config file syntax</span><br><span class="line"> </span><br><span class="line">`可以设置别名针对检查配置文件命令太长`</span><br><span class="line">[root@elk01:~]# vim /etc/profile</span><br><span class="line"><span class="built_in">alias</span> check=<span class="string">&#x27;/softwares/prometheus-2.53.2.linux-amd64/promtool check config /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml&#x27;</span></span><br><span class="line"></span><br><span class="line">[root@elk01:0 ~]# <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.重新加载配置（热加载）</span></span><br><span class="line">[root@elk211 ~]# curl -X POST http://10.0.0.211:9090/-/reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 浏览器刷新访问,在target里即可看到被监控端</span></span><br><span class="line">10.0.0.211:9090/targets</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241122111710195.png" alt="image-20241122111710195"></p><p><strong>关于metrics</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241122113152787.png" alt="image-20241122113152787"></p><p><strong>过滤数据</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241122114130917.png" alt="image-20241122114130917"></p><h2 id="Prometheus-metrics-类型">Prometheus metrics 类型</h2><ul><li>prometheus metrics type<br>prometheus监控中采集过来的数据统一称为Metrics数据，其并不是代表具体的数据格式，而是一种统计度量计算单位。</li></ul><p>当我们需要为某个系统或者某个服务做监控时，就需要使用到metrics。</p><p>prometheus支持的metrics包括但不限于以下几种数据类型:<br>guage:<br>最简单的度量指标，只是一个简单的返回值，或者叫瞬时状态。<br>比如说统计硬盘，内存等使用情况。<br>couter:<br>就是一个计数器，从数据量0开始累积计算，在理想情况下，只能是永远的增长，不会降低(有特殊情况，比如粉丝量)。<br>比如统计1小时，1天，1周，1一个月的用户访问量，这就是一个累加的操作。<br>histograms:<br>是统计数据的分布情况，比如最小值，最大值，中间值，中位数等，代表的是一种近似百分比估算数值。<br>通过histograms可以分别统计处在一个时间段(1s,2s,5s,10s)内nginx访问用户的响应时间。<br>summary:<br>summary是histograms的扩展类型，主要弥补histograms不足。</p><h2 id="Prometheus的PromQL语法">Prometheus的PromQL语法</h2><p>1 查看某个特定的key<br>node_cpu_seconds_total</p><p>2.查看某个节点的指标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_cpu_seconds_total&#123;instance=<span class="string">&quot;10.0.0.211:9100&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>3 查看某个节点的某刻CPU的某种状态</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode=&quot;idle&quot;,cpu=&quot;1&quot;&#125;</code></pre><p>4 查询最近10s内某个节点CPU的某种状态时间</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode=&quot;idle&quot;,cpu=&quot;1&quot;&#125;[10s]</code></pre><p>5 统计10s内，使用标签过滤器查看&quot;10.0.0.211:9100&quot;节点的第0颗CPU，非空闲状态使用的总时间</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode!=&quot;idle&quot;,cpu=&quot;1&quot;&#125;[10s]</code></pre><p>6 统计10s内，使用标签过滤器查看&quot;10.0.0.211:9100&quot;节点的第0颗CPU，mode名称以字母&quot;i&quot;开头的所有CPU核心。</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode=~&quot;i.*&quot;,cpu=&quot;0&quot;&#125;[10s]</code></pre><p>7 统计10s内，使用标签过滤器查看&quot;10.0.0.211:9100&quot;节点的第0颗CPU，mode名称不是以字母&quot;i&quot;开头的所有CPU核心。</p><pre><code>node_cpu_seconds_total&#123;instance=&quot;10.0.0.211:9100&quot;,mode!~&quot;i.*&quot;,cpu=&quot;0&quot;&#125;[10s]</code></pre>]]></content>
    
    
    <summary type="html">本篇介绍了Prometheus的部署及Prometheus的metrics类型和PromQL语法</summary>
    
    
    
    <category term="监控" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://lukme.top/categories/%E7%9B%91%E6%8E%A7/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://lukme.top/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>14.基于kafka的日志收集</title>
    <link href="https://lukme.top/posts/b922fe1d.html"/>
    <id>https://lukme.top/posts/b922fe1d.html</id>
    <published>2024-10-30T02:46:01.000Z</published>
    <updated>2024-10-30T04:02:48.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="filebeat写入数据到kafka集群">filebeat写入数据到kafka集群</h2><p><strong>1. 创建topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-topics.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic linux-study.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@elk01:5 ~]# kafka-topics.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --describe</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030003043850.png" alt="image-20241030003043850"></p><p><strong>2. filebeat写入数据到kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/filebeat/20-filebeat-to-kafka.yaml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">  - <span class="built_in">type</span>: filestream</span><br><span class="line">    paths:</span><br><span class="line">      - /opt/access.log*</span><br><span class="line">  </span><br><span class="line">output.kafka:</span><br><span class="line">  <span class="comment"># 指定kafka集群地址</span></span><br><span class="line">  hosts: [<span class="string">&quot;10.0.0.211:9092&quot;</span>, <span class="string">&quot;10.0.0.212:9092&quot;</span>, <span class="string">&quot;10.0.0.213:9092&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 指定写入的topic地址</span></span><br><span class="line">  topic: <span class="string">&#x27;linux-study&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动filebeat实例</span></span><br><span class="line">[root@elk01:0 ~]# filebeat -e -c /etc/filebeat/20-filebeat-to-kafka.yaml</span><br></pre></td></tr></table></figure><p><strong>3. kafka节点测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]#  kafka-console-consumer.sh --bootstrap-server 10.0.0.212:9092 --topic linux-study --from-beginning --group filebeat01</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030004427518.png" alt="image-20241030004427518"></p><h2 id="logstash从kafka集群读取数据">logstash从kafka集群读取数据</h2><p>**1.编写logstash实例 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># elasticsearch&#123;</span></span><br><span class="line"> <span class="comment">#    hosts =&gt; [&quot;10.0.0.91:9200&quot;,&quot;10.0.0.92:9200&quot;,&quot;10.0.0.93:9200&quot;]</span></span><br><span class="line"> <span class="comment">#    index =&gt; &quot;oldboyedu-kafka-elk-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"> <span class="comment">#    user =&gt; &quot;elastic&quot;</span></span><br><span class="line"> <span class="comment">#    password =&gt; &quot;123456&quot;</span></span><br><span class="line"> <span class="comment">#  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 启动logstash实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# logstash -rf /etc/logstash/conf.d/17-kafka-to-logstash.conf </span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T17:05:27.448Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;&#123;\&quot;@timestamp\&quot;:\&quot;2024-10-29T16:39:24.279Z\&quot;,\&quot;@metadata\&quot;:&#123;\&quot;beat\&quot;:\&quot;filebeat\&quot;,\&quot;type\&quot;:\&quot;_doc\&quot;,\&quot;version\&quot;:\&quot;7.17.23\&quot;&#125;,\&quot;log\&quot;:&#123;\&quot;offset\&quot;:20478,\&quot;file\&quot;:&#123;\&quot;path\&quot;:\&quot;/opt/access.log\&quot;&#125;&#125;,\&quot;message\&quot;:\&quot;109.110.162.51 - - [04/Oct/2024:10:00:41 +0800] \\\&quot;GET / HTTP/1.1\\\&quot; 304 0 \\\&quot;-\\\&quot; \\\&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1 Edg/129.0.0.0\\\&quot;\&quot;,\&quot;input\&quot;:&#123;\&quot;type\&quot;:\&quot;filestream\&quot;&#125;,\&quot;ecs\&quot;:&#123;\&quot;version\&quot;:\&quot;1.12.0\&quot;&#125;,\&quot;host\&quot;:&#123;\&quot;name\&quot;:\&quot;elk01\&quot;&#125;,\&quot;agent\&quot;:&#123;\&quot;id\&quot;:\&quot;0f020f85-7619-4e85-83ae-346d91b5ca57\&quot;,\&quot;name\&quot;:\&quot;elk01\&quot;,\&quot;type\&quot;:\&quot;filebeat\&quot;,\&quot;version\&quot;:\&quot;7.17.23\&quot;,\&quot;hostname\&quot;:\&quot;elk01\&quot;,\&quot;ephemeral_id\&quot;:\&quot;ed96638d-32ee-4ee0-afbb-504643c3d52a\&quot;&#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030010834508.png" alt="image-20241030010834508"></p><p><strong>3. 优化logstash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#对message字段进行json格式化</span></span><br><span class="line">filter &#123;</span><br><span class="line">  json &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;message&quot;</span></span><br><span class="line">    <span class="comment">#移除不需要的字段，不然像下面一样出现很多没有价值的字段</span></span><br><span class="line">   <span class="comment"># remove_field =&gt; [ &quot;input&quot;,&quot;host&quot;,&quot;agent&quot;,&quot;@version&quot;,&quot;log&quot;, &quot;ecs&quot; ]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果展示</span></span><br><span class="line"></span><br><span class="line">         <span class="string">&quot;agent&quot;</span> =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hostname&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span>,</span><br><span class="line">             <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;7.17.23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ephemeral_id&quot;</span> =&gt; <span class="string">&quot;9a1e6795-8fe4-476b-ba6b-9d91b41f282c&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;1b86f9d4-c41a-4c30-8b3c-c921ed07d026&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">         <span class="string">&quot;input&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filestream&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T16:40:45.156Z,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;elk01&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">           <span class="string">&quot;ecs&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;1.12.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">           <span class="string">&quot;log&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;offset&quot;</span> =&gt; 27088,</span><br><span class="line">          <span class="string">&quot;file&quot;</span> =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/opt/access.log&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#移除字段后展示</span></span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2024-10-29T16:40:45.156Z,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;150.109.253.34 - - [04/Oct/2024:10:01:27 +0800] \&quot;GET /app HTTP/1.1\&quot; 404 197 \&quot;-\&quot; \&quot;Mozilla/5.0 (Linux; Android 8.0.0; SM-G955U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36 Edg/129.0.0.0\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>4. 正常操作优化,并输出到es集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/17-kafka-to-logstash.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    <span class="comment"># 指定kafka集群的地址</span></span><br><span class="line">    bootstrap_servers =&gt; <span class="string">&quot;10.0.0.211:9092,10.0.0.212:9092,10.0.0.213:9092&quot;</span></span><br><span class="line">    <span class="comment"># 指定topic列表</span></span><br><span class="line">    topics =&gt; [<span class="string">&quot;linux-study&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定消费者组  (每次启动logstash，都需要换个组，因为同一个组的采集了不会再次采集，你也可以不用这个)</span></span><br><span class="line">    group_id =&gt; [<span class="string">&quot;filebeat01&quot;</span>]</span><br><span class="line">    <span class="comment"># 指定从offset开始读取数据的位置，earliest表示最早的数据开始读，latest表示从最新的位置读取。</span></span><br><span class="line">    auto_offset_reset =&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#对message字段进行json格式化</span></span><br><span class="line">filter &#123;</span><br><span class="line">  json &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;message&quot;</span></span><br><span class="line">    <span class="comment">#移除不需要的字段</span></span><br><span class="line">    remove_field =&gt; [ <span class="string">&quot;input&quot;</span>,<span class="string">&quot;host&quot;</span>,<span class="string">&quot;agent&quot;</span>,<span class="string">&quot;@version&quot;</span>,<span class="string">&quot;log&quot;</span>, <span class="string">&quot;ecs&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 基于正则匹配任意文本，grok内置了120种匹配模式</span></span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;HTTPD_COMBINEDLOG&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  useragent &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;agent&quot;</span></span><br><span class="line">    target =&gt; <span class="string">&quot;agent-kind&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  geoip &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">&quot;clientip&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">date</span> &#123;</span><br><span class="line">    match =&gt; [ <span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  elasticsearch&#123;</span><br><span class="line">     hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">     index =&gt; <span class="string">&quot;kafka-elk-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">     user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">     password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241030013045764.png" alt="image-20241030013045764"></p>]]></content>
    
    
    <summary type="html">本章介绍了基于ELFK架构+kafka收集日志处理</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>13.使用supervisor管理服务</title>
    <link href="https://lukme.top/posts/1267bcfa.html"/>
    <id>https://lukme.top/posts/1267bcfa.html</id>
    <published>2024-10-30T02:45:01.000Z</published>
    <updated>2024-10-30T04:02:43.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用supervisor管理服务">使用supervisor管理服务</h2><p><strong>1. 下载supervisor</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]#  apt -y install supervisor</span><br></pre></td></tr></table></figure><p><strong>2. 启动服务并设置开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk02:0 ~]#  systemctl start supervisor</span><br><span class="line">[root@elk02:0 ~]#  systemctl <span class="built_in">enable</span> supervisor</span><br></pre></td></tr></table></figure><p><strong>3.修改supervisor配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# vim /etc/supervisor/supervisord.conf</span><br><span class="line">···</span><br><span class="line"><span class="comment"># 以后需要配置的服务只需要放在/etc/supervisor/下，以.ini结尾的都可被supervisor管理</span></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/*.ini</span><br></pre></td></tr></table></figure><p><strong>4.编辑ini配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/supervisor/zk.ini </span><br><span class="line">[program:zookeeper]</span><br><span class="line"><span class="built_in">command</span>=/app/zookeeper/bin/zkServer.sh start-foreground</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stderr_logfile=/var/log/zookeeper.err.log</span><br><span class="line">stdout_logfile=/var/log/zookeeper.out.log</span><br><span class="line">user=root</span><br><span class="line">priority=1</span><br><span class="line">environment=JAVA_HOME=<span class="string">&quot;/usr/share/elasticsearch/jdk/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意修改zookeeper的安装路径，以及javahome路径   （使用  echo $JAVA_HOME 查看java环境 ）</span></span><br><span class="line">[root@elk01:2 ~]# <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/usr/share/elasticsearch/jdk</span><br></pre></td></tr></table></figure><p><strong>5. 更新supervisor配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# supervisorctl update</span><br><span class="line"></span><br><span class="line">注意：每次跟新服务配置都需要update</span><br></pre></td></tr></table></figure><p><strong>6.supervisor管理命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl start zookeeper</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl stop zookeeper</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动或者停止所有服务</span></span><br><span class="line">[root@elk01:2 ~]# supervisorctl start/stop all</span><br><span class="line"></span><br><span class="line">友情提示：</span><br><span class="line">  如果你的zookeeper是使用zkServer.sh start 启动的，要先使用zkServer.sh stop关闭服务，不能使用zkServer启动服务，使用supervisor去关闭服务</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍了使用supervisor统一管理zookeeper和kafka，相比systemd管理更加方便</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>12.kafka的脚本管理及数据延迟、丢失分析</title>
    <link href="https://lukme.top/posts/70dc5443.html"/>
    <id>https://lukme.top/posts/70dc5443.html</id>
    <published>2024-10-30T02:44:01.000Z</published>
    <updated>2024-10-30T04:02:38.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka的脚本管理">kafka的脚本管理</h2><h3 id="topic管理">topic管理</h3><p><strong>1.查看topic列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --list </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**2.创建topic **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic luay.</span><br><span class="line"></span><br><span class="line"><span class="comment">#注释：</span></span><br><span class="line">--topic  luay           <span class="comment">#指定topic为luay</span></span><br><span class="line">--partitions 3          <span class="comment">#创建3个分区</span></span><br><span class="line">--replication-factor 2  <span class="comment">#创建2个副本</span></span><br><span class="line">--create                <span class="comment">#动作--创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#其它选项</span></span><br><span class="line">--delete                <span class="comment">#删除</span></span><br><span class="line">--alter                 <span class="comment">#修改</span></span><br><span class="line">--describe              <span class="comment">#输出详细信息</span></span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029180717295.png" alt="image-20241029180717295"></p><p><strong>3.修改分区数量【只能由小变大，不能由大变小】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --partitions 5 --alter</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029180957289.png" alt="image-20241029180957289"></p><p><strong>4.查看指定topic的详细信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --describe</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029181157071.png" alt="image-20241029181157071"></p><p><strong>5.删除topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# kafka-topics.sh kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic luay --delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#kafka数据目录里topic会被标记-delete，等待一会便会自动删除</span></span><br><span class="line">[root@elk01:1 ~]# ll /app/data/kafka/</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 29 18:15 luay-1.2baa4b610f314befbfbed58aaad84052-delete/</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 29 18:15 luay-2.0f44f4821a1849ccb7e0e37e1fe65ff4-delete/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="producer管理">producer管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt;999999</span><br><span class="line">[2024-10-29 20:49:30,357] WARN [Producer clientId=console-producer] Error <span class="keyword">while</span> fetching metadata with correlation <span class="built_in">id</span> 7 : &#123;<span class="built_in">test</span>=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class="line"></span><br><span class="line"><span class="comment">#首次写入时，若topic不存在，则kafka集群默认会自动创建。</span></span><br><span class="line">[root@elk02:1 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --list</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="kafka的consumer管理">kafka的consumer管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生产者发送消息</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt;12112112</span><br><span class="line">&gt;666666</span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者接收消息---接收现在开始的消息</span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span></span><br><span class="line">666666</span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者接收消息---从头接收消息    --from-beginning </span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic <span class="built_in">test</span> --from-beginning </span><br><span class="line">999999</span><br><span class="line">12112112</span><br><span class="line">666666</span><br></pre></td></tr></table></figure><h2 id="消费者组理念">消费者组理念</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- kafka的消费者组概念</span><br><span class="line">1.kafka的offset存储位置</span><br><span class="line">kafka早期版本 0.9-版本，offset记录存储在zookeeper集群。</span><br><span class="line">从kafka 0.10+版本，默认的offset存储在kafka集群，存储在一个名为<span class="string">&quot;__consumer_offsets&quot;</span>内置的topic。(当消费者出现宕机，当前当前组里的其它消费者会从_consumer_offsets记录的偏移量里，找到已经取到哪里的数据，从此点继续往后取数据，而不是从新取所有数据，避免数据重复采集)</span><br><span class="line"></span><br><span class="line">2.相关术语</span><br><span class="line">consumer group：    消费者组，任意一个消费者都隶属于一个消费者组。</span><br><span class="line"></span><br><span class="line">1.而<span class="string">&quot;__consumer_offsets&quot;</span>内置的topic记录的偏移量并不属于某个消费者，而是基于消费者进行记录的。</span><br><span class="line">2.当消费者组的消费者数量发生变化时，会触发重平衡(Rebalance);</span><br><span class="line">  1.比如消费者组的消费者（C1/C2）新增或者下线，所谓的重平衡指的是该消费者组的消费者重新分配分区（0分区,1分区,2分区过程。</span><br><span class="line">  2.该消费者组若新增了消费者，也会触发重平衡;</span><br><span class="line">  3.当消费者组的数量多余partition数量时，则会导致该消费者组有空闲的消费者;（假设5个消费者，但是只有3个分区)</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/consumer_group.png" alt="consumer_group"></p><h2 id="kafka消费者组数据延迟分析">kafka消费者组数据延迟分析</h2><p>由图解，kafka的消费者是logstash，怎么会出现数据延迟呢？</p><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/ElasticStack_MQ.png" alt="ElasticStack_MQ"></p><blockquote><p>当生产者过多，logstash忙不过来时候收集，就会出现数据延迟可能</p></blockquote><p>理论存在，分析实践</p><p><strong>1. 查看现有的消费者组列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --list</span><br><span class="line">console-consumer-10558</span><br><span class="line">console-consumer-73547</span><br><span class="line">console-consumer-4558</span><br></pre></td></tr></table></figure><p><strong>2.创建topic指定分区和副本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03:0 ~]# kafka-topics.sh --bootstrap-server 10.0.0.211:9092 --topic new --partitions 3 --replication-factor 2 --create</span><br><span class="line">Created topic new.</span><br></pre></td></tr></table></figure><p><strong>3.启动生产者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999</span><br></pre></td></tr></table></figure><p><strong>4.启动消费者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 启动第一个消费者，指定消费者组</span></span><br><span class="line">[root@elk01:4 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic new --from-beginning --group dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看消费者列表</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --list</span><br><span class="line">dev</span><br><span class="line">console-consumer-10558</span><br><span class="line">console-consumer-73547</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看指定消费者的详细信息</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --group dev --describe</span><br><span class="line">GROUP           TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG</span><br><span class="line">dev             new             0          0               0               0  </span><br><span class="line">dev             new             1          0               0               0  </span><br><span class="line">dev             new             2          1               0               0  </span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029224849054.png" alt="image-20241029224849054"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.生产者继续写入测试数据</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999999</span><br><span class="line">&gt;aaaaaaaa</span><br><span class="line">&gt;vbbbbbb</span><br><span class="line">&gt;ccccc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 启动新的消费者</span></span><br><span class="line">[root@elk02:1 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.211:9092 --topic new --from-beginning --group dev</span><br><span class="line"></span><br><span class="line">此时没有新的数据，因为被同一个组（dev）的第一个消费者已经采集过了</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 写入测试数据</span></span><br><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;999999999</span><br><span class="line">&gt;aaaaaaaa</span><br><span class="line">&gt;vbbbbbb</span><br><span class="line">&gt;ccccc</span><br><span class="line">&gt;9999999999</span><br><span class="line">&gt;69696969696</span><br></pre></td></tr></table></figure><p><strong>停止所有消费者，只写入数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:5 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.211:9092 --topic new</span><br><span class="line">&gt;h</span><br><span class="line">&gt;h</span><br><span class="line">&gt;asasasasasasas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看详细数据</span></span><br><span class="line">[root@elk03:0 ~]# kafka-consumer-groups.sh --bootstrap-server  10.0.0.211:9092 --group dev --describe</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241029230457830.png" alt="image-20241029230457830"></p><h2 id="kafka数据丢失分析">kafka数据丢失分析</h2><blockquote><p>见图解</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kafka的ISR列表导致数据丢失的原因：</span><br><span class="line">ISR:</span><br><span class="line">和leader副本同步的所有副本集合。</span><br><span class="line">OSR:</span><br><span class="line">和leader副本不同步所有副本集合。</span><br><span class="line">AR:</span><br><span class="line">所有副本，指的是leader  + follower，即AR = ISR + OSR </span><br><span class="line">LEO:</span><br><span class="line">英文全称为: LOG-END-OFFSET，表示每个partition最后一个Offset。</span><br><span class="line">HW:</span><br><span class="line">表示在ISR列表中所有LEO中最小的LEO。</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/kafka-ISR.png" alt="kafka-ISR"></p>]]></content>
    
    
    <summary type="html">本章介绍了Kafka的生产者和消费者如何发起数据和收集数据，并且分析数据延迟</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>11.kafka介绍及部署</title>
    <link href="https://lukme.top/posts/35ea5361.html"/>
    <id>https://lukme.top/posts/35ea5361.html</id>
    <published>2024-10-30T02:43:01.000Z</published>
    <updated>2024-11-17T16:05:52.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka介绍">kafka介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Kafka 被称为下一代分布式消息系统，由 Scala 和 Java编写，是非营利性组织ASF(Apache Software Foundation)基金会中的一个开源项目，比如:HTTP Server、Tomcat、Hadoop、ActiveMQ等开源软件都属于 Apache基金会的开源软件，类似的消息系统还有RabbitMQ、ActiveMQ、ZeroMQ。</span><br><span class="line">Kafka用于构建实时数据管道和流应用程序。 它具有水平可伸缩性，容错性，快速性，可在数千家组织中同时投入生产协同工作。</span><br></pre></td></tr></table></figure><h2 id="kafka常见术语">kafka常见术语</h2><p>:dango:  <strong>1.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- topic:</span><br><span class="line">表示是主题，对应是逻辑存储单元，一般用于区分业务类型。可以和ES的索引对应。</span><br><span class="line">- partition</span><br><span class="line">分区，一个topic对应一个或多个partition。</span><br><span class="line">- replica:</span><br><span class="line">是数据的实际载体，真正存储数据的资源，分为leader和follower，其中leader对外提供读写，而follower负责数据的同步。</span><br><span class="line">- producer:</span><br><span class="line">生产者，往kafka集群写数据的一方。</span><br><span class="line">- consumer:</span><br><span class="line">消费者，从kafka读取数据的一方。</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/topic.png" alt="topic"></p><blockquote><p>读取数据只能去leader读取，follow值负责同步数据</p></blockquote><p>:dango:<strong>2. 角色介绍</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">（1）Producer：Producer即生产者，消息的产生者，是消息的入口。负责发布消息到Kafka broker</span><br><span class="line">（2）Consumer：消费者，用于消费消息，即处理消息</span><br><span class="line"></span><br><span class="line">Broker：Broker是kafka实例，每个服务器上可以有一个或多个kafka的实例，假设每个broker对应一台服务器。每个kafka集群内的broker都有一个不重复的编号，如: broker-0、broker-1等……</span><br><span class="line"></span><br><span class="line">（3）Topic ：消息的主题，可以理解为消息的分类，一个Topic相当于数据库中的一张表,一条消息相当于关系数据库的一条记录，一个Topic或者相当于Redis中列表类型的一个Key，一条消息即为列表中的一个元素。kafka的数据就保存在topic。在每个broker上都可以创建多个topic。物理上不同 topic 的消息分开存储在不同的文件夹，逻辑上一个 topic的消息虽然保存于一个或多个broker 上, 但用户只需指定消息的topic即可生产或消费数据而不必关心数据存于何处，topic 在逻辑上对record(记录、日志)进行分组保存，消费者需要订阅相应的topic 才能消费topic中的消息</span><br><span class="line"></span><br><span class="line">（4）Consumer group: 每个consumer 属于一个特定的consumer group（可为每个consumer 指定 group name，若不指定 group name 则属于默认的group），同一topic的一条消息只能被同一个consumer group 内的一个consumer 消费，类似于一对一的单播机制，但多个consumer group 可同时消费这一消息，类似于一对多的多播机制</span><br><span class="line"></span><br><span class="line">（5）Partition ：是物理上的概念，每个topic 分割为一个或多个partition，即一个topic切分为多份.创建 topic时可指定 partition 数量，partition的表现形式就是一个一个的文件夹,该文件夹下存储该partition的数据和索引文件，分区的作用还可以实现负载均衡，提高kafka的吞吐量。同一个topic在不同的分区的数据是不重复的,一般Partition数不要超过节点数，注意同一个partition数据是有顺序的，但不同的partition则是无序的</span><br><span class="line"></span><br><span class="line">（6）Replication: 同样数据的副本，包括leader和follower的副本数,基本于数据安全,建议至少2个,是Kafka的高可靠性的保障，和ES的副本有所不同，Kafka中的副本数包括主分片数,而ES中的副本数不包括主分片数</span><br><span class="line"></span><br><span class="line">为了实现数据的高可用，比如将分区 0 的数据分散到不同的kafka 节点，每一个分区都有一个 broker 作为 Leader 和一个 broker 作为Follower，类似于ES中的主分片和副本分片。</span><br><span class="line"></span><br><span class="line">假设分区为 3, 即分三个分区0-2，副本为3，即每个分区都有一个 leader，再加两个follower，分区 0 的leader为服务器A，则服务器 B 和服务器 C 为 A 的follower，而分区 1 的leader为服务器B，则服务器 A 和C 为服务器B 的follower，而分区 2 的leader 为C，则服务器A 和 B 为C 的follower。</span><br><span class="line"></span><br><span class="line">AR： Assigned Replicas，分区中的所有副本的统称，包括leader和 follower，AR= lSR+ OSR</span><br><span class="line">lSR：<span class="built_in">ln</span> Sync Replicas，所有与leader副本保持同步的副本 follower和leader本身组成的集合，包括leader和 follower，是AR的子集</span><br><span class="line">OSR：out-of-Sync Replied，所有与leader副本同步不能同步的 follower的集合，是AR的子集</span><br></pre></td></tr></table></figure><p>:dango: 3. 分区和副本的优势</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实现存储空间的横向扩容，即将多个kafka服务器的空间组合利用</span><br><span class="line">提升性能，多服务器并行读写</span><br><span class="line">实现高可用，每个分区都有一个主分区即 leader 分布在不同的kafka 服务器，并且有对应follower 分布在和leader不同的服务器上</span><br></pre></td></tr></table></figure><p>:dango: <strong>4. kafka写入消息流程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">生产者（producter）先从kafka集群获取分区的leader</span><br><span class="line">生产者（producter）将消息发送给leader</span><br><span class="line">leader将消息写入本地文件</span><br><span class="line">followers从leader pull消息</span><br><span class="line">followers将消息写入本地后向leader发送ACK</span><br><span class="line">leader收到所有副本的ACK后向producter发送ACK</span><br></pre></td></tr></table></figure><p>:dango:  <strong>5. kafka特点和优势</strong></p><blockquote><p><code>特点：</code><br>分布式: 多机实现,不允许单机<br>分区: 一个消息.可以拆分出多个，分别存储在多个位置<br>多副本: 防止信息丢失，可以多来几个备份<br>多订阅者: 可以有很多应用连接kafka<br>Zookeeper: 早期版本的Kafka依赖于zookeeper， 2021年4月19日Kafka 2.8.0正式发布，此版本包括了很多重要改动，最主要的是kafka通过自我管理的仲裁来替代ZooKeeper，即Kafka将不再需要ZooKeeper！！！</p></blockquote><blockquote><p><code>优势：</code><br>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。支持通过Kafka 服务器分区消息。<br>分布式： Kafka 基于分布式集群实现高可用的容错机制，可以实现自动的故障转移。<br>顺序保证：在大多数使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。 Kafka保证一个Partiton内的消息的有序性（分区间数据是无序的，如果对数据的顺序有要求，应将在创建主题时将分区数partitions设置为1）。<br>支持 Hadoop 并行数据加载。<br>通常用于大数据场合,传递单条消息比较大，而Rabbitmq 消息主要是传输业务的指令数据,单条数据较小。</p></blockquote><h2 id="单点部署kafka">单点部署kafka</h2><p><strong>1.下载kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]#wget https://downloads.apache.org/kafka/3.8.0/kafka_2.13-3.8.0.tgz</span><br></pre></td></tr></table></figure><p><strong>2.解压kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# tar xf kafka_2.13-3.8.0.tgz -C /app/</span><br></pre></td></tr></table></figure><p><strong>3.修改kafka的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# vim /app/kafka_2.13-3.8.0/config/server.properties </span><br><span class="line">···</span><br><span class="line"><span class="comment"># 修改kafka的broker的ID信息</span></span><br><span class="line">broker.id=211</span><br><span class="line"><span class="comment"># 修改数据目录</span></span><br><span class="line">log.dirs=/app/data/kafka</span><br><span class="line"><span class="comment"># 修改元数据存储zookeeper集群地址</span></span><br><span class="line">zookeeper.connect=10.0.0.211:2181,10.0.0.212:2181,10.0.0.213:2181/kafka380</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;注释：&#x27;</span></span><br><span class="line">/kafka380   是将以后的znode都放在kafka380下，不指定则默认都在zookeeper的 / 下</span><br></pre></td></tr></table></figure><p><strong>4.配置环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# <span class="built_in">cat</span>  /etc/profile.d/kafka.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/app/kafka_2.13-3.8.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$KAFKA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载环境变量</span></span><br><span class="line">[root@elk01:4 ~]# <span class="built_in">source</span> /etc/profile.d/kafka.sh </span><br></pre></td></tr></table></figure><p><strong>5.启动kafka节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:4 ~]# kafka-server-start.sh -daemon <span class="variable">$KAFKA_HOME</span>/config/server.properties</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241029000747486.png" alt="image-20241029000747486"></p><h2 id="kafka配置文件详解">kafka配置文件详解</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This configuration file is intended for use in ZK-based mode, where Apache ZooKeeper is required.</span></span><br><span class="line"><span class="comment"># See kafka.server.KafkaConfig for additional details and defaults</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Server Basics #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># broker 的全局唯一编号，不能重复，只能是数字。</span></span><br><span class="line">broker.id=0</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Socket Server Settings #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 套接字服务器侦听的地址。如果未配置，主机名将等于的值</span></span><br><span class="line"><span class="comment"># java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.</span></span><br><span class="line"><span class="comment">#   FORMAT:</span></span><br><span class="line"><span class="comment">#     listeners = listener_name://host_name:port</span></span><br><span class="line"><span class="comment">#   EXAMPLE:</span></span><br><span class="line"><span class="comment">#     listeners = PLAINTEXT://your.host.name:9092</span></span><br><span class="line"><span class="comment">#listeners=PLAINTEXT://:9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侦听器名称、主机名和代理将向客户端公布的端口。</span></span><br><span class="line"><span class="comment"># 如果未设置，则使用“listeners”的值。</span></span><br><span class="line"><span class="comment">#advertised.listeners=PLAINTEXT://your.host.name:9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将侦听器名称映射到安全协议，默认情况下它们是相同的。有关更多详细信息，请参阅配置文档</span></span><br><span class="line"><span class="comment">#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理网络请求的线程数量(服务器用于从网络接收请求并向网络发送响应的线程数)</span></span><br><span class="line">num.network.threads=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来处理磁盘 IO 的线程数量</span></span><br><span class="line">num.io.threads=8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送套接字的缓冲区大小</span></span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收套接字的缓冲区大小</span></span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求套接字的缓冲区最大大小</span></span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Basics #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kafka 运行日志(数据)存放的路径,路径不需要提前创建,kafka 自动帮你创建,可以配置多个磁盘路径,路径与路径之间可以用&quot;,&quot;分隔</span></span><br><span class="line">log.dirs=/usr/kafka/kafka_2.13-3.6.1/datas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个topic在当前 broker上的默认分区数。更多的分区允许更大的并行性以供使用，但这也会导致代理之间有更多的文件。</span></span><br><span class="line">num.partitions=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动时用于日志恢复和关闭时用于刷新的每个数据目录的线程数。(用来恢复和清理 data 下数据的线程数量)对于数据目录位于RAID阵列中的安装，建议增加此值。</span></span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Internal Topic Settings  #############################</span></span><br><span class="line"><span class="comment"># 每个 topic 创建时的副本数，默认时 1 个副本,对于开发测试以外的环境，建议使用大于1的值以确保可用性，如3</span></span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Flush Policy #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Messages are immediately written to the filesystem but by default we only fsync() to sync</span></span><br><span class="line"><span class="comment"># the OS cache lazily. The following configurations control the flush of data to disk.</span></span><br><span class="line"><span class="comment"># There are a few important trade-offs here:</span></span><br><span class="line"><span class="comment">#    1. Durability: Unflushed data may be lost if you are not using replication.</span></span><br><span class="line"><span class="comment">#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.</span></span><br><span class="line"><span class="comment">#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.</span></span><br><span class="line"><span class="comment"># The settings below allow one to configure the flush policy to flush data after a period of time or</span></span><br><span class="line"><span class="comment"># every N messages (or both). This can be done globally and overridden on a per-topic basis.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制将数据刷新到磁盘之前要接受的消息数</span></span><br><span class="line"><span class="comment">#log.flush.interval.messages=10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在强制刷新之前，消息可以在日志中停留的最长时间</span></span><br><span class="line"><span class="comment">#log.flush.interval.ms=1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Retention Policy #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following configurations control the disposal of log segments. The policy can</span></span><br><span class="line"><span class="comment"># be set to delete segments after a period of time, or after a given size has accumulated.</span></span><br><span class="line"><span class="comment"># A segment will be deleted whenever *either* of these criteria are met. Deletion always happens</span></span><br><span class="line"><span class="comment"># from the end of the log.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># segment 文件保留的最长时间，超时将被删除</span></span><br><span class="line">log.retention.hours=168</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于大小的日志保留策略。除非剩余的</span></span><br><span class="line"><span class="comment"># segments下降到 log.retention.bytes 以下。独立于log.retention.hours的函数.</span></span><br><span class="line"><span class="comment">#log.retention.bytes=1073741824</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个 segment 文件的最大大小，默认最大 1G ，当达到此大小时，将创建一个新的segment。</span></span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查日志段以查看是否可以根据保留策略删除它们的间隔(检查过期数据的时间，默认 5 分钟检查一次是否数据过期)</span></span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Zookeeper #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Zookeeper集群连接字符串,一个以逗号分隔的&#x27;主机:端口&#x27;对，每个对对应一个zk服务器。可以在url中附加一个可选的chroot字符串，以指定所有kafka-znode的根目录。</span></span><br><span class="line">zookeeper.connect=10.0.0.211:2181,10.0.0.212:2181,10.0.0.213:2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到zookeeper 的超时时间（毫秒）</span></span><br><span class="line">zookeeper.connection.timeout.ms=18000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Group Coordinator Settings #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下配置指定GroupCoordinator将延迟初始使用者重新平衡的时间（以毫秒为单位）。</span></span><br><span class="line"><span class="comment"># 随着新成员加入组，再平衡将进一步延迟group.initial.rebalance.delay.ms的值，最大值为max.poll.interval.ms。</span></span><br><span class="line"><span class="comment"># 默认值为3秒。</span></span><br><span class="line"><span class="comment"># 我们在这里将其覆盖为0，因为它为开发和测试提供了更好的开箱即用体验。</span></span><br><span class="line"><span class="comment"># 但是，在生产环境中，默认值3秒更合适，因为这将有助于避免在应用程序启动期间进行不必要的、可能代价高昂的重新平衡。</span></span><br><span class="line">group.initial.rebalance.delay.ms=3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署kafka集群">部署kafka集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重复单点部署的1-6步骤，不过需要注意的是，配置文件的broker.id=211/212/213  根据你的ip后尾自行修改(三个节点不相同，且为正整数就行)</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示：三个  节点做hosts解析,将主机名解析到你的ip上，巨坑，一开始忘记反向解析这个问题了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk211 ~]# <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">10.0.0.211 elk01</span></span><br><span class="line"><span class="string">10.0.0.212 elk02</span></span><br><span class="line"><span class="string">10.0.0.213 elk03</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241029185857776.png" alt="image-20241029185857776"></p><p>以此为戒。。。。。。巨坑</p></blockquote><p><img src="https://cos.lukme.top/Pic/image-20241029002841827.png" alt="image-20241029002841827"></p><blockquote><p>我们配置文件里没有指定每个kafka的地址，那它们是如何找到彼此的呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:4 ~]# grep -Ev <span class="string">&#x27;^#|^$&#x27;</span> /app/kafka_2.13-3.8.0/config/server.properties </span><br><span class="line">broker.id=211</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/app/data/kafka</span><br><span class="line">num.partitions=1</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=10.0.0.211:2181,10.0.0.212:2181,10.0.0.213:2181/kafka380</span><br><span class="line">zookeeper.connection.timeout.ms=18000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><p><font color=red>kafka通过连接zookeeper，去找到各个kafka</font></p></blockquote>]]></content>
    
    
    <summary type="html">本章介绍了Kafka的作用,优势,角色以及如何部署kafka集群</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>10.zookeeper的图形化管理</title>
    <link href="https://lukme.top/posts/da2b0f43.html"/>
    <id>https://lukme.top/posts/da2b0f43.html</id>
    <published>2024-10-30T02:42:01.000Z</published>
    <updated>2024-10-30T04:02:29.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zookeeper的类型">zookeeper的类型</h2><ol><li>临时znode类型</li></ol><p>当客户端会话断开连接，若在规定时间(默认是30s)内没有重新连接则该客户端创建的所有znode都会被删除。</p><ol start="2"><li>永久znode</li></ol><p>当客户端会话断开连接，znode不会被删除。</p><blockquote><p>默认创建的znode都是永久的，如果想要创建临时znode，则需要指定&quot;-e&quot;参数。</p></blockquote><p><strong>验证测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看znode状态信息</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] <span class="built_in">stat</span> /luay</span><br><span class="line">cZxid = 0x400000002</span><br><span class="line">ctime = Mon Oct 28 13:09:07 UTC 2024</span><br><span class="line">mZxid = 0x40000000e</span><br><span class="line">mtime = Mon Oct 28 13:11:34 UTC 2024</span><br><span class="line">pZxid = 0x40000000b</span><br><span class="line">cversion = 5</span><br><span class="line">dataVersion = 3</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#临时创建znode</span></span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create -e /abc</span><br><span class="line">Created /abc</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] <span class="built_in">stat</span> /abc</span><br><span class="line">cZxid = 0xf00000002</span><br><span class="line">ctime = Mon Oct 28 14:23:04 UTC 2024</span><br><span class="line">mZxid = 0xf00000002</span><br><span class="line">mtime = Mon Oct 28 14:23:04 UTC 2024</span><br><span class="line">pZxid = 0xf00000002</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0xd500028c8caa0000</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line">`注意：ephemeralOwner这一行，不是和上面永久znode状态一样，上面永久的是0x0`</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出连接等待30s再次连接查看--没了</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;重新建立链接，默认30s后数据就自动删除！&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="zookeeper的JVM调优">zookeeper的JVM调优</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.zookeeper的堆内存调优思路（这里调试128m测试）</span><br><span class="line">生成环境中，建议配置2GB-4GB即可。默认是1GB。</span><br><span class="line"></span><br><span class="line">2.查看默认的堆内存大小</span><br><span class="line">[root@elk03:1 ~]#  ps -ef | grep zookeeper | grep -i xmx</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241028223011825.png" alt="image-20241028223011825"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">3.修改官方的环境变量脚本</span><br><span class="line">[root@elk03:1 ~]# <span class="built_in">cat</span> /app/zookeeper/bin/zkEnv.sh </span><br><span class="line">···</span><br><span class="line"><span class="comment"># default heap for zookeeper server</span></span><br><span class="line">ZK_SERVER_HEAP=<span class="string">&quot;<span class="variable">$&#123;ZK_SERVER_HEAP:-128&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default heap for zookeeper client</span></span><br><span class="line">ZK_CLIENT_HEAP=<span class="string">&quot;<span class="variable">$&#123;ZK_CLIENT_HEAP:-128&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">4. 同步到其它节点</span><br><span class="line">[root@elk03 ~]# scp /app/zookeeper/bin/zkEnv.sh 10.0.0.211:/app/zookeeper/bin/  </span><br><span class="line">[root@elk03 ~]# scp /app/zookeeper/bin/zkEnv.sh 10.0.0.212:/app/zookeeper/bin/</span><br><span class="line"></span><br><span class="line">5.重启zookeeper集群（所有节点）</span><br><span class="line">[root@elk03:1 ~]# zkServer.sh restart</span><br><span class="line"></span><br><span class="line">6.再次查看占用内存大小</span><br><span class="line">[root@elk03 ~]# ps -ef | grep zookeeper | grep -i xmx</span><br></pre></td></tr></table></figure><h2 id="zookeeper的图形化管理">zookeeper的图形化管理</h2><p><strong>了解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#依赖1.8版本jdk</span></span><br><span class="line">https://github.com/zhitom/zkweb/releases/download/zkWeb-v1.2.1/zkWeb-v1.2.1.jar</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.解压jdk</span><br><span class="line">[root@elk01 ~]#tar xf jdk-8u291-linux-x64.tar.gz -C /app/</span><br><span class="line"></span><br><span class="line">2.前台启动zkweb</span><br><span class="line">[root@elk01 ~]# /app/jdk1.8.0_291/bin/java -jar /app/zkWeb-v1.2.1.jar </span><br><span class="line"></span><br><span class="line">后台启动：</span><br><span class="line">[root@elk01 ~]# <span class="built_in">nohup</span> /app/jdk1.8.0_291/bin/java -jar /app/zkWeb-v1.2.1.jar &amp;&gt; /tmp/zkweb.log</span><br><span class="line"></span><br><span class="line">3.浏览器访问</span><br><span class="line">10.0.0.211:8099/</span><br></pre></td></tr></table></figure><blockquote><p>注：多个节点直接以   ,  分开  10.0.0.211:2181,10.0.0.212:2181,10.0.0.213:2181</p></blockquote><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241028231813958.png" alt="image-20241028231813958"></p><p><img src="C:/Users/Dell/AppData/Roaming/Typora/typora-user-images/image-20241028232321533.png" alt="image-20241028232321533"></p>]]></content>
    
    
    <summary type="html">本章介绍了zookeeper使用图形化管理以及JVM内存调优</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>09.zookeeper集群部署</title>
    <link href="https://lukme.top/posts/1c1f467f.html"/>
    <id>https://lukme.top/posts/1c1f467f.html</id>
    <published>2024-10-30T02:41:01.000Z</published>
    <updated>2024-10-30T04:02:23.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zookeeper作用和应用场景">zookeeper作用和应用场景</h2><p><strong>1.zookeeper存储什么数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">存储的主要是一些配置信息，可以用于服务注册，服务发现等常见。</span><br><span class="line">zookeeper的存储结构和Linux文件系统很相似，有多级目录。</span><br><span class="line"></span><br><span class="line">和Linux的根文件系统和类似，分为目录和文件，zookeeper也类似，只不过没有文件和目录的区别，而是都称之为zookeeper node，简称znode。</span><br><span class="line"></span><br><span class="line">znode不适合存储大量数据，一个znode默认最大存储2MB的数据。</span><br></pre></td></tr></table></figure><p><strong>2.zookeeper的应用场景</strong></p><p>和kafka，hbase，HDFS，YARN，Dubbo，Solr等服务，提供了配置信息，注册中心等辅助功能。</p><p><strong>ElasticStack架构升级–MQ</strong></p><blockquote><p>filebeat数据采集交给Kafka消息队列，logstash去拉取Kafka里的数据处理交给ES集群</p></blockquote><p><img src="https://cos.lukme.top/Pic/ElasticStack_MQ.png" alt="ElasticStack_MQ"></p><p>消息队列产品</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rocket MQ</span><br><span class="line">Active MQ</span><br><span class="line">Kafka</span><br><span class="line">Rebbit MQ</span><br></pre></td></tr></table></figure><h2 id="zookeeper单点部署">zookeeper单点部署</h2><p><code>这里仅为测试，可跳过步骤 4,5 直接部署集群，避免单点故障</code></p><blockquote><p>官方版本选择：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><p>zookeeper集群的节点数量选择</p><p>当每秒请求量低于6w/s，读取数据占据70%，大多数是读的场景，官方测试数据建议选择3台集群。</p></blockquote><p><strong>1.下载zookeeper</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# wget https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz</span><br></pre></td></tr></table></figure><p>**2.解压软件包 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# tar xf apache-zookeeper-3.8.4-bin.tar.gz -C /app/</span><br><span class="line"></span><br><span class="line"><span class="comment">#做软链接</span></span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">ln</span> -s /app/apache-zookeeper-3.8.4-bin/ /app/zookeeper</span><br></pre></td></tr></table></figure><p><strong>3.配置环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# <span class="built_in">cat</span> /etc/profile.d/zk.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/share/elasticsearch/jdk</span><br><span class="line"><span class="built_in">export</span> ZK_HOME=/app/zookeeper</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZK_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载环境变量</span></span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">source</span> /etc/profile.d/zk.sh</span><br></pre></td></tr></table></figure><p><strong>4.准备配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]#  <span class="built_in">cp</span> /app/zookeeper/conf/zoo&#123;_sample,&#125;.cfg </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里只是对配置文件的解读，未修改配置文件，复制出来默认即可</span></span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">cat</span> /app/zookeeper/conf/zoo.cfg </span><br><span class="line"><span class="comment"># 指定最小的时间单位tick，默认单位是毫秒，此处最小单位是1  tick=2s</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># 在集群初始化时的时间默认是10 tick，则表示20s</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># 数据同步时间5 tick，则表示10s</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># 数据的存储目录</span></span><br><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line"><span class="comment"># 服务监听的端口</span></span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure><p><strong>5.启动测试</strong></p><blockquote><p>注意，zookeeper启动会监听8080端口，启动失败注意查看端口冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#排错看日志</span></span><br><span class="line">[root@elk01:3 ~]# ll /app/zookeeper/logs/</span><br><span class="line">-rw-r--r-- 1 root root 16469 Oct 28 17:12 zookeeper-root-server-elk01.out</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">[root@elk01:3 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: standalone</span><br><span class="line"></span><br><span class="line"><span class="comment">#standalone  单点状态</span></span><br></pre></td></tr></table></figure><p><strong>连接测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# zkCli.sh      或者</span><br><span class="line">[root@elk01:3 ~]# zkCli.sh -server 10.0.0.211</span><br><span class="line"></span><br><span class="line">2024-10-28 17:06:31,811 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):o.a.z.ClientCnxn<span class="variable">$SendThread</span>@1453] - Session establishment complete on server localhost/127.0.0.1:2181, session <span class="built_in">id</span> = 0x10001704a360000, negotiated <span class="built_in">timeout</span> = 30000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] <span class="built_in">ls</span> /      <span class="comment">#ls命令测试下</span></span><br><span class="line">[zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#出现它的session id  即为部署成功</span></span><br></pre></td></tr></table></figure><h2 id="zookeeper集群部署">zookeeper集群部署</h2><blockquote><p>如果zookeeper单点未做，步骤1,3可跳过</p></blockquote><p><strong>1. 停止服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# zkServer.sh stop</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure><p><strong>2.修改配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# <span class="built_in">cat</span> /app/zookeeper/conf/zoo.cfg </span><br><span class="line"><span class="comment"># 定义最小单元的时间范围tick。</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># 启动时最长等待tick数量。</span></span><br><span class="line">initLimit=5</span><br><span class="line"><span class="comment"># 数据同步时最长等待的tick时间进行响应ACK</span></span><br><span class="line">syncLimit=2</span><br><span class="line"><span class="comment"># 指定数据目录</span></span><br><span class="line">dataDir=/app/data/zk</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment"># 开启四字命令允许所有的节点访问。</span></span><br><span class="line">4lw.commands.whitelist=*</span><br><span class="line"><span class="comment"># server.ID=A:B:C[:D]</span></span><br><span class="line"><span class="comment"># ID:</span></span><br><span class="line"><span class="comment">#    zk的唯一编号。</span></span><br><span class="line"><span class="comment"># A:</span></span><br><span class="line"><span class="comment">#    zk的主机地址。</span></span><br><span class="line"><span class="comment"># B:</span></span><br><span class="line"><span class="comment">#    leader的选举端口，是谁leader角色，就会监听该端口。</span></span><br><span class="line"><span class="comment"># C: </span></span><br><span class="line"><span class="comment">#    数据通信端口。</span></span><br><span class="line"><span class="comment"># D:</span></span><br><span class="line"><span class="comment">#    可选配置，指定角色。</span></span><br><span class="line">server.91=10.0.0.211:2888:3888</span><br><span class="line">server.92=10.0.0.212:2888:3888</span><br><span class="line">server.93=10.0.0.213:2888:3888</span><br><span class="line"></span><br><span class="line"><span class="comment">## Metrics Providers</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://prometheus.io Metrics Exporter</span></span><br><span class="line"><span class="comment">#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span></span><br><span class="line"><span class="comment">#metricsProvider.httpHost=0.0.0.0</span></span><br><span class="line"><span class="comment">#metricsProvider.httpPort=7000</span></span><br><span class="line"><span class="comment">#metricsProvider.exportJvmInfo=true</span></span><br></pre></td></tr></table></figure><p><strong>3.恢复原环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:3 ~]# <span class="built_in">rm</span> -fr /app/zookeeper/logs/*</span><br><span class="line">[root@elk01:3 ~]# <span class="built_in">rm</span> -fr tmp/zookeeper/*</span><br></pre></td></tr></table></figure><p><strong>4. 同步数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拷贝环境变量文件</span></span><br><span class="line">[root@elk01 ~]# scp /etc/profile.d/zk.sh 10.0.0.212:/etc/profile.d/</span><br><span class="line">[root@elk01 ~]# scp /etc/profile.d/zk.sh 10.0.0.213:/etc/profile.d/</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝zookeeper文件</span></span><br><span class="line">[root@elk01 ~]# scp apache-zookeeper-3.8.4-bin.tar.gz 10.0.0.212:/root</span><br><span class="line">[root@elk01 ~]# scp apache-zookeeper-3.8.4-bin.tar.gz 10.0.0.213:/root</span><br><span class="line"></span><br><span class="line"><span class="comment">#在对端解压zookeeper，做软链接（两个节点同步操做）</span></span><br><span class="line">[root@elk02 ~]# tar xf apache-zookeeper-3.8.4-bin.tar.gz -C /app/</span><br><span class="line"></span><br><span class="line">[root@elk02 ~]# <span class="built_in">ln</span> -s /app/apache-zookeeper-3.8.4-bin/ /app/zookeeper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝zookeeper配置文件</span></span><br><span class="line">[root@elk01 ~]# scp /app/zookeeper/conf/zoo.cfg 10.0.0.212:/app/zookeeper/conf/</span><br><span class="line">[root@elk01 ~]# scp /app/zookeeper/conf/zoo.cfg 10.0.0.213:/app/zookeeper/conf/</span><br></pre></td></tr></table></figure><p><strong>5.生成myid文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建数据目录（配置文件里声明的目录）  </span></span><br><span class="line">`这里使用循环是因为三台机器我已两两做了免密,另外两个节点也可使用命令  <span class="built_in">mkdir</span> /app/data/zk -p`</span><br><span class="line">[root@elk01:3 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 211 213` ;<span class="keyword">do</span> ssh 10.0.0.<span class="variable">$i</span> <span class="built_in">mkdir</span> /app/data/zk -p ;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成myid文件</span></span><br><span class="line">[root@elk01:3 ~]# <span class="keyword">for</span> n <span class="keyword">in</span> `<span class="built_in">seq</span> 211 213` ;<span class="keyword">do</span> ssh 10.0.0.<span class="variable">$n</span> <span class="string">&quot;echo <span class="variable">$n</span> &gt; /app/data/zk/myid&quot;</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#myid文件作用</span></span><br><span class="line">如果首次启动时候没有事务文件，则会比较myid文件里，谁最大谁就是master</span><br></pre></td></tr></table></figure><p><strong>6.启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# zkServer.sh start</span><br><span class="line">[root@elk02 ~]# zkServer.sh start</span><br><span class="line">[root@elk03 ~]# zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果报错找不到命令，可能是配置的环境变量没有生效，执行如下</span></span><br><span class="line">[root@elk03 ~]# <span class="built_in">source</span> /etc/profile.d/zk.sh </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">[root@elk03:1 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><p><strong>7.避坑指南</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我所遇到的坑：</span><br><span class="line"> 1.如果做集群，三个节点的配置文件一样，否则会有zookeeper起不来情况</span><br><span class="line"> 2.删除如果你想清空环境重新启动zookeeper，记得日志和数据目录一起清除，否则服务起不来</span><br></pre></td></tr></table></figure><h2 id="验证zookeeper集群高可用">验证zookeeper集群高可用</h2><p><strong>1.连接测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]# zkCli.sh -server 10.0.0.212:2181</span><br><span class="line">[root@elk01 ~]# zkCli.sh -server 10.0.0.213:2181</span><br><span class="line">···</span><br><span class="line">ablishment complete on server elk03/10.0.0.213:2181, session <span class="built_in">id</span> = 0xd40001f2a52b0000, negotiated <span class="built_in">timeout</span> = 30000</span><br></pre></td></tr></table></figure><p><strong>2. 将leader节点挂掉，集群会自动选举出新的leader，集群正常对外提供服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前leader节点是elk03</span></span><br><span class="line">[root@elk03 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止elk03的zookeeper</span></span><br><span class="line">[root@elk03 ~]# zkServer.sh stop</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br><span class="line"></span><br><span class="line"><span class="comment">#经查看leader在elk02节点上</span></span><br><span class="line">[root@elk02 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果此时再次停止leader节点，那还会不会再选举？</span></span><br><span class="line">`经测试，停掉elk02节点的zookeeper时候，elk01节点不会选举为leader，而是会停止zookeeper服务`</span><br><span class="line">这也是我前面猜的坑，只有一台zookeeper时候是起不来服务的</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复  两个节点停止的服务重新启用即可</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.zookeeper分布式集群的特点，半数以上节点存活才能对外提供服务;<br>2.zookeeper一个集群中仅有一个leader和多个follower;<br>3.如果一个zookeeper集群想要容忍N台故障，该集群最少要有2N+1个节点</p></blockquote><h2 id="zookeeper基础命令">zookeeper基础命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接zookeeper</span></span><br><span class="line">[root@elk02:1 ~]# zkCli.sh</span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 查看znode列表</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] <span class="built_in">ls</span> /</span><br><span class="line">[zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 创建znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create /luay</span><br><span class="line">Created /luay</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 创建znode时指定数据</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] create /test abc</span><br><span class="line">Created /test</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 查看znode的数据</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] get /test</span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 修改znode的值</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 7] get /luay</span><br><span class="line">null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 8] <span class="built_in">set</span> /luay new</span><br><span class="line">[zk: localhost:2181(CONNECTED) 9] get /luay</span><br><span class="line">new</span><br><span class="line"></span><br><span class="line"><span class="comment">#6. 创建子znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 10] <span class="built_in">ls</span> /luay </span><br><span class="line">[]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] create /luay/happy xixi</span><br><span class="line">Created /luay/happy</span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] get /luay/happy</span><br><span class="line">xixi</span><br><span class="line"></span><br><span class="line"><span class="comment">#7. 删除znode，前提是该znode没有子节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] <span class="built_in">ls</span> /test</span><br><span class="line">[] </span><br><span class="line">[zk: localhost:2181(CONNECTED) 14] delete /test</span><br><span class="line">[zk: localhost:2181(CONNECTED) 15] <span class="built_in">ls</span> /test</span><br><span class="line">Node does not exist: /test</span><br><span class="line">[zk: localhost:2181(CONNECTED) 16] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment">#8. 删除非空znode，该znode有子节点，会报错</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] delete /luay</span><br><span class="line">Node not empty: /luay</span><br><span class="line">[zk: localhost:2181(CONNECTED) 18] </span><br></pre></td></tr></table></figure><blockquote><p>你会发现我连接zookeeper时候是还有本地连接方式，当我使用远程方式连接elk01时候也会有数据，因为zookeeper做了集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk03 ~]# zkCli.sh -server 10.0.0.211:2181</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] <span class="built_in">ls</span> /</span><br><span class="line">[luay, zookeeper]</span><br></pre></td></tr></table></figure></blockquote><h2 id="zookeeper的watch机制（了解）">zookeeper的watch机制（了解）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">开两个终端，其中一个终端使用watch，另一个终端创建子znode</span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 监控一个znode下子节点的变化</span></span><br><span class="line">[zk: 10.0.0.211:2181(CONNECTED) 0] <span class="built_in">ls</span> -w /luay</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#发起创建动作</span></span><br><span class="line">[zk: 10.0.0.211:2181(CONNECTED) 11] create /luay/abc</span><br><span class="line">Created /luay/abc</span><br><span class="line"></span><br><span class="line"><span class="comment">#监控终端则输出</span></span><br><span class="line">[zk: 10.0.0.211:2181(CONNECTED) 1] </span><br><span class="line">WATCHER::</span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeChildrenChanged path:/luay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 监控znode的数据是否发生变化 （另一个终端只需要修改znode值即可监控到）</span></span><br><span class="line">[zk: 10.0.0.211:2181(CONNECTED) 0] get -w /luay</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line">- 1.watch事件是一次性的，只记录第一次创建或者修改动作;</span><br><span class="line">- 2.watch事件一旦触发，就会通知监控者程序，由该程序去负责相应的逻辑处理;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍了zookeeper集群的部署及基于kafka架构图</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>08.文档读写流程</title>
    <link href="https://lukme.top/posts/cfedfcaa.html"/>
    <id>https://lukme.top/posts/cfedfcaa.html</id>
    <published>2024-10-30T02:40:01.000Z</published>
    <updated>2024-10-30T04:02:17.234Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ce8649610c701f3708bbd23f88d3c1e9008927ca3698c07b84a347bc963191c5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本篇介绍了ES读写文档流程以及底层分片原理</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>07.Elasticsearch参数调优</title>
    <link href="https://lukme.top/posts/793b821e.html"/>
    <id>https://lukme.top/posts/793b821e.html</id>
    <published>2024-10-30T02:39:01.000Z</published>
    <updated>2024-10-30T04:02:11.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch参数调优">Elasticsearch参数调优</h2><h3 id="1-系统层面的调优">1. 系统层面的调优</h3><p>系统层面的调优主要是<code>内存的设定</code>与<code>避免交换内存</code>。</p><p>ES 安装后默认设置的堆内存是 <code>1GB</code>，这很明显是不够的，那么接下来就会有一个问题出现：我们要设置多少内存给 ES 呢？</p><p>其实这是要看我们集群节点的内存大小，还取决于我们是否在服务器节点上还是否要部署其他服务。</p><ul><li>如果内存相对很大，如 64G 及以上，并且我们不在 ES 集群上部署其他服务，那么我建议 ES 内存可以设置为 31G-32G，因为这里有一个 32G 性能瓶颈问题，直白的说就是即使你给了 ES 集群大于 32G 的内存，其性能也不一定会更加优良，甚至会不如设置为 31G-32G 时候的性能。<br>以我调优的集群为例，我所调优的服务器节点内存为 64G，服务器节点上也基本不跑其他服务，所以我把 ES 集群内存大小设置为了 31G，以充分发挥集群性能。</li><li>设置 ES 集群内存的时候，还有一点就是确保堆内存最小值（Xms）与最大值（Xmx）的大小是相同的，防止程序在运行时改变堆内存大小，这是一个很耗系统资源的过程。</li><li>还有一点就是避免交换内存，可以在配置文件中对内存进行锁定，以避免交换内存（也可以在操作系统层面进行关闭内存交换）。对应的参数：<code>bootstrap.mlockall: true</code></li></ul><h3 id="2-分片与副本">2. 分片与副本</h3><ul><li><code>分片 (shard)</code>：ES 是一个分布式的搜索引擎, 索引通常都会分解成不同部分, 分布在不同节点的部分数据就是分片。ES 自动管理和组织分片, 并在必要的时候对分片数据进行再平衡分配, 所以用户基本上不用担心分片的处理细节。创建索引时默认的分片数为 5 个，并且一旦创建不能更改。</li><li><code>副本 (replica)</code>：ES 默认创建一份副本，就是说在 5 个主分片的基础上，每个主分片都相应的有一个副本分片。额外的副本有利有弊，有副本可以有更强的故障恢复能力，但也占了相应副本倍数的磁盘空间。</li></ul><p>那我们在创建索引的时候，应该创建多少个分片与副本数呢？</p><ul><li>对于副本数，比较好确定，可以根据我们集群节点的多少与我们的存储空间决定，我们的集群服务器多，并且有足够大多存储空间，可以多设置副本数，一般是 1-3 个副本数，如果集群服务器相对较少并且存储空间没有那么宽松，则可以只设定一份副本以保证容灾（副本数可以动态调整）。</li><li>对于分片数，是比较难确定的。因为一个索引分片数一旦确定，就不能更改，所以我们在创建索引前，要充分的考虑到，以后我们创建的索引所存储的数据量，否则创建了不合适的分片数，会对我们的性能造成很大的影响。</li></ul><h3 id="3-参数调优">3. 参数调优</h3><p>下面我会介绍一些 ES 关键参数的调优。</p><p>有很多场景是，我们的 ES 集群占用了多大的 cpu 使用率，该如何调节呢。cpu 使用率高，有可能是写入导致的，也有可能是查询导致的，那要怎么查看呢？</p><p>可以先通过 <code>GET _nodes/&#123;node&#125;/hot_threads</code> 查看线程栈，查看是哪个线程占用 <code>cpu</code> 高，如果是 <code>elasticsearch[&#123;node&#125;][search][T#10]</code> 则是查询导致的，如果是 <code>elasticsearch[&#123;node&#125;][bulk][T#1]</code> 则是数据写入导致的。</p><p>在实际调优中，cpu 使用率很高，如果不是 SSD，建议把 <code>index.merge.scheduler.max_thread_count: 1</code> 索引 merge 最大线程数设置为 1 个，该参数可以有效调节写入的性能。因为在存储介质上并发写，由于寻址的原因，写入性能不会提升，只会降低。</p><p>还有几个重要参数可以进行设置，各位同学可以视自己的集群情况与数据情况而定。</p><ul><li><code>index.refresh_interval</code>：这个参数的意思是数据写入后几秒可以被搜索到，默认是 1s。每次索引的 refresh 会产生一个新的 lucene 段, 这会导致频繁的合并行为，如果业务需求对实时性要求没那么高，可以将此参数调大，实际调优告诉我，该参数确实很给力，cpu 使用率直线下降。</li><li><code>indices.memory.index_buffer_size</code>：如果我们要进行非常重的高并发写入操作，那么最好将 <code>indices.memory.index_buffer_size</code> 调大一些，index buffer 的大小是所有的 shard 公用的，一般建议（看的大牛博客），对于每个 shard 来说，最多给 <code>512mb</code>，因为再大性能就没什么提升了。ES 会将这个设置作为每个 shard 共享的 index buffer，那些特别活跃的 shard 会更多的使用这个 buffer。默认这个参数的值是 10%，也就是 jvm heap 的 10%。</li><li><code>translog</code>：ES 为了保证数据不丢失，每次 index、bulk、delete、update 完成的时候，一定会触发刷新 translog 到磁盘上。在提高数据安全性的同时当然也降低了一点性能。如果你不在意这点可能性，还是希望性能优先，可以设置如下参数：</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;index.translog&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sync_interval&quot;</span>: <span class="string">&quot;120s&quot;</span>,     <span class="comment">--sync间隔调高</span></span><br><span class="line">        <span class="string">&quot;durability&quot;</span>: <span class="string">&quot;async&quot;</span>,       -– 异步更新</span><br><span class="line">        <span class="string">&quot;flush_threshold_size&quot;</span>:<span class="string">&quot;1g&quot;</span>  <span class="comment">--log文件大小</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>这样设定的意思是开启异步写入磁盘，并设定写入的时间间隔与大小，有助于写入性能的提升。</li></ul><p><strong>还有一些超时参数的设置：</strong></p><ul><li><code>discovery.zen.ping_timeout</code> 判断 master 选举过程中，发现其他 node 存活的超时设置</li><li><code>discovery.zen.fd.ping_interval</code> 节点被 ping 的频率，检测节点是否存活</li><li><code>discovery.zen.fd.ping_timeout</code> 节点存活响应的时间，默认为 30s，如果网络可能存在隐患，可以适当调大</li><li><code>discovery.zen.fd.ping_retries ping</code> 失败/超时多少导致节点被视为失败，默认为 3</li></ul><h3 id="4-其他建议">4. 其他建议</h3><p>还有一些零碎的优化建议喔。</p><ul><li><code>插入索引自动生成 id</code>：当写入端使用特定的 id 将数据写入 ES 时，ES 会检查对应的索引下是否存在相同的 id，这个操作会随着文档数量的增加使消耗越来越大，所以如果业务上没有硬性需求建议使用 ES 自动生成的 id，加快写入速率。</li><li><code>避免稀疏索引</code>：索引稀疏之后，会导致索引文件增大。ES 的 keyword，数组类型采用 doc_values 结构，即使字段是空值，每个文档也会占用一定的空间，所以稀疏索引会造成磁盘增大，导致查询和写入效率降低。</li></ul><h2 id="jvm调优">jvm调优</h2><blockquote><p>仅提供思路，生产环境建议给到物理机内存一半，上限32G即可</p></blockquote><p>1.JVM调优策略</p><p>推荐设置是物理机的一半内存，但是当物理机的内存大于32GB的时候，若内存是64GB，则就是32GB内存。默认就是物理机内存的一半。</p><p>但是当大于64GB时，比如物理机是256GB内存，此时不应该设置内存为宿主机的一半，应该最大上限设置为32GB。</p><p>2.修改堆内存大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前内存使用状态</span></span><br><span class="line">[root@elk01:0 ~]# free -h</span><br><span class="line">               total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.8Gi       2.2Gi       1.2Gi       0.0Ki       388Mi       1.4Gi</span><br><span class="line">Swap:          2.7Gi       736Mi       2.0Gi</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看java程序已占用内存</span></span><br><span class="line">[root@elk92 ~]# ps -ef | grep java | grep -i xms</span><br><span class="line"></span><br><span class="line"><span class="comment">#我给的是4G内存，占用一半内存</span></span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027215156903.png" alt="image-20241027215156903"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改内存大小</span></span><br><span class="line">[root@elk01:0 ~]# vim /etc/elasticsearch/jvm.options</span><br><span class="line">···</span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx256m</span><br></pre></td></tr></table></figure><p><strong>拷贝文件到其他2个节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]# scp /etc/elasticsearch/jvm.options 10.0.0.212:/etc/elasticsearch/</span><br><span class="line">[root@elk01:0 ~]# scp /etc/elasticsearch/jvm.options 10.0.0.213:/etc/elasticsearch/</span><br></pre></td></tr></table></figure><p><strong>重启ES集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:0 ~]#  systemctl restart elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：生产环境最好滚动重启，当前重启完毕后再重启其它节点（防止所有集群宕机）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看集群状态是否OK</span></span><br><span class="line">[root@elk01:2 ~]# curl 10.0.0.211:9200/_cat/nodes</span><br><span class="line">10.0.0.213 42 97 0 0.25 0.30 0.28 cdfhilmrstw * elk03</span><br><span class="line">10.0.0.211 75 48 3 1.38 0.81 0.64 cdfhilmrstw - elk01</span><br><span class="line">10.0.0.212 52 97 0 0.34 0.31 0.28 cdfhilmrstw - elk02</span><br></pre></td></tr></table></figure><p><strong>再次查看内存占用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# free -h</span><br><span class="line">               total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.8Gi       1.1Gi       2.0Gi       0.0Ki       771Mi       2.5Gi</span><br><span class="line">Swap:          2.7Gi        60Mi       2.7Gi</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">针对Elasticsearch参数调优，从系统，分片上分析</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>06.ES集群加密</title>
    <link href="https://lukme.top/posts/de7fd46f.html"/>
    <id>https://lukme.top/posts/de7fd46f.html</id>
    <published>2024-10-30T02:38:01.000Z</published>
    <updated>2024-10-30T04:02:06.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES集群加密">ES集群加密</h2><p><strong>未加密前</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@elk91 ~]# curl 10.0.0.211:9200/_cat/nodes?v</span><br><span class="line">ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name</span><br><span class="line">10.0.0.92           78          66   0    0.01    0.02     0.03 cdfhilmrstw -      elk01</span><br><span class="line">10.0.0.93           44          47   1    0.02    0.02     0.01 cdfhilmrstw -      elk02</span><br><span class="line">10.0.0.91           54          68   1    0.22    0.17     0.12 cdfhilmrstw *      elk03</span><br></pre></td></tr></table></figure><p><strong>1. 生成证书文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@elk91 ~]# /usr/share/elasticsearch/bin/elasticsearch-certutil cert --days 3650 -out /etc/elasticsearch/elastic-certificates.p12 -pass <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改证书权限（否则es没有权限读取证书）</span></span><br><span class="line">[root@elk91 ~]# <span class="built_in">chown</span> elasticsearch:elasticsearch /etc/elasticsearch/elastic-certificates.p12</span><br><span class="line"></span><br><span class="line">`注释:`</span><br><span class="line">[root@elk01:1 ~]# /usr/share/elasticsearch/bin/elasticsearch-certutil cert -h 查看帮助</span><br><span class="line">--days   指定证书有效期多久</span><br><span class="line">--out    指定证书存放路径</span><br><span class="line">--pass   指定证书密码（为空即可）</span><br></pre></td></tr></table></figure><p><strong>2. 同步证书文件到其他节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# scp /etc/elasticsearch/elastic-certificates.p12 10.0.0.212:/etc/elasticsearch/</span><br><span class="line">[root@elk01:1 ~]# scp /etc/elasticsearch/elastic-certificates.p12 10.0.0.213:/etc/elasticsearch/</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：注意检查其它节点的证书权限是否是elasticsearch，若不是则修改（见上一步）</span></span><br></pre></td></tr></table></figure><p><strong>4. 修改ES配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# vim /etc/elasticsearch/elasticsearch.yml </span><br><span class="line"></span><br><span class="line"><span class="comment">#同步配置文件到其它节点</span></span><br><span class="line">[root@elk01:1 ~]# scp /etc/elasticsearch/elasticsearch.yml 10.0.0.212:/etc/elasticsearch/</span><br><span class="line">[root@elk01:1 ~]# scp /etc/elasticsearch/elasticsearch.yml 10.0.0.213:/etc/elasticsearch/</span><br></pre></td></tr></table></figure><p><strong>5. 所有节点重启elasticsearch</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]#  systemctl restart elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：生产环境最好滚动重启，当前重启完毕后再重启其它节点（防止所有集群宕机）</span></span><br></pre></td></tr></table></figure><p><strong>6. 测试访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# curl 10.0.0.211:9200/_cat/nodes</span><br><span class="line">&#123;<span class="string">&quot;error&quot;</span>:&#123;<span class="string">&quot;root_cause&quot;</span>:[&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;security_exception&quot;</span>,<span class="string">&quot;reason&quot;</span>:<span class="string">&quot;missing authentication credentials for REST request [/_cat/nodes]&quot;</span>,<span class="string">&quot;header&quot;</span>:&#123;<span class="string">&quot;WWW-Authenticate&quot;</span>:<span class="string">&quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;</span>&#125;&#125;],<span class="string">&quot;type&quot;</span>:<span class="string">&quot;security_exception&quot;</span>,<span class="string">&quot;reason&quot;</span>:<span class="string">&quot;missing authentication credentials for REST request [/_cat/nodes]&quot;</span>,<span class="string">&quot;header&quot;</span>:&#123;<span class="string">&quot;WWW-Authenticate&quot;</span>:<span class="string">&quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;</span>&#125;&#125;,<span class="string">&quot;status&quot;</span>:401&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#没有权限访问即为成功</span></span><br></pre></td></tr></table></figure><h2 id="生成密码">生成密码</h2><p><strong>注意保存密码</strong></p><blockquote><p>auto  非交互式，自动生成随机密码</p><p>interactive 交互式，自己输入密码（有7项）</p><p><code>注意保存密码</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto</span><br><span class="line">Initiating the setup of passwords <span class="keyword">for</span> reserved <span class="built_in">users</span> elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.</span><br><span class="line">The passwords will be randomly generated and printed to the console.</span><br><span class="line">Please confirm that you would like to <span class="built_in">continue</span> [y/N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user apm_system</span><br><span class="line">PASSWORD apm_system = ZY6QTWFDqGv64uVzB2PR</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user kibana_system</span><br><span class="line">PASSWORD kibana_system = BtaZLprbzzF1tYXSaCld</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user kibana</span><br><span class="line">PASSWORD kibana = BtaZLprbzzF1tYXSaCld</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user logstash_system</span><br><span class="line">PASSWORD logstash_system = ykztlETUjj9bu7zDF9Fw</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user beats_system</span><br><span class="line">PASSWORD beats_system = Fe075On7ZgmleYNkS9in</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user remote_monitoring_user</span><br><span class="line">PASSWORD remote_monitoring_user = J7bkmxKsrhUKhLJyksMD</span><br><span class="line"></span><br><span class="line">Changed password <span class="keyword">for</span> user elastic</span><br><span class="line">PASSWORD elastic = pNcoJpSv0j1Qp9ZZ4N5G</span><br></pre></td></tr></table></figure><p><strong>测试连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加上用户和密码测试</span></span><br><span class="line">[root@elk01:1 ~]# curl -u elastic:pNcoJpSv0j1Qp9ZZ4N5G 10.0.0.211:9200/_cat/nodes</span><br><span class="line">10.0.0.212 19 97 3 0.23 0.50 0.71 cdfhilmrstw * elk02</span><br><span class="line">10.0.0.211 12 91 3 0.31 0.46 0.53 cdfhilmrstw - elk01</span><br><span class="line">10.0.0.213 43 90 3 0.27 0.61 0.89 cdfhilmrstw - elk03</span><br></pre></td></tr></table></figure><h2 id="kibana集成ES加密集群">kibana集成ES加密集群</h2><p><strong>1. 修改配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# vim /etc/kibana/kibana.yml </span><br><span class="line">···</span><br><span class="line">elasticsearch.username: <span class="string">&quot;kibana_system&quot;</span></span><br><span class="line">elasticsearch.password: <span class="string">&quot;BtaZLprbzzF1tYXSaCld&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#密码见上面生成的</span></span><br></pre></td></tr></table></figure><p>**2. 重启kibana服务 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]#  systemctl restart kibana</span><br></pre></td></tr></table></figure><p><strong>3. 访问kibana的webUI登录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.211:5601</span><br><span class="line"></span><br><span class="line">使用elastic用户登录</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027222304410.png" alt="image-20241027222304410"></p><p><img src="https://cos.lukme.top/Pic/image-20241027222417898.png" alt="image-20241027222417898"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录后如果没有出现右上角e标志，尝试清除缓存，或者使用无痕模式登录</span></span><br><span class="line">这里修改密码为   123456</span><br></pre></td></tr></table></figure><h2 id="filebeat写入ES加密集群">filebeat写入ES加密集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:2 ~]# <span class="built_in">cat</span> /etc/filebeat/19-tcp_es_secret.yaml </span><br><span class="line"><span class="comment"># 数据从监听的指定tcp端口来</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: tcp</span><br><span class="line">  host: <span class="string">&quot;0.0.0.0:9000&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#数据到终点</span></span><br><span class="line">output:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    hosts:</span><br><span class="line">    - <span class="string">&quot;http://10.0.0.211:9200&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.0.0.212:9200&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.0.0.213:9200&quot;</span></span><br><span class="line">    index: <span class="string">&quot;linux-tcp-secret-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">    username: elastic</span><br><span class="line">    password: <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.name: <span class="string">&quot;linux-tcp-secret&quot;</span></span><br><span class="line">setup.template.pattern: <span class="string">&quot;linux-tcp-secret*&quot;</span></span><br><span class="line">setup.template.overwrite: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 5</span><br><span class="line">  index.number_of_replicas: 0</span><br><span class="line">  </span><br><span class="line"><span class="comment">#启动实例</span></span><br><span class="line">[root@elk01:2 ~]# filebeat -e -c /etc/filebeat/19-tcp_es_secret.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment">#测试实例</span></span><br><span class="line">[root@elk01:2 ~]#  <span class="built_in">echo</span> 7890 |nc 10.0.0.211 9000</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027224350997.png" alt="image-20241027224350997"></p><p><strong>使用开发工具简单查看数据</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027224929276.png" alt="image-20241027224929276"></p><h2 id="logstash写入ES加密集群">logstash写入ES加密集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01:1 ~]# <span class="built_in">cat</span> /etc/logstash/conf.d/16-tcp-es-secret.conf</span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 8888</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">   elasticsearch&#123;</span><br><span class="line">      hosts =&gt; [<span class="string">&quot;10.0.0.211:9200&quot;</span>,<span class="string">&quot;10.0.0.212:9200&quot;</span>,<span class="string">&quot;10.0.0.213:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;logstach-tcp-secret-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line">      user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动实例</span></span><br><span class="line">[root@elk01:0 ~]# logstash -rf /etc/logstash/conf.d/16-tcp-es-secret.conf </span><br><span class="line"></span><br><span class="line"><span class="comment">#写入数据测试</span></span><br><span class="line">[root@elk02:0 ~]# <span class="built_in">echo</span> 666666 |nc 10.0.0.211 8888</span><br></pre></td></tr></table></figure><p><img src="https://cos.lukme.top/Pic/image-20241027225729785.png" alt="image-20241027225729785"></p><h2 id="角色访问">角色访问</h2><p><strong>创建角色，给开发或者运维不同权限</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027231430903.png" alt="image-20241027231430903"></p><p><img src="https://cos.lukme.top/Pic/image-20241027232332394.png" alt="image-20241027232332394"></p><p><img src="https://cos.lukme.top/Pic/image-20241027232500498.png" alt="image-20241027232500498"></p><p><strong>创建运维角色</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027232645991.png" alt="image-20241027232645991"></p><p><strong>还有kibana的权限选择all完事</strong>  <em><strong>图略</strong></em></p><p><strong>创建用户</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027232837646.png" alt="image-20241027232837646"></p><p><strong>登录李星星用户   权限确实少</strong></p><p><img src="https://cos.lukme.top/Pic/image-20241027233121133.png" alt="image-20241027233121133"></p>]]></content>
    
    
    <summary type="html">针对ES集群加密，设置权限访问</summary>
    
    
    
    <category term="ELK日志收集" scheme="https://lukme.top/categories/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="ELK" scheme="https://lukme.top/tags/ELK/"/>
    
  </entry>
  
</feed>
